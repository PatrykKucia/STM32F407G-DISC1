
ostatni.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005adc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08005c6c  08005c6c  00006c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cc4  08005cc4  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  08005cc4  08005cc4  00006cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ccc  08005ccc  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ccc  08005ccc  00006ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005cd0  08005cd0  00006cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005cd4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000706c  2**0
                  CONTENTS
 10 .bss          000002ac  2000006c  2000006c  0000706c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000318  20000318  0000706c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000118ee  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f47  00000000  00000000  0001898a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001128  00000000  00000000  0001b8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d3d  00000000  00000000  0001ca00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025547  00000000  00000000  0001d73d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016958  00000000  00000000  00042c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd1cd  00000000  00000000  000595dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001367a9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e58  00000000  00000000  001367ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  0013b644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c54 	.word	0x08005c54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08005c54 	.word	0x08005c54

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000566:	463b      	mov	r3, r7
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000572:	4b21      	ldr	r3, [pc, #132]	@ (80005f8 <MX_ADC1_Init+0x98>)
 8000574:	4a21      	ldr	r2, [pc, #132]	@ (80005fc <MX_ADC1_Init+0x9c>)
 8000576:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000578:	4b1f      	ldr	r3, [pc, #124]	@ (80005f8 <MX_ADC1_Init+0x98>)
 800057a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800057e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000580:	4b1d      	ldr	r3, [pc, #116]	@ (80005f8 <MX_ADC1_Init+0x98>)
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000586:	4b1c      	ldr	r3, [pc, #112]	@ (80005f8 <MX_ADC1_Init+0x98>)
 8000588:	2200      	movs	r2, #0
 800058a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800058c:	4b1a      	ldr	r3, [pc, #104]	@ (80005f8 <MX_ADC1_Init+0x98>)
 800058e:	2200      	movs	r2, #0
 8000590:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000592:	4b19      	ldr	r3, [pc, #100]	@ (80005f8 <MX_ADC1_Init+0x98>)
 8000594:	2200      	movs	r2, #0
 8000596:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800059a:	4b17      	ldr	r3, [pc, #92]	@ (80005f8 <MX_ADC1_Init+0x98>)
 800059c:	2200      	movs	r2, #0
 800059e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005a0:	4b15      	ldr	r3, [pc, #84]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005a2:	4a17      	ldr	r2, [pc, #92]	@ (8000600 <MX_ADC1_Init+0xa0>)
 80005a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005a6:	4b14      	ldr	r3, [pc, #80]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005ac:	4b12      	ldr	r3, [pc, #72]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005b2:	4b11      	ldr	r3, [pc, #68]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ba:	4b0f      	ldr	r3, [pc, #60]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005bc:	2201      	movs	r2, #1
 80005be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005c0:	480d      	ldr	r0, [pc, #52]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005c2:	f002 fa45 	bl	8002a50 <HAL_ADC_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005cc:	f001 ff3e 	bl	800244c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005d0:	2301      	movs	r3, #1
 80005d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005d4:	2301      	movs	r3, #1
 80005d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005dc:	463b      	mov	r3, r7
 80005de:	4619      	mov	r1, r3
 80005e0:	4805      	ldr	r0, [pc, #20]	@ (80005f8 <MX_ADC1_Init+0x98>)
 80005e2:	f002 fbe3 	bl	8002dac <HAL_ADC_ConfigChannel>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005ec:	f001 ff2e 	bl	800244c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005f0:	bf00      	nop
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000088 	.word	0x20000088
 80005fc:	40012000 	.word	0x40012000
 8000600:	0f000001 	.word	0x0f000001

08000604 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	@ 0x28
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a17      	ldr	r2, [pc, #92]	@ (8000680 <HAL_ADC_MspInit+0x7c>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d127      	bne.n	8000676 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	613b      	str	r3, [r7, #16]
 800062a:	4b16      	ldr	r3, [pc, #88]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 800062c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800062e:	4a15      	ldr	r2, [pc, #84]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 8000630:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000634:	6453      	str	r3, [r2, #68]	@ 0x44
 8000636:	4b13      	ldr	r3, [pc, #76]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 8000638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800063a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800063e:	613b      	str	r3, [r7, #16]
 8000640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	4b0f      	ldr	r3, [pc, #60]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	4a0e      	ldr	r2, [pc, #56]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6313      	str	r3, [r2, #48]	@ 0x30
 8000652:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <HAL_ADC_MspInit+0x80>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800065e:	2302      	movs	r3, #2
 8000660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000662:	2303      	movs	r3, #3
 8000664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	4805      	ldr	r0, [pc, #20]	@ (8000688 <HAL_ADC_MspInit+0x84>)
 8000672:	f002 fe9f 	bl	80033b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000676:	bf00      	nop
 8000678:	3728      	adds	r7, #40	@ 0x28
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40012000 	.word	0x40012000
 8000684:	40023800 	.word	0x40023800
 8000688:	40020000 	.word	0x40020000

0800068c <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
 80006a0:	615a      	str	r2, [r3, #20]
 80006a2:	619a      	str	r2, [r3, #24]
//bank 4
  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80006a4:	4b27      	ldr	r3, [pc, #156]	@ (8000744 <MX_FSMC_Init+0xb8>)
 80006a6:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 80006aa:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80006ac:	4b25      	ldr	r3, [pc, #148]	@ (8000744 <MX_FSMC_Init+0xb8>)
 80006ae:	4a26      	ldr	r2, [pc, #152]	@ (8000748 <MX_FSMC_Init+0xbc>)
 80006b0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80006b2:	4b24      	ldr	r3, [pc, #144]	@ (8000744 <MX_FSMC_Init+0xb8>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80006b8:	4b22      	ldr	r3, [pc, #136]	@ (8000744 <MX_FSMC_Init+0xb8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80006be:	4b21      	ldr	r3, [pc, #132]	@ (8000744 <MX_FSMC_Init+0xb8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80006c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000744 <MX_FSMC_Init+0xb8>)
 80006c6:	2210      	movs	r2, #16
 80006c8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80006ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000744 <MX_FSMC_Init+0xb8>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80006d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000744 <MX_FSMC_Init+0xb8>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80006d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000744 <MX_FSMC_Init+0xb8>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80006dc:	4b19      	ldr	r3, [pc, #100]	@ (8000744 <MX_FSMC_Init+0xb8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80006e2:	4b18      	ldr	r3, [pc, #96]	@ (8000744 <MX_FSMC_Init+0xb8>)
 80006e4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80006e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80006ea:	4b16      	ldr	r3, [pc, #88]	@ (8000744 <MX_FSMC_Init+0xb8>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80006f0:	4b14      	ldr	r3, [pc, #80]	@ (8000744 <MX_FSMC_Init+0xb8>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80006f6:	4b13      	ldr	r3, [pc, #76]	@ (8000744 <MX_FSMC_Init+0xb8>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80006fc:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <MX_FSMC_Init+0xb8>)
 80006fe:	2200      	movs	r2, #0
 8000700:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000702:	4b10      	ldr	r3, [pc, #64]	@ (8000744 <MX_FSMC_Init+0xb8>)
 8000704:	2200      	movs	r2, #0
 8000706:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 1;
 8000708:	2301      	movs	r3, #1
 800070a:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800070c:	230f      	movs	r3, #15
 800070e:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 15;
 8000710:	230f      	movs	r3, #15
 8000712:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000718:	2310      	movs	r3, #16
 800071a:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800071c:	2311      	movs	r3, #17
 800071e:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000720:	2300      	movs	r3, #0
 8000722:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2200      	movs	r2, #0
 8000728:	4619      	mov	r1, r3
 800072a:	4806      	ldr	r0, [pc, #24]	@ (8000744 <MX_FSMC_Init+0xb8>)
 800072c:	f003 fc90 	bl	8004050 <HAL_SRAM_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8000736:	f001 fe89 	bl	800244c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800073a:	bf00      	nop
 800073c:	3720      	adds	r7, #32
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	200000d0 	.word	0x200000d0
 8000748:	a0000104 	.word	0xa0000104

0800074c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000760:	4b1c      	ldr	r3, [pc, #112]	@ (80007d4 <HAL_FSMC_MspInit+0x88>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d131      	bne.n	80007cc <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000768:	4b1a      	ldr	r3, [pc, #104]	@ (80007d4 <HAL_FSMC_MspInit+0x88>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	4b19      	ldr	r3, [pc, #100]	@ (80007d8 <HAL_FSMC_MspInit+0x8c>)
 8000774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000776:	4a18      	ldr	r2, [pc, #96]	@ (80007d8 <HAL_FSMC_MspInit+0x8c>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6393      	str	r3, [r2, #56]	@ 0x38
 800077e:	4b16      	ldr	r3, [pc, #88]	@ (80007d8 <HAL_FSMC_MspInit+0x8c>)
 8000780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800078a:	f64f 7380 	movw	r3, #65408	@ 0xff80
 800078e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	2302      	movs	r3, #2
 8000792:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000798:	2303      	movs	r3, #3
 800079a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800079c:	230c      	movs	r3, #12
 800079e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	4619      	mov	r1, r3
 80007a4:	480d      	ldr	r0, [pc, #52]	@ (80007dc <HAL_FSMC_MspInit+0x90>)
 80007a6:	f002 fe05 	bl	80033b4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80007aa:	f64c 73b3 	movw	r3, #53171	@ 0xcfb3
 80007ae:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b0:	2302      	movs	r3, #2
 80007b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b8:	2303      	movs	r3, #3
 80007ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80007bc:	230c      	movs	r3, #12
 80007be:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	4619      	mov	r1, r3
 80007c4:	4806      	ldr	r0, [pc, #24]	@ (80007e0 <HAL_FSMC_MspInit+0x94>)
 80007c6:	f002 fdf5 	bl	80033b4 <HAL_GPIO_Init>
 80007ca:	e000      	b.n	80007ce <HAL_FSMC_MspInit+0x82>
    return;
 80007cc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80007ce:	3718      	adds	r7, #24
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000120 	.word	0x20000120
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40021000 	.word	0x40021000
 80007e0:	40020c00 	.word	0x40020c00

080007e4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80007ec:	f7ff ffae 	bl	800074c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08c      	sub	sp, #48	@ 0x30
 80007fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	61bb      	str	r3, [r7, #24]
 8000812:	4b4b      	ldr	r3, [pc, #300]	@ (8000940 <MX_GPIO_Init+0x148>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a4a      	ldr	r2, [pc, #296]	@ (8000940 <MX_GPIO_Init+0x148>)
 8000818:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b48      	ldr	r3, [pc, #288]	@ (8000940 <MX_GPIO_Init+0x148>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000826:	61bb      	str	r3, [r7, #24]
 8000828:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
 800082e:	4b44      	ldr	r3, [pc, #272]	@ (8000940 <MX_GPIO_Init+0x148>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a43      	ldr	r2, [pc, #268]	@ (8000940 <MX_GPIO_Init+0x148>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b41      	ldr	r3, [pc, #260]	@ (8000940 <MX_GPIO_Init+0x148>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	4b3d      	ldr	r3, [pc, #244]	@ (8000940 <MX_GPIO_Init+0x148>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a3c      	ldr	r2, [pc, #240]	@ (8000940 <MX_GPIO_Init+0x148>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b3a      	ldr	r3, [pc, #232]	@ (8000940 <MX_GPIO_Init+0x148>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	4b36      	ldr	r3, [pc, #216]	@ (8000940 <MX_GPIO_Init+0x148>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a35      	ldr	r2, [pc, #212]	@ (8000940 <MX_GPIO_Init+0x148>)
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b33      	ldr	r3, [pc, #204]	@ (8000940 <MX_GPIO_Init+0x148>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	4b2f      	ldr	r3, [pc, #188]	@ (8000940 <MX_GPIO_Init+0x148>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a2e      	ldr	r2, [pc, #184]	@ (8000940 <MX_GPIO_Init+0x148>)
 8000888:	f043 0310 	orr.w	r3, r3, #16
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b2c      	ldr	r3, [pc, #176]	@ (8000940 <MX_GPIO_Init+0x148>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0310 	and.w	r3, r3, #16
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	4b28      	ldr	r3, [pc, #160]	@ (8000940 <MX_GPIO_Init+0x148>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a27      	ldr	r2, [pc, #156]	@ (8000940 <MX_GPIO_Init+0x148>)
 80008a4:	f043 0308 	orr.w	r3, r3, #8
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b25      	ldr	r3, [pc, #148]	@ (8000940 <MX_GPIO_Init+0x148>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0308 	and.w	r3, r3, #8
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	2110      	movs	r1, #16
 80008ba:	4822      	ldr	r0, [pc, #136]	@ (8000944 <MX_GPIO_Init+0x14c>)
 80008bc:	f002 ff16 	bl	80036ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BL_Pin|TP_SCK_Pin|TP_MOSI_Pin, GPIO_PIN_SET);
 80008c0:	2201      	movs	r2, #1
 80008c2:	f24a 0101 	movw	r1, #40961	@ 0xa001
 80008c6:	4820      	ldr	r0, [pc, #128]	@ (8000948 <MX_GPIO_Init+0x150>)
 80008c8:	f002 ff10 	bl	80036ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TP_CS_Pin;
 80008cc:	2310      	movs	r3, #16
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008d8:	2302      	movs	r3, #2
 80008da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(TP_CS_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	4818      	ldr	r0, [pc, #96]	@ (8000944 <MX_GPIO_Init+0x14c>)
 80008e4:	f002 fd66 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 80008e8:	2320      	movs	r3, #32
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ec:	2300      	movs	r3, #0
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008f0:	2302      	movs	r3, #2
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4812      	ldr	r0, [pc, #72]	@ (8000944 <MX_GPIO_Init+0x14c>)
 80008fc:	f002 fd5a 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BL_Pin|TP_SCK_Pin|TP_MOSI_Pin;
 8000900:	f24a 0301 	movw	r3, #40961	@ 0xa001
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800090a:	2301      	movs	r3, #1
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800090e:	2302      	movs	r3, #2
 8000910:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	480b      	ldr	r0, [pc, #44]	@ (8000948 <MX_GPIO_Init+0x150>)
 800091a:	f002 fd4b 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TP_MISO_Pin;
 800091e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000924:	2300      	movs	r3, #0
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000928:	2301      	movs	r3, #1
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TP_MISO_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	4805      	ldr	r0, [pc, #20]	@ (8000948 <MX_GPIO_Init+0x150>)
 8000934:	f002 fd3e 	bl	80033b4 <HAL_GPIO_Init>

}
 8000938:	bf00      	nop
 800093a:	3730      	adds	r7, #48	@ 0x30
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40023800 	.word	0x40023800
 8000944:	40020800 	.word	0x40020800
 8000948:	40020400 	.word	0x40020400

0800094c <lcd_fill>:
								ey:the ending y coordinate of the specified area
								color:the filled color value
 * @retvalue   :None
********************************************************************/
void lcd_fill(uint16_t sx,uint16_t sy,uint16_t ex,uint16_t ey,uint16_t color)
{  	
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	4604      	mov	r4, r0
 8000954:	4608      	mov	r0, r1
 8000956:	4611      	mov	r1, r2
 8000958:	461a      	mov	r2, r3
 800095a:	4623      	mov	r3, r4
 800095c:	80fb      	strh	r3, [r7, #6]
 800095e:	4603      	mov	r3, r0
 8000960:	80bb      	strh	r3, [r7, #4]
 8000962:	460b      	mov	r3, r1
 8000964:	807b      	strh	r3, [r7, #2]
 8000966:	4613      	mov	r3, r2
 8000968:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;			
	uint16_t width=ex-sx+1; 		
 800096a:	887a      	ldrh	r2, [r7, #2]
 800096c:	88fb      	ldrh	r3, [r7, #6]
 800096e:	1ad3      	subs	r3, r2, r3
 8000970:	b29b      	uxth	r3, r3
 8000972:	3301      	adds	r3, #1
 8000974:	817b      	strh	r3, [r7, #10]
	uint16_t height=ey-sy+1;		
 8000976:	883a      	ldrh	r2, [r7, #0]
 8000978:	88bb      	ldrh	r3, [r7, #4]
 800097a:	1ad3      	subs	r3, r2, r3
 800097c:	b29b      	uxth	r3, r3
 800097e:	3301      	adds	r3, #1
 8000980:	813b      	strh	r3, [r7, #8]
	lcd_setwindows(sx,sy,ex,ey);
 8000982:	883b      	ldrh	r3, [r7, #0]
 8000984:	887a      	ldrh	r2, [r7, #2]
 8000986:	88b9      	ldrh	r1, [r7, #4]
 8000988:	88f8      	ldrh	r0, [r7, #6]
 800098a:	f001 fba9 	bl	80020e0 <lcd_setwindows>
	for(i=0;i<height;i++)
 800098e:	2300      	movs	r3, #0
 8000990:	81fb      	strh	r3, [r7, #14]
 8000992:	e010      	b.n	80009b6 <lcd_fill+0x6a>
	{
		for(j=0;j<width;j++)
 8000994:	2300      	movs	r3, #0
 8000996:	81bb      	strh	r3, [r7, #12]
 8000998:	e006      	b.n	80009a8 <lcd_fill+0x5c>
		lcd_writedata_16bit(color);
 800099a:	8c3b      	ldrh	r3, [r7, #32]
 800099c:	4618      	mov	r0, r3
 800099e:	f000 f89d 	bl	8000adc <lcd_writedata_16bit>
		for(j=0;j<width;j++)
 80009a2:	89bb      	ldrh	r3, [r7, #12]
 80009a4:	3301      	adds	r3, #1
 80009a6:	81bb      	strh	r3, [r7, #12]
 80009a8:	89ba      	ldrh	r2, [r7, #12]
 80009aa:	897b      	ldrh	r3, [r7, #10]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d3f4      	bcc.n	800099a <lcd_fill+0x4e>
	for(i=0;i<height;i++)
 80009b0:	89fb      	ldrh	r3, [r7, #14]
 80009b2:	3301      	adds	r3, #1
 80009b4:	81fb      	strh	r3, [r7, #14]
 80009b6:	89fa      	ldrh	r2, [r7, #14]
 80009b8:	893b      	ldrh	r3, [r7, #8]
 80009ba:	429a      	cmp	r2, r3
 80009bc:	d3ea      	bcc.n	8000994 <lcd_fill+0x48>
	}
	lcd_setwindows(0,0,lcddev.width-1,lcddev.height-1);
 80009be:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <lcd_fill+0x94>)
 80009c0:	881b      	ldrh	r3, [r3, #0]
 80009c2:	3b01      	subs	r3, #1
 80009c4:	b29a      	uxth	r2, r3
 80009c6:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <lcd_fill+0x94>)
 80009c8:	885b      	ldrh	r3, [r3, #2]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	2100      	movs	r1, #0
 80009d0:	2000      	movs	r0, #0
 80009d2:	f001 fb85 	bl	80020e0 <lcd_setwindows>
}
 80009d6:	bf00      	nop
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd90      	pop	{r4, r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000124 	.word	0x20000124

080009e4 <lcd_read>:

uint16_t POINT_COLOR = 0x0000,BACK_COLOR = 0xffff;
uint16_t devicecode;

uint16_t lcd_read(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
    volatile uint16_t data;
    data=LCD->LCD_RAM;
 80009ea:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <lcd_read+0x20>)
 80009ec:	885b      	ldrh	r3, [r3, #2]
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	80fb      	strh	r3, [r7, #6]
    return data;
 80009f2:	88fb      	ldrh	r3, [r7, #6]
 80009f4:	b29b      	uxth	r3, r3
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	6001fffe 	.word	0x6001fffe

08000a08 <lcd_wr_reg>:
 * @function   :write an 16-bit command to the lcd screen
 * @parameters :data:command value to be written
 * @retvalue   :none
******************************************************************************/
void lcd_wr_reg(uint16_t data)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	80fb      	strh	r3, [r7, #6]
    LCD->LCD_REG=data;
 8000a12:	4a04      	ldr	r2, [pc, #16]	@ (8000a24 <lcd_wr_reg+0x1c>)
 8000a14:	88fb      	ldrh	r3, [r7, #6]
 8000a16:	8013      	strh	r3, [r2, #0]
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	6001fffe 	.word	0x6001fffe

08000a28 <lcd_wr_data>:
 * @function   :write an 16-bit data to the lcd screen
 * @parameters :data:data value to be written
 * @retvalue   :none
******************************************************************************/
void lcd_wr_data(uint16_t data)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	80fb      	strh	r3, [r7, #6]
    LCD->LCD_RAM=data;
 8000a32:	4a04      	ldr	r2, [pc, #16]	@ (8000a44 <lcd_wr_data+0x1c>)
 8000a34:	88fb      	ldrh	r3, [r7, #6]
 8000a36:	8053      	strh	r3, [r2, #2]
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	6001fffe 	.word	0x6001fffe

08000a48 <lcd_rd_data>:
 * @function   :read an 16-bit value from the lcd screen
 * @parameters :none
 * @retvalue   :read value
******************************************************************************/
uint16_t lcd_rd_data(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
    return lcd_read();
 8000a4c:	f7ff ffca 	bl	80009e4 <lcd_read>
 8000a50:	4603      	mov	r3, r0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <lcd_writereg>:
 * @parameters :lcd_reg:register address
                lcd_regvalue:data to be written
 * @retvalue   :none
******************************************************************************/
void lcd_writereg(uint16_t lcd_reg, uint16_t lcd_regvalue)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	460a      	mov	r2, r1
 8000a62:	80fb      	strh	r3, [r7, #6]
 8000a64:	4613      	mov	r3, r2
 8000a66:	80bb      	strh	r3, [r7, #4]
    LCD->LCD_REG = lcd_reg;
 8000a68:	4a05      	ldr	r2, [pc, #20]	@ (8000a80 <lcd_writereg+0x28>)
 8000a6a:	88fb      	ldrh	r3, [r7, #6]
 8000a6c:	8013      	strh	r3, [r2, #0]
    LCD->LCD_RAM = lcd_regvalue;
 8000a6e:	4a04      	ldr	r2, [pc, #16]	@ (8000a80 <lcd_writereg+0x28>)
 8000a70:	88bb      	ldrh	r3, [r7, #4]
 8000a72:	8053      	strh	r3, [r2, #2]
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	6001fffe 	.word	0x6001fffe

08000a84 <lcd_readreg>:
 * @function   :read value from specially registers
 * @parameters :lcd_reg:register address
 * @retvalue   :read value
******************************************************************************/
void lcd_readreg(uint16_t lcd_reg,uint16_t *rval,int n)
{
 8000a84:	b590      	push	{r4, r7, lr}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
 8000a90:	81fb      	strh	r3, [r7, #14]
    lcd_wr_reg(lcd_reg);
 8000a92:	89fb      	ldrh	r3, [r7, #14]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ffb7 	bl	8000a08 <lcd_wr_reg>
    while(n--)
 8000a9a:	e009      	b.n	8000ab0 <lcd_readreg+0x2c>
    {
        *(rval++) = lcd_rd_data();
 8000a9c:	68bc      	ldr	r4, [r7, #8]
 8000a9e:	1ca3      	adds	r3, r4, #2
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	f7ff ffd1 	bl	8000a48 <lcd_rd_data>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	8023      	strh	r3, [r4, #0]
        delay_us(100);
 8000aaa:	2064      	movs	r0, #100	@ 0x64
 8000aac:	f001 fe22 	bl	80026f4 <delay_us>
    while(n--)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	1e5a      	subs	r2, r3, #1
 8000ab4:	607a      	str	r2, [r7, #4]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d1f0      	bne.n	8000a9c <lcd_readreg+0x18>
    }
}
 8000aba:	bf00      	nop
 8000abc:	bf00      	nop
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd90      	pop	{r4, r7, pc}

08000ac4 <lcd_writeram_prepare>:
 * @function   :write gram
 * @parameters :none
 * @retvalue   :none
******************************************************************************/
void lcd_writeram_prepare(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
    lcd_wr_reg(lcddev.wramcmd);
 8000ac8:	4b03      	ldr	r3, [pc, #12]	@ (8000ad8 <lcd_writeram_prepare+0x14>)
 8000aca:	891b      	ldrh	r3, [r3, #8]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff9b 	bl	8000a08 <lcd_wr_reg>
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000124 	.word	0x20000124

08000adc <lcd_writedata_16bit>:
 * @function   :write an 16-bit command to the lcd screen
 * @parameters :data:data to be written
 * @retvalue   :none
******************************************************************************/
void lcd_writedata_16bit(uint16_t data)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	80fb      	strh	r3, [r7, #6]
    LCD->LCD_RAM = data;
 8000ae6:	4a04      	ldr	r2, [pc, #16]	@ (8000af8 <lcd_writedata_16bit+0x1c>)
 8000ae8:	88fb      	ldrh	r3, [r7, #6]
 8000aea:	8053      	strh	r3, [r2, #2]
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	6001fffe 	.word	0x6001fffe

08000afc <lcd_clear>:
 * @function   :full screen filled lcd screen
 * @parameters :color:filled color
 * @retvalue   :none
******************************************************************************/
void lcd_clear(uint16_t color)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	80fb      	strh	r3, [r7, #6]
    unsigned int i;
    uint32_t total_point=lcddev.width*lcddev.height;
 8000b06:	4b13      	ldr	r3, [pc, #76]	@ (8000b54 <lcd_clear+0x58>)
 8000b08:	881b      	ldrh	r3, [r3, #0]
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <lcd_clear+0x58>)
 8000b0e:	885b      	ldrh	r3, [r3, #2]
 8000b10:	fb02 f303 	mul.w	r3, r2, r3
 8000b14:	60bb      	str	r3, [r7, #8]
    lcd_setwindows(0,0,lcddev.width-1,lcddev.height-1);
 8000b16:	4b0f      	ldr	r3, [pc, #60]	@ (8000b54 <lcd_clear+0x58>)
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	b29a      	uxth	r2, r3
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b54 <lcd_clear+0x58>)
 8000b20:	885b      	ldrh	r3, [r3, #2]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	2100      	movs	r1, #0
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f001 fad9 	bl	80020e0 <lcd_setwindows>
    for(i=0; i<total_point; i++)
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	e005      	b.n	8000b40 <lcd_clear+0x44>
    {
        LCD->LCD_RAM = color;
 8000b34:	4a08      	ldr	r2, [pc, #32]	@ (8000b58 <lcd_clear+0x5c>)
 8000b36:	88fb      	ldrh	r3, [r7, #6]
 8000b38:	8053      	strh	r3, [r2, #2]
    for(i=0; i<total_point; i++)
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fa      	ldr	r2, [r7, #12]
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d3f5      	bcc.n	8000b34 <lcd_clear+0x38>
    }
}
 8000b48:	bf00      	nop
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000124 	.word	0x20000124
 8000b58:	6001fffe 	.word	0x6001fffe

08000b5c <lcd_init>:
 * @function   :initialization lcd screen
 * @parameters :none
 * @retvalue   :none
******************************************************************************/
void lcd_init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
//		HAL_GPIO_WritePin(GPIOB,LCD_RST_Pin,GPIO_PIN_RESET);
//    HAL_Delay(50);
//		HAL_GPIO_WritePin(GPIOB,LCD_RST_Pin,GPIO_PIN_SET);
//		HAL_Delay(50);
	//lcd_read();
		lcd_read_id();
 8000b60:	f001 fb9e 	bl	80022a0 <lcd_read_id>

//************* nt35510 init**********//
    lcd_wr_reg(0xf000);
 8000b64:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 8000b68:	f7ff ff4e 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x55);
 8000b6c:	2055      	movs	r0, #85	@ 0x55
 8000b6e:	f7ff ff5b 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xf001);
 8000b72:	f24f 0001 	movw	r0, #61441	@ 0xf001
 8000b76:	f7ff ff47 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xaa);
 8000b7a:	20aa      	movs	r0, #170	@ 0xaa
 8000b7c:	f7ff ff54 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xf002);
 8000b80:	f24f 0002 	movw	r0, #61442	@ 0xf002
 8000b84:	f7ff ff40 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x52);
 8000b88:	2052      	movs	r0, #82	@ 0x52
 8000b8a:	f7ff ff4d 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xf003);
 8000b8e:	f24f 0003 	movw	r0, #61443	@ 0xf003
 8000b92:	f7ff ff39 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x08);
 8000b96:	2008      	movs	r0, #8
 8000b98:	f7ff ff46 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xf004);
 8000b9c:	f24f 0004 	movw	r0, #61444	@ 0xf004
 8000ba0:	f7ff ff32 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x01);
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	f7ff ff3f 	bl	8000a28 <lcd_wr_data>
    //# avdd: manual); lcd_wr_data(
    lcd_wr_reg(0xb600);
 8000baa:	f44f 4036 	mov.w	r0, #46592	@ 0xb600
 8000bae:	f7ff ff2b 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x34);
 8000bb2:	2034      	movs	r0, #52	@ 0x34
 8000bb4:	f7ff ff38 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xb601);
 8000bb8:	f24b 6001 	movw	r0, #46593	@ 0xb601
 8000bbc:	f7ff ff24 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x34);
 8000bc0:	2034      	movs	r0, #52	@ 0x34
 8000bc2:	f7ff ff31 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xb602);
 8000bc6:	f24b 6002 	movw	r0, #46594	@ 0xb602
 8000bca:	f7ff ff1d 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x34);
 8000bce:	2034      	movs	r0, #52	@ 0x34
 8000bd0:	f7ff ff2a 	bl	8000a28 <lcd_wr_data>

    lcd_wr_reg(0xb000);
 8000bd4:	f44f 4030 	mov.w	r0, #45056	@ 0xb000
 8000bd8:	f7ff ff16 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x0d);//09
 8000bdc:	200d      	movs	r0, #13
 8000bde:	f7ff ff23 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xb001);
 8000be2:	f24b 0001 	movw	r0, #45057	@ 0xb001
 8000be6:	f7ff ff0f 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x0d);
 8000bea:	200d      	movs	r0, #13
 8000bec:	f7ff ff1c 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xb002);
 8000bf0:	f24b 0002 	movw	r0, #45058	@ 0xb002
 8000bf4:	f7ff ff08 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x0d);
 8000bf8:	200d      	movs	r0, #13
 8000bfa:	f7ff ff15 	bl	8000a28 <lcd_wr_data>
    //# avee: manual); lcd_wr_data( -6v
    lcd_wr_reg(0xb700);
 8000bfe:	f44f 4037 	mov.w	r0, #46848	@ 0xb700
 8000c02:	f7ff ff01 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x24);
 8000c06:	2024      	movs	r0, #36	@ 0x24
 8000c08:	f7ff ff0e 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xb701);
 8000c0c:	f24b 7001 	movw	r0, #46849	@ 0xb701
 8000c10:	f7ff fefa 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x24);
 8000c14:	2024      	movs	r0, #36	@ 0x24
 8000c16:	f7ff ff07 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xb702);
 8000c1a:	f24b 7002 	movw	r0, #46850	@ 0xb702
 8000c1e:	f7ff fef3 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x24);
 8000c22:	2024      	movs	r0, #36	@ 0x24
 8000c24:	f7ff ff00 	bl	8000a28 <lcd_wr_data>

    lcd_wr_reg(0xb100);
 8000c28:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 8000c2c:	f7ff feec 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x0d);
 8000c30:	200d      	movs	r0, #13
 8000c32:	f7ff fef9 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xb101);
 8000c36:	f24b 1001 	movw	r0, #45313	@ 0xb101
 8000c3a:	f7ff fee5 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x0d);
 8000c3e:	200d      	movs	r0, #13
 8000c40:	f7ff fef2 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xb102);
 8000c44:	f24b 1002 	movw	r0, #45314	@ 0xb102
 8000c48:	f7ff fede 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x0d);
 8000c4c:	200d      	movs	r0, #13
 8000c4e:	f7ff feeb 	bl	8000a28 <lcd_wr_data>
    //#power control for
    //vcl
    lcd_wr_reg(0xb800);
 8000c52:	f44f 4038 	mov.w	r0, #47104	@ 0xb800
 8000c56:	f7ff fed7 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x24);
 8000c5a:	2024      	movs	r0, #36	@ 0x24
 8000c5c:	f7ff fee4 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xb801);
 8000c60:	f64b 0001 	movw	r0, #47105	@ 0xb801
 8000c64:	f7ff fed0 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x24);
 8000c68:	2024      	movs	r0, #36	@ 0x24
 8000c6a:	f7ff fedd 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xb802);
 8000c6e:	f64b 0002 	movw	r0, #47106	@ 0xb802
 8000c72:	f7ff fec9 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x24);
 8000c76:	2024      	movs	r0, #36	@ 0x24
 8000c78:	f7ff fed6 	bl	8000a28 <lcd_wr_data>

    lcd_wr_reg(0xb200);
 8000c7c:	f44f 4032 	mov.w	r0, #45568	@ 0xb200
 8000c80:	f7ff fec2 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8000c84:	2000      	movs	r0, #0
 8000c86:	f7ff fecf 	bl	8000a28 <lcd_wr_data>

    //# vgh: clamp enable); lcd_wr_data(
    lcd_wr_reg(0xb900);
 8000c8a:	f44f 4039 	mov.w	r0, #47360	@ 0xb900
 8000c8e:	f7ff febb 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x24);
 8000c92:	2024      	movs	r0, #36	@ 0x24
 8000c94:	f7ff fec8 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xb901);
 8000c98:	f64b 1001 	movw	r0, #47361	@ 0xb901
 8000c9c:	f7ff feb4 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x24);
 8000ca0:	2024      	movs	r0, #36	@ 0x24
 8000ca2:	f7ff fec1 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xb902);
 8000ca6:	f64b 1002 	movw	r0, #47362	@ 0xb902
 8000caa:	f7ff fead 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x24);
 8000cae:	2024      	movs	r0, #36	@ 0x24
 8000cb0:	f7ff feba 	bl	8000a28 <lcd_wr_data>

    lcd_wr_reg(0xb300);
 8000cb4:	f44f 4033 	mov.w	r0, #45824	@ 0xb300
 8000cb8:	f7ff fea6 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x05);
 8000cbc:	2005      	movs	r0, #5
 8000cbe:	f7ff feb3 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xb301);
 8000cc2:	f24b 3001 	movw	r0, #45825	@ 0xb301
 8000cc6:	f7ff fe9f 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x05);
 8000cca:	2005      	movs	r0, #5
 8000ccc:	f7ff feac 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xb302);
 8000cd0:	f24b 3002 	movw	r0, #45826	@ 0xb302
 8000cd4:	f7ff fe98 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x05);
 8000cd8:	2005      	movs	r0, #5
 8000cda:	f7ff fea5 	bl	8000a28 <lcd_wr_data>

    ///lcd_wr_reg(0xbf00); lcd_wr_data(0x01);

    //# vgl(lvgl):
    lcd_wr_reg(0xba00);
 8000cde:	f44f 403a 	mov.w	r0, #47616	@ 0xba00
 8000ce2:	f7ff fe91 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x34);
 8000ce6:	2034      	movs	r0, #52	@ 0x34
 8000ce8:	f7ff fe9e 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xba01);
 8000cec:	f64b 2001 	movw	r0, #47617	@ 0xba01
 8000cf0:	f7ff fe8a 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x34);
 8000cf4:	2034      	movs	r0, #52	@ 0x34
 8000cf6:	f7ff fe97 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xba02);
 8000cfa:	f64b 2002 	movw	r0, #47618	@ 0xba02
 8000cfe:	f7ff fe83 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x34);
 8000d02:	2034      	movs	r0, #52	@ 0x34
 8000d04:	f7ff fe90 	bl	8000a28 <lcd_wr_data>
    //# vgl_reg(vglo)
    lcd_wr_reg(0xb500);
 8000d08:	f44f 4035 	mov.w	r0, #46336	@ 0xb500
 8000d0c:	f7ff fe7c 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x0b);
 8000d10:	200b      	movs	r0, #11
 8000d12:	f7ff fe89 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xb501);
 8000d16:	f24b 5001 	movw	r0, #46337	@ 0xb501
 8000d1a:	f7ff fe75 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x0b);
 8000d1e:	200b      	movs	r0, #11
 8000d20:	f7ff fe82 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xb502);
 8000d24:	f24b 5002 	movw	r0, #46338	@ 0xb502
 8000d28:	f7ff fe6e 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x0b);
 8000d2c:	200b      	movs	r0, #11
 8000d2e:	f7ff fe7b 	bl	8000a28 <lcd_wr_data>
    //# vgmp/vgsp:
    lcd_wr_reg(0xbc00);
 8000d32:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
 8000d36:	f7ff fe67 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f7ff fe74 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xbc01);
 8000d40:	f64b 4001 	movw	r0, #48129	@ 0xbc01
 8000d44:	f7ff fe60 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xa3);
 8000d48:	20a3      	movs	r0, #163	@ 0xa3
 8000d4a:	f7ff fe6d 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xbc02);
 8000d4e:	f64b 4002 	movw	r0, #48130	@ 0xbc02
 8000d52:	f7ff fe59 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8000d56:	2000      	movs	r0, #0
 8000d58:	f7ff fe66 	bl	8000a28 <lcd_wr_data>
    //# vgmn/vgsn
    lcd_wr_reg(0xbd00);
 8000d5c:	f44f 403d 	mov.w	r0, #48384	@ 0xbd00
 8000d60:	f7ff fe52 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8000d64:	2000      	movs	r0, #0
 8000d66:	f7ff fe5f 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xbd01);
 8000d6a:	f64b 5001 	movw	r0, #48385	@ 0xbd01
 8000d6e:	f7ff fe4b 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xa3);
 8000d72:	20a3      	movs	r0, #163	@ 0xa3
 8000d74:	f7ff fe58 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xbd02);
 8000d78:	f64b 5002 	movw	r0, #48386	@ 0xbd02
 8000d7c:	f7ff fe44 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8000d80:	2000      	movs	r0, #0
 8000d82:	f7ff fe51 	bl	8000a28 <lcd_wr_data>
    //# vcom=-0.1
    lcd_wr_reg(0xbe00);
 8000d86:	f44f 403e 	mov.w	r0, #48640	@ 0xbe00
 8000d8a:	f7ff fe3d 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f7ff fe4a 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xbe01);
 8000d94:	f64b 6001 	movw	r0, #48641	@ 0xbe01
 8000d98:	f7ff fe36 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x63);//4f
 8000d9c:	2063      	movs	r0, #99	@ 0x63
 8000d9e:	f7ff fe43 	bl	8000a28 <lcd_wr_data>
    //  vcomh+0x01;
    //#r+
    lcd_wr_reg(0xd100);
 8000da2:	f44f 4051 	mov.w	r0, #53504	@ 0xd100
 8000da6:	f7ff fe2f 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8000daa:	2000      	movs	r0, #0
 8000dac:	f7ff fe3c 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd101);
 8000db0:	f24d 1001 	movw	r0, #53505	@ 0xd101
 8000db4:	f7ff fe28 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x37);
 8000db8:	2037      	movs	r0, #55	@ 0x37
 8000dba:	f7ff fe35 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd102);
 8000dbe:	f24d 1002 	movw	r0, #53506	@ 0xd102
 8000dc2:	f7ff fe21 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f7ff fe2e 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd103);
 8000dcc:	f24d 1003 	movw	r0, #53507	@ 0xd103
 8000dd0:	f7ff fe1a 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x52);
 8000dd4:	2052      	movs	r0, #82	@ 0x52
 8000dd6:	f7ff fe27 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd104);
 8000dda:	f24d 1004 	movw	r0, #53508	@ 0xd104
 8000dde:	f7ff fe13 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8000de2:	2000      	movs	r0, #0
 8000de4:	f7ff fe20 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd105);
 8000de8:	f24d 1005 	movw	r0, #53509	@ 0xd105
 8000dec:	f7ff fe0c 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x7b);
 8000df0:	207b      	movs	r0, #123	@ 0x7b
 8000df2:	f7ff fe19 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd106);
 8000df6:	f24d 1006 	movw	r0, #53510	@ 0xd106
 8000dfa:	f7ff fe05 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f7ff fe12 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd107);
 8000e04:	f24d 1007 	movw	r0, #53511	@ 0xd107
 8000e08:	f7ff fdfe 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x99);
 8000e0c:	2099      	movs	r0, #153	@ 0x99
 8000e0e:	f7ff fe0b 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd108);
 8000e12:	f24d 1008 	movw	r0, #53512	@ 0xd108
 8000e16:	f7ff fdf7 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f7ff fe04 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd109);
 8000e20:	f24d 1009 	movw	r0, #53513	@ 0xd109
 8000e24:	f7ff fdf0 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xb1);
 8000e28:	20b1      	movs	r0, #177	@ 0xb1
 8000e2a:	f7ff fdfd 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd10a);
 8000e2e:	f24d 100a 	movw	r0, #53514	@ 0xd10a
 8000e32:	f7ff fde9 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8000e36:	2000      	movs	r0, #0
 8000e38:	f7ff fdf6 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd10b);
 8000e3c:	f24d 100b 	movw	r0, #53515	@ 0xd10b
 8000e40:	f7ff fde2 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xd2);
 8000e44:	20d2      	movs	r0, #210	@ 0xd2
 8000e46:	f7ff fdef 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd10c);
 8000e4a:	f24d 100c 	movw	r0, #53516	@ 0xd10c
 8000e4e:	f7ff fddb 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8000e52:	2000      	movs	r0, #0
 8000e54:	f7ff fde8 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd10d);
 8000e58:	f24d 100d 	movw	r0, #53517	@ 0xd10d
 8000e5c:	f7ff fdd4 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xf6);
 8000e60:	20f6      	movs	r0, #246	@ 0xf6
 8000e62:	f7ff fde1 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd10e);
 8000e66:	f24d 100e 	movw	r0, #53518	@ 0xd10e
 8000e6a:	f7ff fdcd 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x01);
 8000e6e:	2001      	movs	r0, #1
 8000e70:	f7ff fdda 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd10f);
 8000e74:	f24d 100f 	movw	r0, #53519	@ 0xd10f
 8000e78:	f7ff fdc6 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x27);
 8000e7c:	2027      	movs	r0, #39	@ 0x27
 8000e7e:	f7ff fdd3 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd110);
 8000e82:	f24d 1010 	movw	r0, #53520	@ 0xd110
 8000e86:	f7ff fdbf 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x01);
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f7ff fdcc 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd111);
 8000e90:	f24d 1011 	movw	r0, #53521	@ 0xd111
 8000e94:	f7ff fdb8 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x4e);
 8000e98:	204e      	movs	r0, #78	@ 0x4e
 8000e9a:	f7ff fdc5 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd112);
 8000e9e:	f24d 1012 	movw	r0, #53522	@ 0xd112
 8000ea2:	f7ff fdb1 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x01);
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	f7ff fdbe 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd113);
 8000eac:	f24d 1013 	movw	r0, #53523	@ 0xd113
 8000eb0:	f7ff fdaa 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x8c);
 8000eb4:	208c      	movs	r0, #140	@ 0x8c
 8000eb6:	f7ff fdb7 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd114);
 8000eba:	f24d 1014 	movw	r0, #53524	@ 0xd114
 8000ebe:	f7ff fda3 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x01);
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	f7ff fdb0 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd115);
 8000ec8:	f24d 1015 	movw	r0, #53525	@ 0xd115
 8000ecc:	f7ff fd9c 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xbe);
 8000ed0:	20be      	movs	r0, #190	@ 0xbe
 8000ed2:	f7ff fda9 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd116);
 8000ed6:	f24d 1016 	movw	r0, #53526	@ 0xd116
 8000eda:	f7ff fd95 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8000ede:	2002      	movs	r0, #2
 8000ee0:	f7ff fda2 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd117);
 8000ee4:	f24d 1017 	movw	r0, #53527	@ 0xd117
 8000ee8:	f7ff fd8e 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x0b);
 8000eec:	200b      	movs	r0, #11
 8000eee:	f7ff fd9b 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd118);
 8000ef2:	f24d 1018 	movw	r0, #53528	@ 0xd118
 8000ef6:	f7ff fd87 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8000efa:	2002      	movs	r0, #2
 8000efc:	f7ff fd94 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd119);
 8000f00:	f24d 1019 	movw	r0, #53529	@ 0xd119
 8000f04:	f7ff fd80 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x48);
 8000f08:	2048      	movs	r0, #72	@ 0x48
 8000f0a:	f7ff fd8d 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd11a);
 8000f0e:	f24d 101a 	movw	r0, #53530	@ 0xd11a
 8000f12:	f7ff fd79 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8000f16:	2002      	movs	r0, #2
 8000f18:	f7ff fd86 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd11b);
 8000f1c:	f24d 101b 	movw	r0, #53531	@ 0xd11b
 8000f20:	f7ff fd72 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x4a);
 8000f24:	204a      	movs	r0, #74	@ 0x4a
 8000f26:	f7ff fd7f 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd11c);
 8000f2a:	f24d 101c 	movw	r0, #53532	@ 0xd11c
 8000f2e:	f7ff fd6b 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8000f32:	2002      	movs	r0, #2
 8000f34:	f7ff fd78 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd11d);
 8000f38:	f24d 101d 	movw	r0, #53533	@ 0xd11d
 8000f3c:	f7ff fd64 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x7e);
 8000f40:	207e      	movs	r0, #126	@ 0x7e
 8000f42:	f7ff fd71 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd11e);
 8000f46:	f24d 101e 	movw	r0, #53534	@ 0xd11e
 8000f4a:	f7ff fd5d 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8000f4e:	2002      	movs	r0, #2
 8000f50:	f7ff fd6a 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd11f);
 8000f54:	f24d 101f 	movw	r0, #53535	@ 0xd11f
 8000f58:	f7ff fd56 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xbc);
 8000f5c:	20bc      	movs	r0, #188	@ 0xbc
 8000f5e:	f7ff fd63 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd120);
 8000f62:	f24d 1020 	movw	r0, #53536	@ 0xd120
 8000f66:	f7ff fd4f 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8000f6a:	2002      	movs	r0, #2
 8000f6c:	f7ff fd5c 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd121);
 8000f70:	f24d 1021 	movw	r0, #53537	@ 0xd121
 8000f74:	f7ff fd48 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xe1);
 8000f78:	20e1      	movs	r0, #225	@ 0xe1
 8000f7a:	f7ff fd55 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd122);
 8000f7e:	f24d 1022 	movw	r0, #53538	@ 0xd122
 8000f82:	f7ff fd41 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8000f86:	2003      	movs	r0, #3
 8000f88:	f7ff fd4e 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd123);
 8000f8c:	f24d 1023 	movw	r0, #53539	@ 0xd123
 8000f90:	f7ff fd3a 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x10);
 8000f94:	2010      	movs	r0, #16
 8000f96:	f7ff fd47 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd124);
 8000f9a:	f24d 1024 	movw	r0, #53540	@ 0xd124
 8000f9e:	f7ff fd33 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8000fa2:	2003      	movs	r0, #3
 8000fa4:	f7ff fd40 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd125);
 8000fa8:	f24d 1025 	movw	r0, #53541	@ 0xd125
 8000fac:	f7ff fd2c 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x31);
 8000fb0:	2031      	movs	r0, #49	@ 0x31
 8000fb2:	f7ff fd39 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd126);
 8000fb6:	f24d 1026 	movw	r0, #53542	@ 0xd126
 8000fba:	f7ff fd25 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8000fbe:	2003      	movs	r0, #3
 8000fc0:	f7ff fd32 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd127);
 8000fc4:	f24d 1027 	movw	r0, #53543	@ 0xd127
 8000fc8:	f7ff fd1e 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x5a);
 8000fcc:	205a      	movs	r0, #90	@ 0x5a
 8000fce:	f7ff fd2b 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd128);
 8000fd2:	f24d 1028 	movw	r0, #53544	@ 0xd128
 8000fd6:	f7ff fd17 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8000fda:	2003      	movs	r0, #3
 8000fdc:	f7ff fd24 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd129);
 8000fe0:	f24d 1029 	movw	r0, #53545	@ 0xd129
 8000fe4:	f7ff fd10 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x73);
 8000fe8:	2073      	movs	r0, #115	@ 0x73
 8000fea:	f7ff fd1d 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd12a);
 8000fee:	f24d 102a 	movw	r0, #53546	@ 0xd12a
 8000ff2:	f7ff fd09 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8000ff6:	2003      	movs	r0, #3
 8000ff8:	f7ff fd16 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd12b);
 8000ffc:	f24d 102b 	movw	r0, #53547	@ 0xd12b
 8001000:	f7ff fd02 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x94);
 8001004:	2094      	movs	r0, #148	@ 0x94
 8001006:	f7ff fd0f 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd12c);
 800100a:	f24d 102c 	movw	r0, #53548	@ 0xd12c
 800100e:	f7ff fcfb 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001012:	2003      	movs	r0, #3
 8001014:	f7ff fd08 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd12d);
 8001018:	f24d 102d 	movw	r0, #53549	@ 0xd12d
 800101c:	f7ff fcf4 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x9f);
 8001020:	209f      	movs	r0, #159	@ 0x9f
 8001022:	f7ff fd01 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd12e);
 8001026:	f24d 102e 	movw	r0, #53550	@ 0xd12e
 800102a:	f7ff fced 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 800102e:	2003      	movs	r0, #3
 8001030:	f7ff fcfa 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd12f);
 8001034:	f24d 102f 	movw	r0, #53551	@ 0xd12f
 8001038:	f7ff fce6 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xb3);
 800103c:	20b3      	movs	r0, #179	@ 0xb3
 800103e:	f7ff fcf3 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd130);
 8001042:	f24d 1030 	movw	r0, #53552	@ 0xd130
 8001046:	f7ff fcdf 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 800104a:	2003      	movs	r0, #3
 800104c:	f7ff fcec 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd131);
 8001050:	f24d 1031 	movw	r0, #53553	@ 0xd131
 8001054:	f7ff fcd8 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xb9);
 8001058:	20b9      	movs	r0, #185	@ 0xb9
 800105a:	f7ff fce5 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd132);
 800105e:	f24d 1032 	movw	r0, #53554	@ 0xd132
 8001062:	f7ff fcd1 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001066:	2003      	movs	r0, #3
 8001068:	f7ff fcde 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd133);
 800106c:	f24d 1033 	movw	r0, #53555	@ 0xd133
 8001070:	f7ff fcca 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xc1);
 8001074:	20c1      	movs	r0, #193	@ 0xc1
 8001076:	f7ff fcd7 	bl	8000a28 <lcd_wr_data>
    //#g+
    lcd_wr_reg(0xd200);
 800107a:	f44f 4052 	mov.w	r0, #53760	@ 0xd200
 800107e:	f7ff fcc3 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001082:	2000      	movs	r0, #0
 8001084:	f7ff fcd0 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd201);
 8001088:	f24d 2001 	movw	r0, #53761	@ 0xd201
 800108c:	f7ff fcbc 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x37);
 8001090:	2037      	movs	r0, #55	@ 0x37
 8001092:	f7ff fcc9 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd202);
 8001096:	f24d 2002 	movw	r0, #53762	@ 0xd202
 800109a:	f7ff fcb5 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 800109e:	2000      	movs	r0, #0
 80010a0:	f7ff fcc2 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd203);
 80010a4:	f24d 2003 	movw	r0, #53763	@ 0xd203
 80010a8:	f7ff fcae 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x52);
 80010ac:	2052      	movs	r0, #82	@ 0x52
 80010ae:	f7ff fcbb 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd204);
 80010b2:	f24d 2004 	movw	r0, #53764	@ 0xd204
 80010b6:	f7ff fca7 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 80010ba:	2000      	movs	r0, #0
 80010bc:	f7ff fcb4 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd205);
 80010c0:	f24d 2005 	movw	r0, #53765	@ 0xd205
 80010c4:	f7ff fca0 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x7b);
 80010c8:	207b      	movs	r0, #123	@ 0x7b
 80010ca:	f7ff fcad 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd206);
 80010ce:	f24d 2006 	movw	r0, #53766	@ 0xd206
 80010d2:	f7ff fc99 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 80010d6:	2000      	movs	r0, #0
 80010d8:	f7ff fca6 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd207);
 80010dc:	f24d 2007 	movw	r0, #53767	@ 0xd207
 80010e0:	f7ff fc92 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x99);
 80010e4:	2099      	movs	r0, #153	@ 0x99
 80010e6:	f7ff fc9f 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd208);
 80010ea:	f24d 2008 	movw	r0, #53768	@ 0xd208
 80010ee:	f7ff fc8b 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 80010f2:	2000      	movs	r0, #0
 80010f4:	f7ff fc98 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd209);
 80010f8:	f24d 2009 	movw	r0, #53769	@ 0xd209
 80010fc:	f7ff fc84 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xb1);
 8001100:	20b1      	movs	r0, #177	@ 0xb1
 8001102:	f7ff fc91 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd20a);
 8001106:	f24d 200a 	movw	r0, #53770	@ 0xd20a
 800110a:	f7ff fc7d 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 800110e:	2000      	movs	r0, #0
 8001110:	f7ff fc8a 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd20b);
 8001114:	f24d 200b 	movw	r0, #53771	@ 0xd20b
 8001118:	f7ff fc76 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xd2);
 800111c:	20d2      	movs	r0, #210	@ 0xd2
 800111e:	f7ff fc83 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd20c);
 8001122:	f24d 200c 	movw	r0, #53772	@ 0xd20c
 8001126:	f7ff fc6f 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 800112a:	2000      	movs	r0, #0
 800112c:	f7ff fc7c 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd20d);
 8001130:	f24d 200d 	movw	r0, #53773	@ 0xd20d
 8001134:	f7ff fc68 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xf6);
 8001138:	20f6      	movs	r0, #246	@ 0xf6
 800113a:	f7ff fc75 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd20e);
 800113e:	f24d 200e 	movw	r0, #53774	@ 0xd20e
 8001142:	f7ff fc61 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x01);
 8001146:	2001      	movs	r0, #1
 8001148:	f7ff fc6e 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd20f);
 800114c:	f24d 200f 	movw	r0, #53775	@ 0xd20f
 8001150:	f7ff fc5a 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x27);
 8001154:	2027      	movs	r0, #39	@ 0x27
 8001156:	f7ff fc67 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd210);
 800115a:	f24d 2010 	movw	r0, #53776	@ 0xd210
 800115e:	f7ff fc53 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x01);
 8001162:	2001      	movs	r0, #1
 8001164:	f7ff fc60 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd211);
 8001168:	f24d 2011 	movw	r0, #53777	@ 0xd211
 800116c:	f7ff fc4c 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x4e);
 8001170:	204e      	movs	r0, #78	@ 0x4e
 8001172:	f7ff fc59 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd212);
 8001176:	f24d 2012 	movw	r0, #53778	@ 0xd212
 800117a:	f7ff fc45 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x01);
 800117e:	2001      	movs	r0, #1
 8001180:	f7ff fc52 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd213);
 8001184:	f24d 2013 	movw	r0, #53779	@ 0xd213
 8001188:	f7ff fc3e 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x8c);
 800118c:	208c      	movs	r0, #140	@ 0x8c
 800118e:	f7ff fc4b 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd214);
 8001192:	f24d 2014 	movw	r0, #53780	@ 0xd214
 8001196:	f7ff fc37 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x01);
 800119a:	2001      	movs	r0, #1
 800119c:	f7ff fc44 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd215);
 80011a0:	f24d 2015 	movw	r0, #53781	@ 0xd215
 80011a4:	f7ff fc30 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xbe);
 80011a8:	20be      	movs	r0, #190	@ 0xbe
 80011aa:	f7ff fc3d 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd216);
 80011ae:	f24d 2016 	movw	r0, #53782	@ 0xd216
 80011b2:	f7ff fc29 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x02);
 80011b6:	2002      	movs	r0, #2
 80011b8:	f7ff fc36 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd217);
 80011bc:	f24d 2017 	movw	r0, #53783	@ 0xd217
 80011c0:	f7ff fc22 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x0b);
 80011c4:	200b      	movs	r0, #11
 80011c6:	f7ff fc2f 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd218);
 80011ca:	f24d 2018 	movw	r0, #53784	@ 0xd218
 80011ce:	f7ff fc1b 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x02);
 80011d2:	2002      	movs	r0, #2
 80011d4:	f7ff fc28 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd219);
 80011d8:	f24d 2019 	movw	r0, #53785	@ 0xd219
 80011dc:	f7ff fc14 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x48);
 80011e0:	2048      	movs	r0, #72	@ 0x48
 80011e2:	f7ff fc21 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd21a);
 80011e6:	f24d 201a 	movw	r0, #53786	@ 0xd21a
 80011ea:	f7ff fc0d 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x02);
 80011ee:	2002      	movs	r0, #2
 80011f0:	f7ff fc1a 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd21b);
 80011f4:	f24d 201b 	movw	r0, #53787	@ 0xd21b
 80011f8:	f7ff fc06 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x4a);
 80011fc:	204a      	movs	r0, #74	@ 0x4a
 80011fe:	f7ff fc13 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd21c);
 8001202:	f24d 201c 	movw	r0, #53788	@ 0xd21c
 8001206:	f7ff fbff 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x02);
 800120a:	2002      	movs	r0, #2
 800120c:	f7ff fc0c 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd21d);
 8001210:	f24d 201d 	movw	r0, #53789	@ 0xd21d
 8001214:	f7ff fbf8 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x7e);
 8001218:	207e      	movs	r0, #126	@ 0x7e
 800121a:	f7ff fc05 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd21e);
 800121e:	f24d 201e 	movw	r0, #53790	@ 0xd21e
 8001222:	f7ff fbf1 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8001226:	2002      	movs	r0, #2
 8001228:	f7ff fbfe 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd21f);
 800122c:	f24d 201f 	movw	r0, #53791	@ 0xd21f
 8001230:	f7ff fbea 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xbc);
 8001234:	20bc      	movs	r0, #188	@ 0xbc
 8001236:	f7ff fbf7 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd220);
 800123a:	f24d 2020 	movw	r0, #53792	@ 0xd220
 800123e:	f7ff fbe3 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8001242:	2002      	movs	r0, #2
 8001244:	f7ff fbf0 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd221);
 8001248:	f24d 2021 	movw	r0, #53793	@ 0xd221
 800124c:	f7ff fbdc 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xe1);
 8001250:	20e1      	movs	r0, #225	@ 0xe1
 8001252:	f7ff fbe9 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd222);
 8001256:	f24d 2022 	movw	r0, #53794	@ 0xd222
 800125a:	f7ff fbd5 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 800125e:	2003      	movs	r0, #3
 8001260:	f7ff fbe2 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd223);
 8001264:	f24d 2023 	movw	r0, #53795	@ 0xd223
 8001268:	f7ff fbce 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x10);
 800126c:	2010      	movs	r0, #16
 800126e:	f7ff fbdb 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd224);
 8001272:	f24d 2024 	movw	r0, #53796	@ 0xd224
 8001276:	f7ff fbc7 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 800127a:	2003      	movs	r0, #3
 800127c:	f7ff fbd4 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd225);
 8001280:	f24d 2025 	movw	r0, #53797	@ 0xd225
 8001284:	f7ff fbc0 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x31);
 8001288:	2031      	movs	r0, #49	@ 0x31
 800128a:	f7ff fbcd 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd226);
 800128e:	f24d 2026 	movw	r0, #53798	@ 0xd226
 8001292:	f7ff fbb9 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001296:	2003      	movs	r0, #3
 8001298:	f7ff fbc6 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd227);
 800129c:	f24d 2027 	movw	r0, #53799	@ 0xd227
 80012a0:	f7ff fbb2 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x5a);
 80012a4:	205a      	movs	r0, #90	@ 0x5a
 80012a6:	f7ff fbbf 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd228);
 80012aa:	f24d 2028 	movw	r0, #53800	@ 0xd228
 80012ae:	f7ff fbab 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 80012b2:	2003      	movs	r0, #3
 80012b4:	f7ff fbb8 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd229);
 80012b8:	f24d 2029 	movw	r0, #53801	@ 0xd229
 80012bc:	f7ff fba4 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x73);
 80012c0:	2073      	movs	r0, #115	@ 0x73
 80012c2:	f7ff fbb1 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd22a);
 80012c6:	f24d 202a 	movw	r0, #53802	@ 0xd22a
 80012ca:	f7ff fb9d 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 80012ce:	2003      	movs	r0, #3
 80012d0:	f7ff fbaa 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd22b);
 80012d4:	f24d 202b 	movw	r0, #53803	@ 0xd22b
 80012d8:	f7ff fb96 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x94);
 80012dc:	2094      	movs	r0, #148	@ 0x94
 80012de:	f7ff fba3 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd22c);
 80012e2:	f24d 202c 	movw	r0, #53804	@ 0xd22c
 80012e6:	f7ff fb8f 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 80012ea:	2003      	movs	r0, #3
 80012ec:	f7ff fb9c 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd22d);
 80012f0:	f24d 202d 	movw	r0, #53805	@ 0xd22d
 80012f4:	f7ff fb88 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x9f);
 80012f8:	209f      	movs	r0, #159	@ 0x9f
 80012fa:	f7ff fb95 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd22e);
 80012fe:	f24d 202e 	movw	r0, #53806	@ 0xd22e
 8001302:	f7ff fb81 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001306:	2003      	movs	r0, #3
 8001308:	f7ff fb8e 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd22f);
 800130c:	f24d 202f 	movw	r0, #53807	@ 0xd22f
 8001310:	f7ff fb7a 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xb3);
 8001314:	20b3      	movs	r0, #179	@ 0xb3
 8001316:	f7ff fb87 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd230);
 800131a:	f24d 2030 	movw	r0, #53808	@ 0xd230
 800131e:	f7ff fb73 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001322:	2003      	movs	r0, #3
 8001324:	f7ff fb80 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd231);
 8001328:	f24d 2031 	movw	r0, #53809	@ 0xd231
 800132c:	f7ff fb6c 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xb9);
 8001330:	20b9      	movs	r0, #185	@ 0xb9
 8001332:	f7ff fb79 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd232);
 8001336:	f24d 2032 	movw	r0, #53810	@ 0xd232
 800133a:	f7ff fb65 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 800133e:	2003      	movs	r0, #3
 8001340:	f7ff fb72 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd233);
 8001344:	f24d 2033 	movw	r0, #53811	@ 0xd233
 8001348:	f7ff fb5e 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xc1);
 800134c:	20c1      	movs	r0, #193	@ 0xc1
 800134e:	f7ff fb6b 	bl	8000a28 <lcd_wr_data>
    //#b+
    lcd_wr_reg(0xd300);
 8001352:	f44f 4053 	mov.w	r0, #54016	@ 0xd300
 8001356:	f7ff fb57 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 800135a:	2000      	movs	r0, #0
 800135c:	f7ff fb64 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd301);
 8001360:	f24d 3001 	movw	r0, #54017	@ 0xd301
 8001364:	f7ff fb50 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x37);
 8001368:	2037      	movs	r0, #55	@ 0x37
 800136a:	f7ff fb5d 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd302);
 800136e:	f24d 3002 	movw	r0, #54018	@ 0xd302
 8001372:	f7ff fb49 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001376:	2000      	movs	r0, #0
 8001378:	f7ff fb56 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd303);
 800137c:	f24d 3003 	movw	r0, #54019	@ 0xd303
 8001380:	f7ff fb42 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x52);
 8001384:	2052      	movs	r0, #82	@ 0x52
 8001386:	f7ff fb4f 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd304);
 800138a:	f24d 3004 	movw	r0, #54020	@ 0xd304
 800138e:	f7ff fb3b 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001392:	2000      	movs	r0, #0
 8001394:	f7ff fb48 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd305);
 8001398:	f24d 3005 	movw	r0, #54021	@ 0xd305
 800139c:	f7ff fb34 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x7b);
 80013a0:	207b      	movs	r0, #123	@ 0x7b
 80013a2:	f7ff fb41 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd306);
 80013a6:	f24d 3006 	movw	r0, #54022	@ 0xd306
 80013aa:	f7ff fb2d 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 80013ae:	2000      	movs	r0, #0
 80013b0:	f7ff fb3a 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd307);
 80013b4:	f24d 3007 	movw	r0, #54023	@ 0xd307
 80013b8:	f7ff fb26 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x99);
 80013bc:	2099      	movs	r0, #153	@ 0x99
 80013be:	f7ff fb33 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd308);
 80013c2:	f24d 3008 	movw	r0, #54024	@ 0xd308
 80013c6:	f7ff fb1f 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 80013ca:	2000      	movs	r0, #0
 80013cc:	f7ff fb2c 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd309);
 80013d0:	f24d 3009 	movw	r0, #54025	@ 0xd309
 80013d4:	f7ff fb18 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xb1);
 80013d8:	20b1      	movs	r0, #177	@ 0xb1
 80013da:	f7ff fb25 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd30a);
 80013de:	f24d 300a 	movw	r0, #54026	@ 0xd30a
 80013e2:	f7ff fb11 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 80013e6:	2000      	movs	r0, #0
 80013e8:	f7ff fb1e 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd30b);
 80013ec:	f24d 300b 	movw	r0, #54027	@ 0xd30b
 80013f0:	f7ff fb0a 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xd2);
 80013f4:	20d2      	movs	r0, #210	@ 0xd2
 80013f6:	f7ff fb17 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd30c);
 80013fa:	f24d 300c 	movw	r0, #54028	@ 0xd30c
 80013fe:	f7ff fb03 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001402:	2000      	movs	r0, #0
 8001404:	f7ff fb10 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd30d);
 8001408:	f24d 300d 	movw	r0, #54029	@ 0xd30d
 800140c:	f7ff fafc 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xf6);
 8001410:	20f6      	movs	r0, #246	@ 0xf6
 8001412:	f7ff fb09 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd30e);
 8001416:	f24d 300e 	movw	r0, #54030	@ 0xd30e
 800141a:	f7ff faf5 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x01);
 800141e:	2001      	movs	r0, #1
 8001420:	f7ff fb02 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd30f);
 8001424:	f24d 300f 	movw	r0, #54031	@ 0xd30f
 8001428:	f7ff faee 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x27);
 800142c:	2027      	movs	r0, #39	@ 0x27
 800142e:	f7ff fafb 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd310);
 8001432:	f24d 3010 	movw	r0, #54032	@ 0xd310
 8001436:	f7ff fae7 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x01);
 800143a:	2001      	movs	r0, #1
 800143c:	f7ff faf4 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd311);
 8001440:	f24d 3011 	movw	r0, #54033	@ 0xd311
 8001444:	f7ff fae0 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x4e);
 8001448:	204e      	movs	r0, #78	@ 0x4e
 800144a:	f7ff faed 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd312);
 800144e:	f24d 3012 	movw	r0, #54034	@ 0xd312
 8001452:	f7ff fad9 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x01);
 8001456:	2001      	movs	r0, #1
 8001458:	f7ff fae6 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd313);
 800145c:	f24d 3013 	movw	r0, #54035	@ 0xd313
 8001460:	f7ff fad2 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x8c);
 8001464:	208c      	movs	r0, #140	@ 0x8c
 8001466:	f7ff fadf 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd314);
 800146a:	f24d 3014 	movw	r0, #54036	@ 0xd314
 800146e:	f7ff facb 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x01);
 8001472:	2001      	movs	r0, #1
 8001474:	f7ff fad8 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd315);
 8001478:	f24d 3015 	movw	r0, #54037	@ 0xd315
 800147c:	f7ff fac4 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xbe);
 8001480:	20be      	movs	r0, #190	@ 0xbe
 8001482:	f7ff fad1 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd316);
 8001486:	f24d 3016 	movw	r0, #54038	@ 0xd316
 800148a:	f7ff fabd 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x02);
 800148e:	2002      	movs	r0, #2
 8001490:	f7ff faca 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd317);
 8001494:	f24d 3017 	movw	r0, #54039	@ 0xd317
 8001498:	f7ff fab6 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x0b);
 800149c:	200b      	movs	r0, #11
 800149e:	f7ff fac3 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd318);
 80014a2:	f24d 3018 	movw	r0, #54040	@ 0xd318
 80014a6:	f7ff faaf 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x02);
 80014aa:	2002      	movs	r0, #2
 80014ac:	f7ff fabc 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd319);
 80014b0:	f24d 3019 	movw	r0, #54041	@ 0xd319
 80014b4:	f7ff faa8 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x48);
 80014b8:	2048      	movs	r0, #72	@ 0x48
 80014ba:	f7ff fab5 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd31a);
 80014be:	f24d 301a 	movw	r0, #54042	@ 0xd31a
 80014c2:	f7ff faa1 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x02);
 80014c6:	2002      	movs	r0, #2
 80014c8:	f7ff faae 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd31b);
 80014cc:	f24d 301b 	movw	r0, #54043	@ 0xd31b
 80014d0:	f7ff fa9a 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x4a);
 80014d4:	204a      	movs	r0, #74	@ 0x4a
 80014d6:	f7ff faa7 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd31c);
 80014da:	f24d 301c 	movw	r0, #54044	@ 0xd31c
 80014de:	f7ff fa93 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x02);
 80014e2:	2002      	movs	r0, #2
 80014e4:	f7ff faa0 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd31d);
 80014e8:	f24d 301d 	movw	r0, #54045	@ 0xd31d
 80014ec:	f7ff fa8c 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x7e);
 80014f0:	207e      	movs	r0, #126	@ 0x7e
 80014f2:	f7ff fa99 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd31e);
 80014f6:	f24d 301e 	movw	r0, #54046	@ 0xd31e
 80014fa:	f7ff fa85 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x02);
 80014fe:	2002      	movs	r0, #2
 8001500:	f7ff fa92 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd31f);
 8001504:	f24d 301f 	movw	r0, #54047	@ 0xd31f
 8001508:	f7ff fa7e 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xbc);
 800150c:	20bc      	movs	r0, #188	@ 0xbc
 800150e:	f7ff fa8b 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd320);
 8001512:	f24d 3020 	movw	r0, #54048	@ 0xd320
 8001516:	f7ff fa77 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x02);
 800151a:	2002      	movs	r0, #2
 800151c:	f7ff fa84 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd321);
 8001520:	f24d 3021 	movw	r0, #54049	@ 0xd321
 8001524:	f7ff fa70 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xe1);
 8001528:	20e1      	movs	r0, #225	@ 0xe1
 800152a:	f7ff fa7d 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd322);
 800152e:	f24d 3022 	movw	r0, #54050	@ 0xd322
 8001532:	f7ff fa69 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001536:	2003      	movs	r0, #3
 8001538:	f7ff fa76 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd323);
 800153c:	f24d 3023 	movw	r0, #54051	@ 0xd323
 8001540:	f7ff fa62 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x10);
 8001544:	2010      	movs	r0, #16
 8001546:	f7ff fa6f 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd324);
 800154a:	f24d 3024 	movw	r0, #54052	@ 0xd324
 800154e:	f7ff fa5b 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001552:	2003      	movs	r0, #3
 8001554:	f7ff fa68 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd325);
 8001558:	f24d 3025 	movw	r0, #54053	@ 0xd325
 800155c:	f7ff fa54 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x31);
 8001560:	2031      	movs	r0, #49	@ 0x31
 8001562:	f7ff fa61 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd326);
 8001566:	f24d 3026 	movw	r0, #54054	@ 0xd326
 800156a:	f7ff fa4d 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 800156e:	2003      	movs	r0, #3
 8001570:	f7ff fa5a 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd327);
 8001574:	f24d 3027 	movw	r0, #54055	@ 0xd327
 8001578:	f7ff fa46 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x5a);
 800157c:	205a      	movs	r0, #90	@ 0x5a
 800157e:	f7ff fa53 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd328);
 8001582:	f24d 3028 	movw	r0, #54056	@ 0xd328
 8001586:	f7ff fa3f 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 800158a:	2003      	movs	r0, #3
 800158c:	f7ff fa4c 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd329);
 8001590:	f24d 3029 	movw	r0, #54057	@ 0xd329
 8001594:	f7ff fa38 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x73);
 8001598:	2073      	movs	r0, #115	@ 0x73
 800159a:	f7ff fa45 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd32a);
 800159e:	f24d 302a 	movw	r0, #54058	@ 0xd32a
 80015a2:	f7ff fa31 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 80015a6:	2003      	movs	r0, #3
 80015a8:	f7ff fa3e 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd32b);
 80015ac:	f24d 302b 	movw	r0, #54059	@ 0xd32b
 80015b0:	f7ff fa2a 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x94);
 80015b4:	2094      	movs	r0, #148	@ 0x94
 80015b6:	f7ff fa37 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd32c);
 80015ba:	f24d 302c 	movw	r0, #54060	@ 0xd32c
 80015be:	f7ff fa23 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 80015c2:	2003      	movs	r0, #3
 80015c4:	f7ff fa30 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd32d);
 80015c8:	f24d 302d 	movw	r0, #54061	@ 0xd32d
 80015cc:	f7ff fa1c 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x9f);
 80015d0:	209f      	movs	r0, #159	@ 0x9f
 80015d2:	f7ff fa29 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd32e);
 80015d6:	f24d 302e 	movw	r0, #54062	@ 0xd32e
 80015da:	f7ff fa15 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 80015de:	2003      	movs	r0, #3
 80015e0:	f7ff fa22 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd32f);
 80015e4:	f24d 302f 	movw	r0, #54063	@ 0xd32f
 80015e8:	f7ff fa0e 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xb3);
 80015ec:	20b3      	movs	r0, #179	@ 0xb3
 80015ee:	f7ff fa1b 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd330);
 80015f2:	f24d 3030 	movw	r0, #54064	@ 0xd330
 80015f6:	f7ff fa07 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 80015fa:	2003      	movs	r0, #3
 80015fc:	f7ff fa14 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd331);
 8001600:	f24d 3031 	movw	r0, #54065	@ 0xd331
 8001604:	f7ff fa00 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xb9);
 8001608:	20b9      	movs	r0, #185	@ 0xb9
 800160a:	f7ff fa0d 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd332);
 800160e:	f24d 3032 	movw	r0, #54066	@ 0xd332
 8001612:	f7ff f9f9 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001616:	2003      	movs	r0, #3
 8001618:	f7ff fa06 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd333);
 800161c:	f24d 3033 	movw	r0, #54067	@ 0xd333
 8001620:	f7ff f9f2 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xc1);
 8001624:	20c1      	movs	r0, #193	@ 0xc1
 8001626:	f7ff f9ff 	bl	8000a28 <lcd_wr_data>

    //#r-///////////////////////////////////////////
    lcd_wr_reg(0xd400);
 800162a:	f44f 4054 	mov.w	r0, #54272	@ 0xd400
 800162e:	f7ff f9eb 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001632:	2000      	movs	r0, #0
 8001634:	f7ff f9f8 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd401);
 8001638:	f24d 4001 	movw	r0, #54273	@ 0xd401
 800163c:	f7ff f9e4 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x37);
 8001640:	2037      	movs	r0, #55	@ 0x37
 8001642:	f7ff f9f1 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd402);
 8001646:	f24d 4002 	movw	r0, #54274	@ 0xd402
 800164a:	f7ff f9dd 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 800164e:	2000      	movs	r0, #0
 8001650:	f7ff f9ea 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd403);
 8001654:	f24d 4003 	movw	r0, #54275	@ 0xd403
 8001658:	f7ff f9d6 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x52);
 800165c:	2052      	movs	r0, #82	@ 0x52
 800165e:	f7ff f9e3 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd404);
 8001662:	f24d 4004 	movw	r0, #54276	@ 0xd404
 8001666:	f7ff f9cf 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 800166a:	2000      	movs	r0, #0
 800166c:	f7ff f9dc 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd405);
 8001670:	f24d 4005 	movw	r0, #54277	@ 0xd405
 8001674:	f7ff f9c8 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x7b);
 8001678:	207b      	movs	r0, #123	@ 0x7b
 800167a:	f7ff f9d5 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd406);
 800167e:	f24d 4006 	movw	r0, #54278	@ 0xd406
 8001682:	f7ff f9c1 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001686:	2000      	movs	r0, #0
 8001688:	f7ff f9ce 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd407);
 800168c:	f24d 4007 	movw	r0, #54279	@ 0xd407
 8001690:	f7ff f9ba 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x99);
 8001694:	2099      	movs	r0, #153	@ 0x99
 8001696:	f7ff f9c7 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd408);
 800169a:	f24d 4008 	movw	r0, #54280	@ 0xd408
 800169e:	f7ff f9b3 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 80016a2:	2000      	movs	r0, #0
 80016a4:	f7ff f9c0 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd409);
 80016a8:	f24d 4009 	movw	r0, #54281	@ 0xd409
 80016ac:	f7ff f9ac 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xb1);
 80016b0:	20b1      	movs	r0, #177	@ 0xb1
 80016b2:	f7ff f9b9 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd40a);
 80016b6:	f24d 400a 	movw	r0, #54282	@ 0xd40a
 80016ba:	f7ff f9a5 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 80016be:	2000      	movs	r0, #0
 80016c0:	f7ff f9b2 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd40b);
 80016c4:	f24d 400b 	movw	r0, #54283	@ 0xd40b
 80016c8:	f7ff f99e 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xd2);
 80016cc:	20d2      	movs	r0, #210	@ 0xd2
 80016ce:	f7ff f9ab 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd40c);
 80016d2:	f24d 400c 	movw	r0, #54284	@ 0xd40c
 80016d6:	f7ff f997 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 80016da:	2000      	movs	r0, #0
 80016dc:	f7ff f9a4 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd40d);
 80016e0:	f24d 400d 	movw	r0, #54285	@ 0xd40d
 80016e4:	f7ff f990 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xf6);
 80016e8:	20f6      	movs	r0, #246	@ 0xf6
 80016ea:	f7ff f99d 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd40e);
 80016ee:	f24d 400e 	movw	r0, #54286	@ 0xd40e
 80016f2:	f7ff f989 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x01);
 80016f6:	2001      	movs	r0, #1
 80016f8:	f7ff f996 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd40f);
 80016fc:	f24d 400f 	movw	r0, #54287	@ 0xd40f
 8001700:	f7ff f982 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x27);
 8001704:	2027      	movs	r0, #39	@ 0x27
 8001706:	f7ff f98f 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd410);
 800170a:	f24d 4010 	movw	r0, #54288	@ 0xd410
 800170e:	f7ff f97b 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x01);
 8001712:	2001      	movs	r0, #1
 8001714:	f7ff f988 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd411);
 8001718:	f24d 4011 	movw	r0, #54289	@ 0xd411
 800171c:	f7ff f974 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x4e);
 8001720:	204e      	movs	r0, #78	@ 0x4e
 8001722:	f7ff f981 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd412);
 8001726:	f24d 4012 	movw	r0, #54290	@ 0xd412
 800172a:	f7ff f96d 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x01);
 800172e:	2001      	movs	r0, #1
 8001730:	f7ff f97a 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd413);
 8001734:	f24d 4013 	movw	r0, #54291	@ 0xd413
 8001738:	f7ff f966 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x8c);
 800173c:	208c      	movs	r0, #140	@ 0x8c
 800173e:	f7ff f973 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd414);
 8001742:	f24d 4014 	movw	r0, #54292	@ 0xd414
 8001746:	f7ff f95f 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x01);
 800174a:	2001      	movs	r0, #1
 800174c:	f7ff f96c 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd415);
 8001750:	f24d 4015 	movw	r0, #54293	@ 0xd415
 8001754:	f7ff f958 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xbe);
 8001758:	20be      	movs	r0, #190	@ 0xbe
 800175a:	f7ff f965 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd416);
 800175e:	f24d 4016 	movw	r0, #54294	@ 0xd416
 8001762:	f7ff f951 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8001766:	2002      	movs	r0, #2
 8001768:	f7ff f95e 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd417);
 800176c:	f24d 4017 	movw	r0, #54295	@ 0xd417
 8001770:	f7ff f94a 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x0b);
 8001774:	200b      	movs	r0, #11
 8001776:	f7ff f957 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd418);
 800177a:	f24d 4018 	movw	r0, #54296	@ 0xd418
 800177e:	f7ff f943 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8001782:	2002      	movs	r0, #2
 8001784:	f7ff f950 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd419);
 8001788:	f24d 4019 	movw	r0, #54297	@ 0xd419
 800178c:	f7ff f93c 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x48);
 8001790:	2048      	movs	r0, #72	@ 0x48
 8001792:	f7ff f949 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd41a);
 8001796:	f24d 401a 	movw	r0, #54298	@ 0xd41a
 800179a:	f7ff f935 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x02);
 800179e:	2002      	movs	r0, #2
 80017a0:	f7ff f942 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd41b);
 80017a4:	f24d 401b 	movw	r0, #54299	@ 0xd41b
 80017a8:	f7ff f92e 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x4a);
 80017ac:	204a      	movs	r0, #74	@ 0x4a
 80017ae:	f7ff f93b 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd41c);
 80017b2:	f24d 401c 	movw	r0, #54300	@ 0xd41c
 80017b6:	f7ff f927 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x02);
 80017ba:	2002      	movs	r0, #2
 80017bc:	f7ff f934 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd41d);
 80017c0:	f24d 401d 	movw	r0, #54301	@ 0xd41d
 80017c4:	f7ff f920 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x7e);
 80017c8:	207e      	movs	r0, #126	@ 0x7e
 80017ca:	f7ff f92d 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd41e);
 80017ce:	f24d 401e 	movw	r0, #54302	@ 0xd41e
 80017d2:	f7ff f919 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x02);
 80017d6:	2002      	movs	r0, #2
 80017d8:	f7ff f926 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd41f);
 80017dc:	f24d 401f 	movw	r0, #54303	@ 0xd41f
 80017e0:	f7ff f912 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xbc);
 80017e4:	20bc      	movs	r0, #188	@ 0xbc
 80017e6:	f7ff f91f 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd420);
 80017ea:	f24d 4020 	movw	r0, #54304	@ 0xd420
 80017ee:	f7ff f90b 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x02);
 80017f2:	2002      	movs	r0, #2
 80017f4:	f7ff f918 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd421);
 80017f8:	f24d 4021 	movw	r0, #54305	@ 0xd421
 80017fc:	f7ff f904 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xe1);
 8001800:	20e1      	movs	r0, #225	@ 0xe1
 8001802:	f7ff f911 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd422);
 8001806:	f24d 4022 	movw	r0, #54306	@ 0xd422
 800180a:	f7ff f8fd 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 800180e:	2003      	movs	r0, #3
 8001810:	f7ff f90a 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd423);
 8001814:	f24d 4023 	movw	r0, #54307	@ 0xd423
 8001818:	f7ff f8f6 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x10);
 800181c:	2010      	movs	r0, #16
 800181e:	f7ff f903 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd424);
 8001822:	f24d 4024 	movw	r0, #54308	@ 0xd424
 8001826:	f7ff f8ef 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 800182a:	2003      	movs	r0, #3
 800182c:	f7ff f8fc 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd425);
 8001830:	f24d 4025 	movw	r0, #54309	@ 0xd425
 8001834:	f7ff f8e8 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x31);
 8001838:	2031      	movs	r0, #49	@ 0x31
 800183a:	f7ff f8f5 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd426);
 800183e:	f24d 4026 	movw	r0, #54310	@ 0xd426
 8001842:	f7ff f8e1 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001846:	2003      	movs	r0, #3
 8001848:	f7ff f8ee 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd427);
 800184c:	f24d 4027 	movw	r0, #54311	@ 0xd427
 8001850:	f7ff f8da 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x5a);
 8001854:	205a      	movs	r0, #90	@ 0x5a
 8001856:	f7ff f8e7 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd428);
 800185a:	f24d 4028 	movw	r0, #54312	@ 0xd428
 800185e:	f7ff f8d3 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001862:	2003      	movs	r0, #3
 8001864:	f7ff f8e0 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd429);
 8001868:	f24d 4029 	movw	r0, #54313	@ 0xd429
 800186c:	f7ff f8cc 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x73);
 8001870:	2073      	movs	r0, #115	@ 0x73
 8001872:	f7ff f8d9 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd42a);
 8001876:	f24d 402a 	movw	r0, #54314	@ 0xd42a
 800187a:	f7ff f8c5 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 800187e:	2003      	movs	r0, #3
 8001880:	f7ff f8d2 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd42b);
 8001884:	f24d 402b 	movw	r0, #54315	@ 0xd42b
 8001888:	f7ff f8be 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x94);
 800188c:	2094      	movs	r0, #148	@ 0x94
 800188e:	f7ff f8cb 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd42c);
 8001892:	f24d 402c 	movw	r0, #54316	@ 0xd42c
 8001896:	f7ff f8b7 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 800189a:	2003      	movs	r0, #3
 800189c:	f7ff f8c4 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd42d);
 80018a0:	f24d 402d 	movw	r0, #54317	@ 0xd42d
 80018a4:	f7ff f8b0 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x9f);
 80018a8:	209f      	movs	r0, #159	@ 0x9f
 80018aa:	f7ff f8bd 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd42e);
 80018ae:	f24d 402e 	movw	r0, #54318	@ 0xd42e
 80018b2:	f7ff f8a9 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 80018b6:	2003      	movs	r0, #3
 80018b8:	f7ff f8b6 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd42f);
 80018bc:	f24d 402f 	movw	r0, #54319	@ 0xd42f
 80018c0:	f7ff f8a2 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xb3);
 80018c4:	20b3      	movs	r0, #179	@ 0xb3
 80018c6:	f7ff f8af 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd430);
 80018ca:	f24d 4030 	movw	r0, #54320	@ 0xd430
 80018ce:	f7ff f89b 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 80018d2:	2003      	movs	r0, #3
 80018d4:	f7ff f8a8 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd431);
 80018d8:	f24d 4031 	movw	r0, #54321	@ 0xd431
 80018dc:	f7ff f894 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xb9);
 80018e0:	20b9      	movs	r0, #185	@ 0xb9
 80018e2:	f7ff f8a1 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd432);
 80018e6:	f24d 4032 	movw	r0, #54322	@ 0xd432
 80018ea:	f7ff f88d 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 80018ee:	2003      	movs	r0, #3
 80018f0:	f7ff f89a 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd433);
 80018f4:	f24d 4033 	movw	r0, #54323	@ 0xd433
 80018f8:	f7ff f886 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xc1);
 80018fc:	20c1      	movs	r0, #193	@ 0xc1
 80018fe:	f7ff f893 	bl	8000a28 <lcd_wr_data>

    //#g-//////////////////////////////////////////////
    lcd_wr_reg(0xd500);
 8001902:	f44f 4055 	mov.w	r0, #54528	@ 0xd500
 8001906:	f7ff f87f 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 800190a:	2000      	movs	r0, #0
 800190c:	f7ff f88c 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd501);
 8001910:	f24d 5001 	movw	r0, #54529	@ 0xd501
 8001914:	f7ff f878 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x37);
 8001918:	2037      	movs	r0, #55	@ 0x37
 800191a:	f7ff f885 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd502);
 800191e:	f24d 5002 	movw	r0, #54530	@ 0xd502
 8001922:	f7ff f871 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001926:	2000      	movs	r0, #0
 8001928:	f7ff f87e 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd503);
 800192c:	f24d 5003 	movw	r0, #54531	@ 0xd503
 8001930:	f7ff f86a 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x52);
 8001934:	2052      	movs	r0, #82	@ 0x52
 8001936:	f7ff f877 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd504);
 800193a:	f24d 5004 	movw	r0, #54532	@ 0xd504
 800193e:	f7ff f863 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001942:	2000      	movs	r0, #0
 8001944:	f7ff f870 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd505);
 8001948:	f24d 5005 	movw	r0, #54533	@ 0xd505
 800194c:	f7ff f85c 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x7b);
 8001950:	207b      	movs	r0, #123	@ 0x7b
 8001952:	f7ff f869 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd506);
 8001956:	f24d 5006 	movw	r0, #54534	@ 0xd506
 800195a:	f7ff f855 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 800195e:	2000      	movs	r0, #0
 8001960:	f7ff f862 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd507);
 8001964:	f24d 5007 	movw	r0, #54535	@ 0xd507
 8001968:	f7ff f84e 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x99);
 800196c:	2099      	movs	r0, #153	@ 0x99
 800196e:	f7ff f85b 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd508);
 8001972:	f24d 5008 	movw	r0, #54536	@ 0xd508
 8001976:	f7ff f847 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 800197a:	2000      	movs	r0, #0
 800197c:	f7ff f854 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd509);
 8001980:	f24d 5009 	movw	r0, #54537	@ 0xd509
 8001984:	f7ff f840 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xb1);
 8001988:	20b1      	movs	r0, #177	@ 0xb1
 800198a:	f7ff f84d 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd50a);
 800198e:	f24d 500a 	movw	r0, #54538	@ 0xd50a
 8001992:	f7ff f839 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001996:	2000      	movs	r0, #0
 8001998:	f7ff f846 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd50b);
 800199c:	f24d 500b 	movw	r0, #54539	@ 0xd50b
 80019a0:	f7ff f832 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xd2);
 80019a4:	20d2      	movs	r0, #210	@ 0xd2
 80019a6:	f7ff f83f 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd50c);
 80019aa:	f24d 500c 	movw	r0, #54540	@ 0xd50c
 80019ae:	f7ff f82b 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 80019b2:	2000      	movs	r0, #0
 80019b4:	f7ff f838 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd50d);
 80019b8:	f24d 500d 	movw	r0, #54541	@ 0xd50d
 80019bc:	f7ff f824 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xf6);
 80019c0:	20f6      	movs	r0, #246	@ 0xf6
 80019c2:	f7ff f831 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd50e);
 80019c6:	f24d 500e 	movw	r0, #54542	@ 0xd50e
 80019ca:	f7ff f81d 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x01);
 80019ce:	2001      	movs	r0, #1
 80019d0:	f7ff f82a 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd50f);
 80019d4:	f24d 500f 	movw	r0, #54543	@ 0xd50f
 80019d8:	f7ff f816 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x27);
 80019dc:	2027      	movs	r0, #39	@ 0x27
 80019de:	f7ff f823 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd510);
 80019e2:	f24d 5010 	movw	r0, #54544	@ 0xd510
 80019e6:	f7ff f80f 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x01);
 80019ea:	2001      	movs	r0, #1
 80019ec:	f7ff f81c 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd511);
 80019f0:	f24d 5011 	movw	r0, #54545	@ 0xd511
 80019f4:	f7ff f808 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x4e);
 80019f8:	204e      	movs	r0, #78	@ 0x4e
 80019fa:	f7ff f815 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd512);
 80019fe:	f24d 5012 	movw	r0, #54546	@ 0xd512
 8001a02:	f7ff f801 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x01);
 8001a06:	2001      	movs	r0, #1
 8001a08:	f7ff f80e 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd513);
 8001a0c:	f24d 5013 	movw	r0, #54547	@ 0xd513
 8001a10:	f7fe fffa 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x8c);
 8001a14:	208c      	movs	r0, #140	@ 0x8c
 8001a16:	f7ff f807 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd514);
 8001a1a:	f24d 5014 	movw	r0, #54548	@ 0xd514
 8001a1e:	f7fe fff3 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x01);
 8001a22:	2001      	movs	r0, #1
 8001a24:	f7ff f800 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd515);
 8001a28:	f24d 5015 	movw	r0, #54549	@ 0xd515
 8001a2c:	f7fe ffec 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xbe);
 8001a30:	20be      	movs	r0, #190	@ 0xbe
 8001a32:	f7fe fff9 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd516);
 8001a36:	f24d 5016 	movw	r0, #54550	@ 0xd516
 8001a3a:	f7fe ffe5 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8001a3e:	2002      	movs	r0, #2
 8001a40:	f7fe fff2 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd517);
 8001a44:	f24d 5017 	movw	r0, #54551	@ 0xd517
 8001a48:	f7fe ffde 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x0b);
 8001a4c:	200b      	movs	r0, #11
 8001a4e:	f7fe ffeb 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd518);
 8001a52:	f24d 5018 	movw	r0, #54552	@ 0xd518
 8001a56:	f7fe ffd7 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8001a5a:	2002      	movs	r0, #2
 8001a5c:	f7fe ffe4 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd519);
 8001a60:	f24d 5019 	movw	r0, #54553	@ 0xd519
 8001a64:	f7fe ffd0 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x48);
 8001a68:	2048      	movs	r0, #72	@ 0x48
 8001a6a:	f7fe ffdd 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd51a);
 8001a6e:	f24d 501a 	movw	r0, #54554	@ 0xd51a
 8001a72:	f7fe ffc9 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8001a76:	2002      	movs	r0, #2
 8001a78:	f7fe ffd6 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd51b);
 8001a7c:	f24d 501b 	movw	r0, #54555	@ 0xd51b
 8001a80:	f7fe ffc2 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x4a);
 8001a84:	204a      	movs	r0, #74	@ 0x4a
 8001a86:	f7fe ffcf 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd51c);
 8001a8a:	f24d 501c 	movw	r0, #54556	@ 0xd51c
 8001a8e:	f7fe ffbb 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8001a92:	2002      	movs	r0, #2
 8001a94:	f7fe ffc8 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd51d);
 8001a98:	f24d 501d 	movw	r0, #54557	@ 0xd51d
 8001a9c:	f7fe ffb4 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x7e);
 8001aa0:	207e      	movs	r0, #126	@ 0x7e
 8001aa2:	f7fe ffc1 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd51e);
 8001aa6:	f24d 501e 	movw	r0, #54558	@ 0xd51e
 8001aaa:	f7fe ffad 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8001aae:	2002      	movs	r0, #2
 8001ab0:	f7fe ffba 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd51f);
 8001ab4:	f24d 501f 	movw	r0, #54559	@ 0xd51f
 8001ab8:	f7fe ffa6 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xbc);
 8001abc:	20bc      	movs	r0, #188	@ 0xbc
 8001abe:	f7fe ffb3 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd520);
 8001ac2:	f24d 5020 	movw	r0, #54560	@ 0xd520
 8001ac6:	f7fe ff9f 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8001aca:	2002      	movs	r0, #2
 8001acc:	f7fe ffac 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd521);
 8001ad0:	f24d 5021 	movw	r0, #54561	@ 0xd521
 8001ad4:	f7fe ff98 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xe1);
 8001ad8:	20e1      	movs	r0, #225	@ 0xe1
 8001ada:	f7fe ffa5 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd522);
 8001ade:	f24d 5022 	movw	r0, #54562	@ 0xd522
 8001ae2:	f7fe ff91 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001ae6:	2003      	movs	r0, #3
 8001ae8:	f7fe ff9e 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd523);
 8001aec:	f24d 5023 	movw	r0, #54563	@ 0xd523
 8001af0:	f7fe ff8a 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x10);
 8001af4:	2010      	movs	r0, #16
 8001af6:	f7fe ff97 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd524);
 8001afa:	f24d 5024 	movw	r0, #54564	@ 0xd524
 8001afe:	f7fe ff83 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001b02:	2003      	movs	r0, #3
 8001b04:	f7fe ff90 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd525);
 8001b08:	f24d 5025 	movw	r0, #54565	@ 0xd525
 8001b0c:	f7fe ff7c 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x31);
 8001b10:	2031      	movs	r0, #49	@ 0x31
 8001b12:	f7fe ff89 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd526);
 8001b16:	f24d 5026 	movw	r0, #54566	@ 0xd526
 8001b1a:	f7fe ff75 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001b1e:	2003      	movs	r0, #3
 8001b20:	f7fe ff82 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd527);
 8001b24:	f24d 5027 	movw	r0, #54567	@ 0xd527
 8001b28:	f7fe ff6e 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x5a);
 8001b2c:	205a      	movs	r0, #90	@ 0x5a
 8001b2e:	f7fe ff7b 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd528);
 8001b32:	f24d 5028 	movw	r0, #54568	@ 0xd528
 8001b36:	f7fe ff67 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001b3a:	2003      	movs	r0, #3
 8001b3c:	f7fe ff74 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd529);
 8001b40:	f24d 5029 	movw	r0, #54569	@ 0xd529
 8001b44:	f7fe ff60 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x73);
 8001b48:	2073      	movs	r0, #115	@ 0x73
 8001b4a:	f7fe ff6d 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd52a);
 8001b4e:	f24d 502a 	movw	r0, #54570	@ 0xd52a
 8001b52:	f7fe ff59 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001b56:	2003      	movs	r0, #3
 8001b58:	f7fe ff66 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd52b);
 8001b5c:	f24d 502b 	movw	r0, #54571	@ 0xd52b
 8001b60:	f7fe ff52 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x94);
 8001b64:	2094      	movs	r0, #148	@ 0x94
 8001b66:	f7fe ff5f 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd52c);
 8001b6a:	f24d 502c 	movw	r0, #54572	@ 0xd52c
 8001b6e:	f7fe ff4b 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001b72:	2003      	movs	r0, #3
 8001b74:	f7fe ff58 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd52d);
 8001b78:	f24d 502d 	movw	r0, #54573	@ 0xd52d
 8001b7c:	f7fe ff44 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x9f);
 8001b80:	209f      	movs	r0, #159	@ 0x9f
 8001b82:	f7fe ff51 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd52e);
 8001b86:	f24d 502e 	movw	r0, #54574	@ 0xd52e
 8001b8a:	f7fe ff3d 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001b8e:	2003      	movs	r0, #3
 8001b90:	f7fe ff4a 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd52f);
 8001b94:	f24d 502f 	movw	r0, #54575	@ 0xd52f
 8001b98:	f7fe ff36 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xb3);
 8001b9c:	20b3      	movs	r0, #179	@ 0xb3
 8001b9e:	f7fe ff43 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd530);
 8001ba2:	f24d 5030 	movw	r0, #54576	@ 0xd530
 8001ba6:	f7fe ff2f 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001baa:	2003      	movs	r0, #3
 8001bac:	f7fe ff3c 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd531);
 8001bb0:	f24d 5031 	movw	r0, #54577	@ 0xd531
 8001bb4:	f7fe ff28 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xb9);
 8001bb8:	20b9      	movs	r0, #185	@ 0xb9
 8001bba:	f7fe ff35 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd532);
 8001bbe:	f24d 5032 	movw	r0, #54578	@ 0xd532
 8001bc2:	f7fe ff21 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001bc6:	2003      	movs	r0, #3
 8001bc8:	f7fe ff2e 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd533);
 8001bcc:	f24d 5033 	movw	r0, #54579	@ 0xd533
 8001bd0:	f7fe ff1a 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xc1);
 8001bd4:	20c1      	movs	r0, #193	@ 0xc1
 8001bd6:	f7fe ff27 	bl	8000a28 <lcd_wr_data>
    //#b-///////////////////////////////
    lcd_wr_reg(0xd600);
 8001bda:	f44f 4056 	mov.w	r0, #54784	@ 0xd600
 8001bde:	f7fe ff13 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001be2:	2000      	movs	r0, #0
 8001be4:	f7fe ff20 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd601);
 8001be8:	f24d 6001 	movw	r0, #54785	@ 0xd601
 8001bec:	f7fe ff0c 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x37);
 8001bf0:	2037      	movs	r0, #55	@ 0x37
 8001bf2:	f7fe ff19 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd602);
 8001bf6:	f24d 6002 	movw	r0, #54786	@ 0xd602
 8001bfa:	f7fe ff05 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001bfe:	2000      	movs	r0, #0
 8001c00:	f7fe ff12 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd603);
 8001c04:	f24d 6003 	movw	r0, #54787	@ 0xd603
 8001c08:	f7fe fefe 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x52);
 8001c0c:	2052      	movs	r0, #82	@ 0x52
 8001c0e:	f7fe ff0b 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd604);
 8001c12:	f24d 6004 	movw	r0, #54788	@ 0xd604
 8001c16:	f7fe fef7 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	f7fe ff04 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd605);
 8001c20:	f24d 6005 	movw	r0, #54789	@ 0xd605
 8001c24:	f7fe fef0 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x7b);
 8001c28:	207b      	movs	r0, #123	@ 0x7b
 8001c2a:	f7fe fefd 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd606);
 8001c2e:	f24d 6006 	movw	r0, #54790	@ 0xd606
 8001c32:	f7fe fee9 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001c36:	2000      	movs	r0, #0
 8001c38:	f7fe fef6 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd607);
 8001c3c:	f24d 6007 	movw	r0, #54791	@ 0xd607
 8001c40:	f7fe fee2 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x99);
 8001c44:	2099      	movs	r0, #153	@ 0x99
 8001c46:	f7fe feef 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd608);
 8001c4a:	f24d 6008 	movw	r0, #54792	@ 0xd608
 8001c4e:	f7fe fedb 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7fe fee8 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd609);
 8001c58:	f24d 6009 	movw	r0, #54793	@ 0xd609
 8001c5c:	f7fe fed4 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xb1);
 8001c60:	20b1      	movs	r0, #177	@ 0xb1
 8001c62:	f7fe fee1 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd60a);
 8001c66:	f24d 600a 	movw	r0, #54794	@ 0xd60a
 8001c6a:	f7fe fecd 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001c6e:	2000      	movs	r0, #0
 8001c70:	f7fe feda 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd60b);
 8001c74:	f24d 600b 	movw	r0, #54795	@ 0xd60b
 8001c78:	f7fe fec6 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xd2);
 8001c7c:	20d2      	movs	r0, #210	@ 0xd2
 8001c7e:	f7fe fed3 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd60c);
 8001c82:	f24d 600c 	movw	r0, #54796	@ 0xd60c
 8001c86:	f7fe febf 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	f7fe fecc 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd60d);
 8001c90:	f24d 600d 	movw	r0, #54797	@ 0xd60d
 8001c94:	f7fe feb8 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xf6);
 8001c98:	20f6      	movs	r0, #246	@ 0xf6
 8001c9a:	f7fe fec5 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd60e);
 8001c9e:	f24d 600e 	movw	r0, #54798	@ 0xd60e
 8001ca2:	f7fe feb1 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x01);
 8001ca6:	2001      	movs	r0, #1
 8001ca8:	f7fe febe 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd60f);
 8001cac:	f24d 600f 	movw	r0, #54799	@ 0xd60f
 8001cb0:	f7fe feaa 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x27);
 8001cb4:	2027      	movs	r0, #39	@ 0x27
 8001cb6:	f7fe feb7 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd610);
 8001cba:	f24d 6010 	movw	r0, #54800	@ 0xd610
 8001cbe:	f7fe fea3 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x01);
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	f7fe feb0 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd611);
 8001cc8:	f24d 6011 	movw	r0, #54801	@ 0xd611
 8001ccc:	f7fe fe9c 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x4e);
 8001cd0:	204e      	movs	r0, #78	@ 0x4e
 8001cd2:	f7fe fea9 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd612);
 8001cd6:	f24d 6012 	movw	r0, #54802	@ 0xd612
 8001cda:	f7fe fe95 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x01);
 8001cde:	2001      	movs	r0, #1
 8001ce0:	f7fe fea2 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd613);
 8001ce4:	f24d 6013 	movw	r0, #54803	@ 0xd613
 8001ce8:	f7fe fe8e 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x8c);
 8001cec:	208c      	movs	r0, #140	@ 0x8c
 8001cee:	f7fe fe9b 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd614);
 8001cf2:	f24d 6014 	movw	r0, #54804	@ 0xd614
 8001cf6:	f7fe fe87 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x01);
 8001cfa:	2001      	movs	r0, #1
 8001cfc:	f7fe fe94 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd615);
 8001d00:	f24d 6015 	movw	r0, #54805	@ 0xd615
 8001d04:	f7fe fe80 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xbe);
 8001d08:	20be      	movs	r0, #190	@ 0xbe
 8001d0a:	f7fe fe8d 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd616);
 8001d0e:	f24d 6016 	movw	r0, #54806	@ 0xd616
 8001d12:	f7fe fe79 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8001d16:	2002      	movs	r0, #2
 8001d18:	f7fe fe86 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd617);
 8001d1c:	f24d 6017 	movw	r0, #54807	@ 0xd617
 8001d20:	f7fe fe72 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x0b);
 8001d24:	200b      	movs	r0, #11
 8001d26:	f7fe fe7f 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd618);
 8001d2a:	f24d 6018 	movw	r0, #54808	@ 0xd618
 8001d2e:	f7fe fe6b 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8001d32:	2002      	movs	r0, #2
 8001d34:	f7fe fe78 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd619);
 8001d38:	f24d 6019 	movw	r0, #54809	@ 0xd619
 8001d3c:	f7fe fe64 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x48);
 8001d40:	2048      	movs	r0, #72	@ 0x48
 8001d42:	f7fe fe71 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd61a);
 8001d46:	f24d 601a 	movw	r0, #54810	@ 0xd61a
 8001d4a:	f7fe fe5d 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8001d4e:	2002      	movs	r0, #2
 8001d50:	f7fe fe6a 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd61b);
 8001d54:	f24d 601b 	movw	r0, #54811	@ 0xd61b
 8001d58:	f7fe fe56 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x4a);
 8001d5c:	204a      	movs	r0, #74	@ 0x4a
 8001d5e:	f7fe fe63 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd61c);
 8001d62:	f24d 601c 	movw	r0, #54812	@ 0xd61c
 8001d66:	f7fe fe4f 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8001d6a:	2002      	movs	r0, #2
 8001d6c:	f7fe fe5c 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd61d);
 8001d70:	f24d 601d 	movw	r0, #54813	@ 0xd61d
 8001d74:	f7fe fe48 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x7e);
 8001d78:	207e      	movs	r0, #126	@ 0x7e
 8001d7a:	f7fe fe55 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd61e);
 8001d7e:	f24d 601e 	movw	r0, #54814	@ 0xd61e
 8001d82:	f7fe fe41 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8001d86:	2002      	movs	r0, #2
 8001d88:	f7fe fe4e 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd61f);
 8001d8c:	f24d 601f 	movw	r0, #54815	@ 0xd61f
 8001d90:	f7fe fe3a 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xbc);
 8001d94:	20bc      	movs	r0, #188	@ 0xbc
 8001d96:	f7fe fe47 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd620);
 8001d9a:	f24d 6020 	movw	r0, #54816	@ 0xd620
 8001d9e:	f7fe fe33 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8001da2:	2002      	movs	r0, #2
 8001da4:	f7fe fe40 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd621);
 8001da8:	f24d 6021 	movw	r0, #54817	@ 0xd621
 8001dac:	f7fe fe2c 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xe1);
 8001db0:	20e1      	movs	r0, #225	@ 0xe1
 8001db2:	f7fe fe39 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd622);
 8001db6:	f24d 6022 	movw	r0, #54818	@ 0xd622
 8001dba:	f7fe fe25 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001dbe:	2003      	movs	r0, #3
 8001dc0:	f7fe fe32 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd623);
 8001dc4:	f24d 6023 	movw	r0, #54819	@ 0xd623
 8001dc8:	f7fe fe1e 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x10);
 8001dcc:	2010      	movs	r0, #16
 8001dce:	f7fe fe2b 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd624);
 8001dd2:	f24d 6024 	movw	r0, #54820	@ 0xd624
 8001dd6:	f7fe fe17 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001dda:	2003      	movs	r0, #3
 8001ddc:	f7fe fe24 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd625);
 8001de0:	f24d 6025 	movw	r0, #54821	@ 0xd625
 8001de4:	f7fe fe10 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x31);
 8001de8:	2031      	movs	r0, #49	@ 0x31
 8001dea:	f7fe fe1d 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd626);
 8001dee:	f24d 6026 	movw	r0, #54822	@ 0xd626
 8001df2:	f7fe fe09 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001df6:	2003      	movs	r0, #3
 8001df8:	f7fe fe16 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd627);
 8001dfc:	f24d 6027 	movw	r0, #54823	@ 0xd627
 8001e00:	f7fe fe02 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x5a);
 8001e04:	205a      	movs	r0, #90	@ 0x5a
 8001e06:	f7fe fe0f 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd628);
 8001e0a:	f24d 6028 	movw	r0, #54824	@ 0xd628
 8001e0e:	f7fe fdfb 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001e12:	2003      	movs	r0, #3
 8001e14:	f7fe fe08 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd629);
 8001e18:	f24d 6029 	movw	r0, #54825	@ 0xd629
 8001e1c:	f7fe fdf4 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x73);
 8001e20:	2073      	movs	r0, #115	@ 0x73
 8001e22:	f7fe fe01 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd62a);
 8001e26:	f24d 602a 	movw	r0, #54826	@ 0xd62a
 8001e2a:	f7fe fded 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001e2e:	2003      	movs	r0, #3
 8001e30:	f7fe fdfa 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd62b);
 8001e34:	f24d 602b 	movw	r0, #54827	@ 0xd62b
 8001e38:	f7fe fde6 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x94);
 8001e3c:	2094      	movs	r0, #148	@ 0x94
 8001e3e:	f7fe fdf3 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd62c);
 8001e42:	f24d 602c 	movw	r0, #54828	@ 0xd62c
 8001e46:	f7fe fddf 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001e4a:	2003      	movs	r0, #3
 8001e4c:	f7fe fdec 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd62d);
 8001e50:	f24d 602d 	movw	r0, #54829	@ 0xd62d
 8001e54:	f7fe fdd8 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x9f);
 8001e58:	209f      	movs	r0, #159	@ 0x9f
 8001e5a:	f7fe fde5 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd62e);
 8001e5e:	f24d 602e 	movw	r0, #54830	@ 0xd62e
 8001e62:	f7fe fdd1 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001e66:	2003      	movs	r0, #3
 8001e68:	f7fe fdde 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd62f);
 8001e6c:	f24d 602f 	movw	r0, #54831	@ 0xd62f
 8001e70:	f7fe fdca 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xb3);
 8001e74:	20b3      	movs	r0, #179	@ 0xb3
 8001e76:	f7fe fdd7 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd630);
 8001e7a:	f24d 6030 	movw	r0, #54832	@ 0xd630
 8001e7e:	f7fe fdc3 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001e82:	2003      	movs	r0, #3
 8001e84:	f7fe fdd0 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd631);
 8001e88:	f24d 6031 	movw	r0, #54833	@ 0xd631
 8001e8c:	f7fe fdbc 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xb9);
 8001e90:	20b9      	movs	r0, #185	@ 0xb9
 8001e92:	f7fe fdc9 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd632);
 8001e96:	f24d 6032 	movw	r0, #54834	@ 0xd632
 8001e9a:	f7fe fdb5 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001e9e:	2003      	movs	r0, #3
 8001ea0:	f7fe fdc2 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xd633);
 8001ea4:	f24d 6033 	movw	r0, #54835	@ 0xd633
 8001ea8:	f7fe fdae 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xc1);
 8001eac:	20c1      	movs	r0, #193	@ 0xc1
 8001eae:	f7fe fdbb 	bl	8000a28 <lcd_wr_data>



    //#enable page0
    lcd_wr_reg(0xf000);
 8001eb2:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 8001eb6:	f7fe fda7 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x55);
 8001eba:	2055      	movs	r0, #85	@ 0x55
 8001ebc:	f7fe fdb4 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xf001);
 8001ec0:	f24f 0001 	movw	r0, #61441	@ 0xf001
 8001ec4:	f7fe fda0 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xaa);
 8001ec8:	20aa      	movs	r0, #170	@ 0xaa
 8001eca:	f7fe fdad 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xf002);
 8001ece:	f24f 0002 	movw	r0, #61442	@ 0xf002
 8001ed2:	f7fe fd99 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x52);
 8001ed6:	2052      	movs	r0, #82	@ 0x52
 8001ed8:	f7fe fda6 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xf003);
 8001edc:	f24f 0003 	movw	r0, #61443	@ 0xf003
 8001ee0:	f7fe fd92 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x08);
 8001ee4:	2008      	movs	r0, #8
 8001ee6:	f7fe fd9f 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xf004);
 8001eea:	f24f 0004 	movw	r0, #61444	@ 0xf004
 8001eee:	f7fe fd8b 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	f7fe fd98 	bl	8000a28 <lcd_wr_data>
    //# rgb i/f setting
    lcd_wr_reg(0xb000);
 8001ef8:	f44f 4030 	mov.w	r0, #45056	@ 0xb000
 8001efc:	f7fe fd84 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x08);
 8001f00:	2008      	movs	r0, #8
 8001f02:	f7fe fd91 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xb001);
 8001f06:	f24b 0001 	movw	r0, #45057	@ 0xb001
 8001f0a:	f7fe fd7d 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x05);
 8001f0e:	2005      	movs	r0, #5
 8001f10:	f7fe fd8a 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xb002);
 8001f14:	f24b 0002 	movw	r0, #45058	@ 0xb002
 8001f18:	f7fe fd76 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8001f1c:	2002      	movs	r0, #2
 8001f1e:	f7fe fd83 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xb003);
 8001f22:	f24b 0003 	movw	r0, #45059	@ 0xb003
 8001f26:	f7fe fd6f 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x05);
 8001f2a:	2005      	movs	r0, #5
 8001f2c:	f7fe fd7c 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xb004);
 8001f30:	f24b 0004 	movw	r0, #45060	@ 0xb004
 8001f34:	f7fe fd68 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8001f38:	2002      	movs	r0, #2
 8001f3a:	f7fe fd75 	bl	8000a28 <lcd_wr_data>
    //## sdt:
    lcd_wr_reg(0xb600);
 8001f3e:	f44f 4036 	mov.w	r0, #46592	@ 0xb600
 8001f42:	f7fe fd61 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x08);
 8001f46:	2008      	movs	r0, #8
 8001f48:	f7fe fd6e 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xb500);
 8001f4c:	f44f 4035 	mov.w	r0, #46336	@ 0xb500
 8001f50:	f7fe fd5a 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x50);//0x6b ???? 480x854       0x50 ???? 480x800
 8001f54:	2050      	movs	r0, #80	@ 0x50
 8001f56:	f7fe fd67 	bl	8000a28 <lcd_wr_data>

    //## gate eq:
    lcd_wr_reg(0xb700);
 8001f5a:	f44f 4037 	mov.w	r0, #46848	@ 0xb700
 8001f5e:	f7fe fd53 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001f62:	2000      	movs	r0, #0
 8001f64:	f7fe fd60 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xb701);
 8001f68:	f24b 7001 	movw	r0, #46849	@ 0xb701
 8001f6c:	f7fe fd4c 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001f70:	2000      	movs	r0, #0
 8001f72:	f7fe fd59 	bl	8000a28 <lcd_wr_data>

    //## source eq:
    lcd_wr_reg(0xb800);
 8001f76:	f44f 4038 	mov.w	r0, #47104	@ 0xb800
 8001f7a:	f7fe fd45 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x01);
 8001f7e:	2001      	movs	r0, #1
 8001f80:	f7fe fd52 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xb801);
 8001f84:	f64b 0001 	movw	r0, #47105	@ 0xb801
 8001f88:	f7fe fd3e 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x05);
 8001f8c:	2005      	movs	r0, #5
 8001f8e:	f7fe fd4b 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xb802);
 8001f92:	f64b 0002 	movw	r0, #47106	@ 0xb802
 8001f96:	f7fe fd37 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x05);
 8001f9a:	2005      	movs	r0, #5
 8001f9c:	f7fe fd44 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xb803);
 8001fa0:	f64b 0003 	movw	r0, #47107	@ 0xb803
 8001fa4:	f7fe fd30 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x05);
 8001fa8:	2005      	movs	r0, #5
 8001faa:	f7fe fd3d 	bl	8000a28 <lcd_wr_data>

    //# inversion: column inversion (nvt)
    lcd_wr_reg(0xbc00);
 8001fae:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
 8001fb2:	f7fe fd29 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	f7fe fd36 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xbc01);
 8001fbc:	f64b 4001 	movw	r0, #48129	@ 0xbc01
 8001fc0:	f7fe fd22 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	f7fe fd2f 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xbc02);
 8001fca:	f64b 4002 	movw	r0, #48130	@ 0xbc02
 8001fce:	f7fe fd1b 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	f7fe fd28 	bl	8000a28 <lcd_wr_data>

    //# boe's setting(default)
    lcd_wr_reg(0xcc00);
 8001fd8:	f44f 404c 	mov.w	r0, #52224	@ 0xcc00
 8001fdc:	f7fe fd14 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001fe0:	2003      	movs	r0, #3
 8001fe2:	f7fe fd21 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xcc01);
 8001fe6:	f64c 4001 	movw	r0, #52225	@ 0xcc01
 8001fea:	f7fe fd0d 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001fee:	2000      	movs	r0, #0
 8001ff0:	f7fe fd1a 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xcc02);
 8001ff4:	f64c 4002 	movw	r0, #52226	@ 0xcc02
 8001ff8:	f7fe fd06 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	f7fe fd13 	bl	8000a28 <lcd_wr_data>

    //# display timing:
    lcd_wr_reg(0xbd00);
 8002002:	f44f 403d 	mov.w	r0, #48384	@ 0xbd00
 8002006:	f7fe fcff 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x01);
 800200a:	2001      	movs	r0, #1
 800200c:	f7fe fd0c 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xbd01);
 8002010:	f64b 5001 	movw	r0, #48385	@ 0xbd01
 8002014:	f7fe fcf8 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x84);
 8002018:	2084      	movs	r0, #132	@ 0x84
 800201a:	f7fe fd05 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xbd02);
 800201e:	f64b 5002 	movw	r0, #48386	@ 0xbd02
 8002022:	f7fe fcf1 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x07);
 8002026:	2007      	movs	r0, #7
 8002028:	f7fe fcfe 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xbd03);
 800202c:	f64b 5003 	movw	r0, #48387	@ 0xbd03
 8002030:	f7fe fcea 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x31);
 8002034:	2031      	movs	r0, #49	@ 0x31
 8002036:	f7fe fcf7 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xbd04);
 800203a:	f64b 5004 	movw	r0, #48388	@ 0xbd04
 800203e:	f7fe fce3 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8002042:	2000      	movs	r0, #0
 8002044:	f7fe fcf0 	bl	8000a28 <lcd_wr_data>

    lcd_wr_reg(0xba00);
 8002048:	f44f 403a 	mov.w	r0, #47616	@ 0xba00
 800204c:	f7fe fcdc 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x01);
 8002050:	2001      	movs	r0, #1
 8002052:	f7fe fce9 	bl	8000a28 <lcd_wr_data>

    lcd_wr_reg(0xff00);
 8002056:	f44f 407f 	mov.w	r0, #65280	@ 0xff00
 800205a:	f7fe fcd5 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0xaa);
 800205e:	20aa      	movs	r0, #170	@ 0xaa
 8002060:	f7fe fce2 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xff01);
 8002064:	f64f 7001 	movw	r0, #65281	@ 0xff01
 8002068:	f7fe fcce 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x55);
 800206c:	2055      	movs	r0, #85	@ 0x55
 800206e:	f7fe fcdb 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xff02);
 8002072:	f64f 7002 	movw	r0, #65282	@ 0xff02
 8002076:	f7fe fcc7 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x25);
 800207a:	2025      	movs	r0, #37	@ 0x25
 800207c:	f7fe fcd4 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0xff03);
 8002080:	f64f 7003 	movw	r0, #65283	@ 0xff03
 8002084:	f7fe fcc0 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x01);
 8002088:	2001      	movs	r0, #1
 800208a:	f7fe fccd 	bl	8000a28 <lcd_wr_data>

    lcd_wr_reg(0x3500);
 800208e:	f44f 5054 	mov.w	r0, #13568	@ 0x3500
 8002092:	f7fe fcb9 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8002096:	2000      	movs	r0, #0
 8002098:	f7fe fcc6 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0x3600);
 800209c:	f44f 5058 	mov.w	r0, #13824	@ 0x3600
 80020a0:	f7fe fcb2 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x00);
 80020a4:	2000      	movs	r0, #0
 80020a6:	f7fe fcbf 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0x3a00);
 80020aa:	f44f 5068 	mov.w	r0, #14848	@ 0x3a00
 80020ae:	f7fe fcab 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(0x55); 
 80020b2:	2055      	movs	r0, #85	@ 0x55
 80020b4:	f7fe fcb8 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(0x1100);
 80020b8:	f44f 5088 	mov.w	r0, #4352	@ 0x1100
 80020bc:	f7fe fca4 	bl	8000a08 <lcd_wr_reg>
    HAL_Delay(120);
 80020c0:	2078      	movs	r0, #120	@ 0x78
 80020c2:	f000 fca1 	bl	8002a08 <HAL_Delay>
    lcd_wr_reg(0x2900 );
 80020c6:	f44f 5024 	mov.w	r0, #10496	@ 0x2900
 80020ca:	f7fe fc9d 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_reg(0x2c00);
 80020ce:	f44f 5030 	mov.w	r0, #11264	@ 0x2c00
 80020d2:	f7fe fc99 	bl	8000a08 <lcd_wr_reg>
//	
//	lcd_wr_reg(0x1100);
//	HAL_Delay(120);
//	lcd_wr_reg(0x2900);

	lcd_direction(USE_HORIZONTAL);//����lcd��ʾ����
 80020d6:	2000      	movs	r0, #0
 80020d8:	f000 f87e 	bl	80021d8 <lcd_direction>

}
 80020dc:	bf00      	nop
 80020de:	bd80      	pop	{r7, pc}

080020e0 <lcd_setwindows>:
								xend:the endning x coordinate of the lcd display window
								yend:the endning y coordinate of the lcd display window
 * @retvalue   :none
******************************************************************************/
void lcd_setwindows(uint16_t xstar, uint16_t ystar,uint16_t xend,uint16_t yend)
{
 80020e0:	b590      	push	{r4, r7, lr}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4604      	mov	r4, r0
 80020e8:	4608      	mov	r0, r1
 80020ea:	4611      	mov	r1, r2
 80020ec:	461a      	mov	r2, r3
 80020ee:	4623      	mov	r3, r4
 80020f0:	80fb      	strh	r3, [r7, #6]
 80020f2:	4603      	mov	r3, r0
 80020f4:	80bb      	strh	r3, [r7, #4]
 80020f6:	460b      	mov	r3, r1
 80020f8:	807b      	strh	r3, [r7, #2]
 80020fa:	4613      	mov	r3, r2
 80020fc:	803b      	strh	r3, [r7, #0]
    lcd_wr_reg(lcddev.setxcmd);
 80020fe:	4b35      	ldr	r3, [pc, #212]	@ (80021d4 <lcd_setwindows+0xf4>)
 8002100:	899b      	ldrh	r3, [r3, #12]
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe fc80 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(xstar>>8);
 8002108:	88fb      	ldrh	r3, [r7, #6]
 800210a:	0a1b      	lsrs	r3, r3, #8
 800210c:	b29b      	uxth	r3, r3
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe fc8a 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(lcddev.setxcmd+1);
 8002114:	4b2f      	ldr	r3, [pc, #188]	@ (80021d4 <lcd_setwindows+0xf4>)
 8002116:	899b      	ldrh	r3, [r3, #12]
 8002118:	3301      	adds	r3, #1
 800211a:	b29b      	uxth	r3, r3
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe fc73 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(xstar&0xff);
 8002122:	88fb      	ldrh	r3, [r7, #6]
 8002124:	b2db      	uxtb	r3, r3
 8002126:	b29b      	uxth	r3, r3
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe fc7d 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(lcddev.setxcmd+2);
 800212e:	4b29      	ldr	r3, [pc, #164]	@ (80021d4 <lcd_setwindows+0xf4>)
 8002130:	899b      	ldrh	r3, [r3, #12]
 8002132:	3302      	adds	r3, #2
 8002134:	b29b      	uxth	r3, r3
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe fc66 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(xend>>8);
 800213c:	887b      	ldrh	r3, [r7, #2]
 800213e:	0a1b      	lsrs	r3, r3, #8
 8002140:	b29b      	uxth	r3, r3
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe fc70 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(lcddev.setxcmd+3);
 8002148:	4b22      	ldr	r3, [pc, #136]	@ (80021d4 <lcd_setwindows+0xf4>)
 800214a:	899b      	ldrh	r3, [r3, #12]
 800214c:	3303      	adds	r3, #3
 800214e:	b29b      	uxth	r3, r3
 8002150:	4618      	mov	r0, r3
 8002152:	f7fe fc59 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(xend&0xff);
 8002156:	887b      	ldrh	r3, [r7, #2]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	b29b      	uxth	r3, r3
 800215c:	4618      	mov	r0, r3
 800215e:	f7fe fc63 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(lcddev.setycmd);
 8002162:	4b1c      	ldr	r3, [pc, #112]	@ (80021d4 <lcd_setwindows+0xf4>)
 8002164:	89db      	ldrh	r3, [r3, #14]
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe fc4e 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(ystar>>8);
 800216c:	88bb      	ldrh	r3, [r7, #4]
 800216e:	0a1b      	lsrs	r3, r3, #8
 8002170:	b29b      	uxth	r3, r3
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe fc58 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(lcddev.setycmd+1);
 8002178:	4b16      	ldr	r3, [pc, #88]	@ (80021d4 <lcd_setwindows+0xf4>)
 800217a:	89db      	ldrh	r3, [r3, #14]
 800217c:	3301      	adds	r3, #1
 800217e:	b29b      	uxth	r3, r3
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe fc41 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(ystar&0xff);
 8002186:	88bb      	ldrh	r3, [r7, #4]
 8002188:	b2db      	uxtb	r3, r3
 800218a:	b29b      	uxth	r3, r3
 800218c:	4618      	mov	r0, r3
 800218e:	f7fe fc4b 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(lcddev.setycmd+2);
 8002192:	4b10      	ldr	r3, [pc, #64]	@ (80021d4 <lcd_setwindows+0xf4>)
 8002194:	89db      	ldrh	r3, [r3, #14]
 8002196:	3302      	adds	r3, #2
 8002198:	b29b      	uxth	r3, r3
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe fc34 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(yend>>8);
 80021a0:	883b      	ldrh	r3, [r7, #0]
 80021a2:	0a1b      	lsrs	r3, r3, #8
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe fc3e 	bl	8000a28 <lcd_wr_data>
    lcd_wr_reg(lcddev.setycmd+3);
 80021ac:	4b09      	ldr	r3, [pc, #36]	@ (80021d4 <lcd_setwindows+0xf4>)
 80021ae:	89db      	ldrh	r3, [r3, #14]
 80021b0:	3303      	adds	r3, #3
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7fe fc27 	bl	8000a08 <lcd_wr_reg>
    lcd_wr_data(yend&0xff);
 80021ba:	883b      	ldrh	r3, [r7, #0]
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	b29b      	uxth	r3, r3
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe fc31 	bl	8000a28 <lcd_wr_data>

    lcd_writeram_prepare();	//��ʼд��gram
 80021c6:	f7fe fc7d 	bl	8000ac4 <lcd_writeram_prepare>
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd90      	pop	{r4, r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000124 	.word	0x20000124

080021d8 <lcd_direction>:
													2-180 degree
													3-270 degree
 * @retvalue   :none
******************************************************************************/
void lcd_direction(uint8_t direction)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	71fb      	strb	r3, [r7, #7]
    lcddev.setxcmd=0x2a00;
 80021e2:	4b2e      	ldr	r3, [pc, #184]	@ (800229c <lcd_direction+0xc4>)
 80021e4:	f44f 5228 	mov.w	r2, #10752	@ 0x2a00
 80021e8:	819a      	strh	r2, [r3, #12]
    lcddev.setycmd=0x2b00;
 80021ea:	4b2c      	ldr	r3, [pc, #176]	@ (800229c <lcd_direction+0xc4>)
 80021ec:	f44f 522c 	mov.w	r2, #11008	@ 0x2b00
 80021f0:	81da      	strh	r2, [r3, #14]
    lcddev.wramcmd=0x2c00;
 80021f2:	4b2a      	ldr	r3, [pc, #168]	@ (800229c <lcd_direction+0xc4>)
 80021f4:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 80021f8:	811a      	strh	r2, [r3, #8]
    lcddev.rramcmd=0x2e00;
 80021fa:	4b28      	ldr	r3, [pc, #160]	@ (800229c <lcd_direction+0xc4>)
 80021fc:	f44f 5238 	mov.w	r2, #11776	@ 0x2e00
 8002200:	815a      	strh	r2, [r3, #10]
    switch(direction) {
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	2b03      	cmp	r3, #3
 8002206:	d843      	bhi.n	8002290 <lcd_direction+0xb8>
 8002208:	a201      	add	r2, pc, #4	@ (adr r2, 8002210 <lcd_direction+0x38>)
 800220a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800220e:	bf00      	nop
 8002210:	08002221 	.word	0x08002221
 8002214:	0800223d 	.word	0x0800223d
 8002218:	08002259 	.word	0x08002259
 800221c:	08002275 	.word	0x08002275
    case 0:
        lcddev.width=LCD_W;
 8002220:	4b1e      	ldr	r3, [pc, #120]	@ (800229c <lcd_direction+0xc4>)
 8002222:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002226:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_H;
 8002228:	4b1c      	ldr	r3, [pc, #112]	@ (800229c <lcd_direction+0xc4>)
 800222a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800222e:	805a      	strh	r2, [r3, #2]
        lcd_writereg(0x3600,0x00);
 8002230:	2100      	movs	r1, #0
 8002232:	f44f 5058 	mov.w	r0, #13824	@ 0x3600
 8002236:	f7fe fc0f 	bl	8000a58 <lcd_writereg>
        break;
 800223a:	e02a      	b.n	8002292 <lcd_direction+0xba>
    case 1:
        lcddev.width=LCD_H;
 800223c:	4b17      	ldr	r3, [pc, #92]	@ (800229c <lcd_direction+0xc4>)
 800223e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002242:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_W;
 8002244:	4b15      	ldr	r3, [pc, #84]	@ (800229c <lcd_direction+0xc4>)
 8002246:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800224a:	805a      	strh	r2, [r3, #2]
        lcd_writereg(0x3600,(1<<5)|(1<<6));
 800224c:	2160      	movs	r1, #96	@ 0x60
 800224e:	f44f 5058 	mov.w	r0, #13824	@ 0x3600
 8002252:	f7fe fc01 	bl	8000a58 <lcd_writereg>
        break;
 8002256:	e01c      	b.n	8002292 <lcd_direction+0xba>
    case 2:
        lcddev.width=LCD_W;
 8002258:	4b10      	ldr	r3, [pc, #64]	@ (800229c <lcd_direction+0xc4>)
 800225a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800225e:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_H;
 8002260:	4b0e      	ldr	r3, [pc, #56]	@ (800229c <lcd_direction+0xc4>)
 8002262:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002266:	805a      	strh	r2, [r3, #2]
        lcd_writereg(0x3600,(1<<7)|(1<<6));
 8002268:	21c0      	movs	r1, #192	@ 0xc0
 800226a:	f44f 5058 	mov.w	r0, #13824	@ 0x3600
 800226e:	f7fe fbf3 	bl	8000a58 <lcd_writereg>
        break;
 8002272:	e00e      	b.n	8002292 <lcd_direction+0xba>
    case 3:
        lcddev.width=LCD_H;
 8002274:	4b09      	ldr	r3, [pc, #36]	@ (800229c <lcd_direction+0xc4>)
 8002276:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800227a:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_W;
 800227c:	4b07      	ldr	r3, [pc, #28]	@ (800229c <lcd_direction+0xc4>)
 800227e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002282:	805a      	strh	r2, [r3, #2]
        lcd_writereg(0x3600,(1<<7)|(1<<5));
 8002284:	21a0      	movs	r1, #160	@ 0xa0
 8002286:	f44f 5058 	mov.w	r0, #13824	@ 0x3600
 800228a:	f7fe fbe5 	bl	8000a58 <lcd_writereg>
        break;
 800228e:	e000      	b.n	8002292 <lcd_direction+0xba>
    default:
        break;
 8002290:	bf00      	nop
    }
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000124 	.word	0x20000124

080022a0 <lcd_read_id>:
 * @function   :read id
 * @parameters :none
 * @retvalue   :id value
******************************************************************************/
uint16_t lcd_read_id(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
    uint16_t val;
    lcd_readreg(0xda00,&val,1);//����0x40
 80022a6:	1dbb      	adds	r3, r7, #6
 80022a8:	2201      	movs	r2, #1
 80022aa:	4619      	mov	r1, r3
 80022ac:	f44f 405a 	mov.w	r0, #55808	@ 0xda00
 80022b0:	f7fe fbe8 	bl	8000a84 <lcd_readreg>
//		printf("id is %x",val);


    return lcddev.id;
 80022b4:	4b02      	ldr	r3, [pc, #8]	@ (80022c0 <lcd_read_id+0x20>)
 80022b6:	889b      	ldrh	r3, [r3, #4]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20000124 	.word	0x20000124

080022c4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b0a      	cmp	r3, #10
 80022d0:	d102      	bne.n	80022d8 <__io_putchar+0x14>
    __io_putchar('\r');
 80022d2:	200d      	movs	r0, #13
 80022d4:	f7ff fff6 	bl	80022c4 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80022d8:	1d39      	adds	r1, r7, #4
 80022da:	f04f 33ff 	mov.w	r3, #4294967295
 80022de:	2201      	movs	r2, #1
 80022e0:	4803      	ldr	r0, [pc, #12]	@ (80022f0 <__io_putchar+0x2c>)
 80022e2:	f002 f942 	bl	800456a <HAL_UART_Transmit>

  return 1;
 80022e6:	2301      	movs	r3, #1
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000184 	.word	0x20000184

080022f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022fa:	f000 fb13 	bl	8002924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022fe:	f000 f83b 	bl	8002378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002302:	f7fe fa79 	bl	80007f8 <MX_GPIO_Init>
  MX_FSMC_Init();
 8002306:	f7fe f9c1 	bl	800068c <MX_FSMC_Init>
  MX_TIM6_Init();
 800230a:	f000 fa17 	bl	800273c <MX_TIM6_Init>
  MX_ADC1_Init();
 800230e:	f7fe f927 	bl	8000560 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8002312:	f000 fa6b 	bl	80027ec <MX_USART2_UART_Init>

 // HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);


	//HAL_GPIO_WritePin(GPIOB,BL_Pin,GPIO_PIN_SET);
  lcd_init();
 8002316:	f7fe fc21 	bl	8000b5c <lcd_init>
  lcd_clear(WHITE);
 800231a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800231e:	f7fe fbed 	bl	8000afc <lcd_clear>
  lcd_direction(1);
 8002322:	2001      	movs	r0, #1
 8002324:	f7ff ff58 	bl	80021d8 <lcd_direction>
  //lcd_clear(BLUE);
  int value = 100;
 8002328:	2364      	movs	r3, #100	@ 0x64
 800232a:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	        //lcd_clear(WHITE);
	  		HAL_GPIO_WritePin(GPIOB,BL_Pin,GPIO_PIN_SET);
 800232c:	2201      	movs	r2, #1
 800232e:	2101      	movs	r1, #1
 8002330:	480e      	ldr	r0, [pc, #56]	@ (800236c <main+0x78>)
 8002332:	f001 f9db 	bl	80036ec <HAL_GPIO_WritePin>
//	  		english_font_test();
//	  		chinese_font_test();
	  //pic_test();
//	  		rotate_test();

	  		HAL_ADC_Start(&hadc1);
 8002336:	480e      	ldr	r0, [pc, #56]	@ (8002370 <main+0x7c>)
 8002338:	f000 fbce 	bl	8002ad8 <HAL_ADC_Start>
	  	    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800233c:	f04f 31ff 	mov.w	r1, #4294967295
 8002340:	480b      	ldr	r0, [pc, #44]	@ (8002370 <main+0x7c>)
 8002342:	f000 fc9b 	bl	8002c7c <HAL_ADC_PollForConversion>

	  		uint32_t value = HAL_ADC_GetValue(&hadc1);
 8002346:	480a      	ldr	r0, [pc, #40]	@ (8002370 <main+0x7c>)
 8002348:	f000 fd23 	bl	8002d92 <HAL_ADC_GetValue>
 800234c:	6038      	str	r0, [r7, #0]
	  		printf("ADC = %lu\n", value);
 800234e:	6839      	ldr	r1, [r7, #0]
 8002350:	4808      	ldr	r0, [pc, #32]	@ (8002374 <main+0x80>)
 8002352:	f002 fe11 	bl	8004f78 <iprintf>
	  		draw_speed_indicator(value);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	ee07 3a90 	vmov	s15, r3
 800235c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002360:	eeb0 0a67 	vmov.f32	s0, s15
 8002364:	f000 f984 	bl	8002670 <draw_speed_indicator>
  {
 8002368:	bf00      	nop
 800236a:	e7df      	b.n	800232c <main+0x38>
 800236c:	40020400 	.word	0x40020400
 8002370:	20000088 	.word	0x20000088
 8002374:	08005c6c 	.word	0x08005c6c

08002378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b094      	sub	sp, #80	@ 0x50
 800237c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800237e:	f107 0320 	add.w	r3, r7, #32
 8002382:	2230      	movs	r2, #48	@ 0x30
 8002384:	2100      	movs	r1, #0
 8002386:	4618      	mov	r0, r3
 8002388:	f002 fe4b 	bl	8005022 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800238c:	f107 030c 	add.w	r3, r7, #12
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	60da      	str	r2, [r3, #12]
 800239a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800239c:	2300      	movs	r3, #0
 800239e:	60bb      	str	r3, [r7, #8]
 80023a0:	4b28      	ldr	r3, [pc, #160]	@ (8002444 <SystemClock_Config+0xcc>)
 80023a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a4:	4a27      	ldr	r2, [pc, #156]	@ (8002444 <SystemClock_Config+0xcc>)
 80023a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ac:	4b25      	ldr	r3, [pc, #148]	@ (8002444 <SystemClock_Config+0xcc>)
 80023ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023b4:	60bb      	str	r3, [r7, #8]
 80023b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023b8:	2300      	movs	r3, #0
 80023ba:	607b      	str	r3, [r7, #4]
 80023bc:	4b22      	ldr	r3, [pc, #136]	@ (8002448 <SystemClock_Config+0xd0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a21      	ldr	r2, [pc, #132]	@ (8002448 <SystemClock_Config+0xd0>)
 80023c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023c6:	6013      	str	r3, [r2, #0]
 80023c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002448 <SystemClock_Config+0xd0>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023d0:	607b      	str	r3, [r7, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023d4:	2302      	movs	r3, #2
 80023d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023d8:	2301      	movs	r3, #1
 80023da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023dc:	2310      	movs	r3, #16
 80023de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023e0:	2302      	movs	r3, #2
 80023e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023e4:	2300      	movs	r3, #0
 80023e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80023e8:	2308      	movs	r3, #8
 80023ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80023ec:	23a8      	movs	r3, #168	@ 0xa8
 80023ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023f0:	2302      	movs	r3, #2
 80023f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80023f4:	2304      	movs	r3, #4
 80023f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023f8:	f107 0320 	add.w	r3, r7, #32
 80023fc:	4618      	mov	r0, r3
 80023fe:	f001 f98f 	bl	8003720 <HAL_RCC_OscConfig>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002408:	f000 f820 	bl	800244c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800240c:	230f      	movs	r3, #15
 800240e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002410:	2302      	movs	r3, #2
 8002412:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002418:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800241c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800241e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002422:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002424:	f107 030c 	add.w	r3, r7, #12
 8002428:	2105      	movs	r1, #5
 800242a:	4618      	mov	r0, r3
 800242c:	f001 fbf0 	bl	8003c10 <HAL_RCC_ClockConfig>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002436:	f000 f809 	bl	800244c <Error_Handler>
  }
}
 800243a:	bf00      	nop
 800243c:	3750      	adds	r7, #80	@ 0x50
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40023800 	.word	0x40023800
 8002448:	40007000 	.word	0x40007000

0800244c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002450:	b672      	cpsid	i
}
 8002452:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002454:	bf00      	nop
 8002456:	e7fd      	b.n	8002454 <Error_Handler+0x8>

08002458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	607b      	str	r3, [r7, #4]
 8002462:	4b10      	ldr	r3, [pc, #64]	@ (80024a4 <HAL_MspInit+0x4c>)
 8002464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002466:	4a0f      	ldr	r2, [pc, #60]	@ (80024a4 <HAL_MspInit+0x4c>)
 8002468:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800246c:	6453      	str	r3, [r2, #68]	@ 0x44
 800246e:	4b0d      	ldr	r3, [pc, #52]	@ (80024a4 <HAL_MspInit+0x4c>)
 8002470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002472:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002476:	607b      	str	r3, [r7, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	603b      	str	r3, [r7, #0]
 800247e:	4b09      	ldr	r3, [pc, #36]	@ (80024a4 <HAL_MspInit+0x4c>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002482:	4a08      	ldr	r2, [pc, #32]	@ (80024a4 <HAL_MspInit+0x4c>)
 8002484:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002488:	6413      	str	r3, [r2, #64]	@ 0x40
 800248a:	4b06      	ldr	r3, [pc, #24]	@ (80024a4 <HAL_MspInit+0x4c>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002492:	603b      	str	r3, [r7, #0]
 8002494:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	40023800 	.word	0x40023800

080024a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024ac:	bf00      	nop
 80024ae:	e7fd      	b.n	80024ac <NMI_Handler+0x4>

080024b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024b4:	bf00      	nop
 80024b6:	e7fd      	b.n	80024b4 <HardFault_Handler+0x4>

080024b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024bc:	bf00      	nop
 80024be:	e7fd      	b.n	80024bc <MemManage_Handler+0x4>

080024c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024c4:	bf00      	nop
 80024c6:	e7fd      	b.n	80024c4 <BusFault_Handler+0x4>

080024c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024cc:	bf00      	nop
 80024ce:	e7fd      	b.n	80024cc <UsageFault_Handler+0x4>

080024d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024d4:	bf00      	nop
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024de:	b480      	push	{r7}
 80024e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024f0:	bf00      	nop
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024fe:	f000 fa63 	bl	80029c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}

08002506 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b086      	sub	sp, #24
 800250a:	af00      	add	r7, sp, #0
 800250c:	60f8      	str	r0, [r7, #12]
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	e00a      	b.n	800252e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002518:	f3af 8000 	nop.w
 800251c:	4601      	mov	r1, r0
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	1c5a      	adds	r2, r3, #1
 8002522:	60ba      	str	r2, [r7, #8]
 8002524:	b2ca      	uxtb	r2, r1
 8002526:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	3301      	adds	r3, #1
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	429a      	cmp	r2, r3
 8002534:	dbf0      	blt.n	8002518 <_read+0x12>
  }

  return len;
 8002536:	687b      	ldr	r3, [r7, #4]
}
 8002538:	4618      	mov	r0, r3
 800253a:	3718      	adds	r7, #24
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	e009      	b.n	8002566 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	60ba      	str	r2, [r7, #8]
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff feb2 	bl	80022c4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	3301      	adds	r3, #1
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	429a      	cmp	r2, r3
 800256c:	dbf1      	blt.n	8002552 <_write+0x12>
  }
  return len;
 800256e:	687b      	ldr	r3, [r7, #4]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <_close>:

int _close(int file)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002580:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025a0:	605a      	str	r2, [r3, #4]
  return 0;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <_isatty>:

int _isatty(int file)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025b8:	2301      	movs	r3, #1
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b085      	sub	sp, #20
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	60f8      	str	r0, [r7, #12]
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025e8:	4a14      	ldr	r2, [pc, #80]	@ (800263c <_sbrk+0x5c>)
 80025ea:	4b15      	ldr	r3, [pc, #84]	@ (8002640 <_sbrk+0x60>)
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025f4:	4b13      	ldr	r3, [pc, #76]	@ (8002644 <_sbrk+0x64>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d102      	bne.n	8002602 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025fc:	4b11      	ldr	r3, [pc, #68]	@ (8002644 <_sbrk+0x64>)
 80025fe:	4a12      	ldr	r2, [pc, #72]	@ (8002648 <_sbrk+0x68>)
 8002600:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002602:	4b10      	ldr	r3, [pc, #64]	@ (8002644 <_sbrk+0x64>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4413      	add	r3, r2
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	429a      	cmp	r2, r3
 800260e:	d207      	bcs.n	8002620 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002610:	f002 fd56 	bl	80050c0 <__errno>
 8002614:	4603      	mov	r3, r0
 8002616:	220c      	movs	r2, #12
 8002618:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800261a:	f04f 33ff 	mov.w	r3, #4294967295
 800261e:	e009      	b.n	8002634 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002620:	4b08      	ldr	r3, [pc, #32]	@ (8002644 <_sbrk+0x64>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002626:	4b07      	ldr	r3, [pc, #28]	@ (8002644 <_sbrk+0x64>)
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4413      	add	r3, r2
 800262e:	4a05      	ldr	r2, [pc, #20]	@ (8002644 <_sbrk+0x64>)
 8002630:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002632:	68fb      	ldr	r3, [r7, #12]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	20020000 	.word	0x20020000
 8002640:	00000400 	.word	0x00000400
 8002644:	20000134 	.word	0x20000134
 8002648:	20000318 	.word	0x20000318

0800264c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002650:	4b06      	ldr	r3, [pc, #24]	@ (800266c <SystemInit+0x20>)
 8002652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002656:	4a05      	ldr	r2, [pc, #20]	@ (800266c <SystemInit+0x20>)
 8002658:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800265c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002660:	bf00      	nop
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	e000ed00 	.word	0xe000ed00

08002670 <draw_speed_indicator>:
int max(int a, int b) {
    return (a > b) ? a : b;
}


void draw_speed_indicator(float speed) {
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af02      	add	r7, sp, #8
 8002676:	ed87 0a01 	vstr	s0, [r7, #4]
    // Calculate the length of the speed indicator rectangle based on the current speed and maximum speed
    float length_ratio = speed / max_speed;
 800267a:	4b1b      	ldr	r3, [pc, #108]	@ (80026e8 <draw_speed_indicator+0x78>)
 800267c:	ed93 7a00 	vldr	s14, [r3]
 8002680:	edd7 6a01 	vldr	s13, [r7, #4]
 8002684:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002688:	edc7 7a03 	vstr	s15, [r7, #12]
    int rect_length = (int)(SPEED_RECT_WIDTH * length_ratio);
 800268c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002690:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80026ec <draw_speed_indicator+0x7c>
 8002694:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002698:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800269c:	ee17 3a90 	vmov	r3, s15
 80026a0:	60bb      	str	r3, [r7, #8]

    // Erase the previous pointer position by filling it with white
    lcd_fill(prev_end_x, SPEED_RECT_Y, prev_end_x + POINTER_LENGTH, SPEED_RECT_Y + SPEED_RECT_HEIGHT, WHITE);
 80026a2:	4b13      	ldr	r3, [pc, #76]	@ (80026f0 <draw_speed_indicator+0x80>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	b298      	uxth	r0, r3
 80026a8:	4b11      	ldr	r3, [pc, #68]	@ (80026f0 <draw_speed_indicator+0x80>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	33c8      	adds	r3, #200	@ 0xc8
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	2396      	movs	r3, #150	@ 0x96
 80026ba:	2132      	movs	r1, #50	@ 0x32
 80026bc:	f7fe f946 	bl	800094c <lcd_fill>

    // Draw the changing part of the speed indicator rectangle in red
    lcd_fill(SPEED_RECT_X, SPEED_RECT_Y, SPEED_RECT_X + rect_length, SPEED_RECT_Y + SPEED_RECT_HEIGHT, RED);
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	3314      	adds	r3, #20
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	2396      	movs	r3, #150	@ 0x96
 80026d0:	2132      	movs	r1, #50	@ 0x32
 80026d2:	2014      	movs	r0, #20
 80026d4:	f7fe f93a 	bl	800094c <lcd_fill>

    // Update previous endpoint coordinates
    prev_end_x = SPEED_RECT_X + rect_length;
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	3314      	adds	r3, #20
 80026dc:	4a04      	ldr	r2, [pc, #16]	@ (80026f0 <draw_speed_indicator+0x80>)
 80026de:	6013      	str	r3, [r2, #0]
}
 80026e0:	bf00      	nop
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	20000004 	.word	0x20000004
 80026ec:	43480000 	.word	0x43480000
 80026f0:	20000138 	.word	0x20000138

080026f4 <delay_us>:
/* Includes ------------------------------------------------------------------*/
#include "tim.h"

/* USER CODE BEGIN 0 */
void delay_us(unsigned int us)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
	uint16_t differ=0xffff-us-5;					//???????????
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	b29a      	uxth	r2, r3
 8002700:	f06f 0305 	mvn.w	r3, #5
 8002704:	1a9b      	subs	r3, r3, r2
 8002706:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_COUNTER(&htim6,differ);
 8002708:	4b0b      	ldr	r3, [pc, #44]	@ (8002738 <delay_us+0x44>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	89fa      	ldrh	r2, [r7, #14]
 800270e:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(&htim6);					//?????
 8002710:	4809      	ldr	r0, [pc, #36]	@ (8002738 <delay_us+0x44>)
 8002712:	f001 fd31 	bl	8004178 <HAL_TIM_Base_Start>
  while(differ<0xffff-6)							//??,??
 8002716:	e003      	b.n	8002720 <delay_us+0x2c>
  {
    differ=__HAL_TIM_GET_COUNTER(&htim6);			//?????????
 8002718:	4b07      	ldr	r3, [pc, #28]	@ (8002738 <delay_us+0x44>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271e:	81fb      	strh	r3, [r7, #14]
  while(differ<0xffff-6)							//??,??
 8002720:	89fb      	ldrh	r3, [r7, #14]
 8002722:	f64f 72f8 	movw	r2, #65528	@ 0xfff8
 8002726:	4293      	cmp	r3, r2
 8002728:	d9f6      	bls.n	8002718 <delay_us+0x24>
  }
  HAL_TIM_Base_Stop(&htim6);
 800272a:	4803      	ldr	r0, [pc, #12]	@ (8002738 <delay_us+0x44>)
 800272c:	f001 fd8c 	bl	8004248 <HAL_TIM_Base_Stop>
}
 8002730:	bf00      	nop
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	2000013c 	.word	0x2000013c

0800273c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002742:	463b      	mov	r3, r7
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800274a:	4b15      	ldr	r3, [pc, #84]	@ (80027a0 <MX_TIM6_Init+0x64>)
 800274c:	4a15      	ldr	r2, [pc, #84]	@ (80027a4 <MX_TIM6_Init+0x68>)
 800274e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 71;
 8002750:	4b13      	ldr	r3, [pc, #76]	@ (80027a0 <MX_TIM6_Init+0x64>)
 8002752:	2247      	movs	r2, #71	@ 0x47
 8002754:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002756:	4b12      	ldr	r3, [pc, #72]	@ (80027a0 <MX_TIM6_Init+0x64>)
 8002758:	2200      	movs	r2, #0
 800275a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800275c:	4b10      	ldr	r3, [pc, #64]	@ (80027a0 <MX_TIM6_Init+0x64>)
 800275e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002762:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002764:	4b0e      	ldr	r3, [pc, #56]	@ (80027a0 <MX_TIM6_Init+0x64>)
 8002766:	2200      	movs	r2, #0
 8002768:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800276a:	480d      	ldr	r0, [pc, #52]	@ (80027a0 <MX_TIM6_Init+0x64>)
 800276c:	f001 fcb4 	bl	80040d8 <HAL_TIM_Base_Init>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002776:	f7ff fe69 	bl	800244c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800277a:	2300      	movs	r3, #0
 800277c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800277e:	2300      	movs	r3, #0
 8002780:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002782:	463b      	mov	r3, r7
 8002784:	4619      	mov	r1, r3
 8002786:	4806      	ldr	r0, [pc, #24]	@ (80027a0 <MX_TIM6_Init+0x64>)
 8002788:	f001 fe26 	bl	80043d8 <HAL_TIMEx_MasterConfigSynchronization>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002792:	f7ff fe5b 	bl	800244c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002796:	bf00      	nop
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	2000013c 	.word	0x2000013c
 80027a4:	40001000 	.word	0x40001000

080027a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a0b      	ldr	r2, [pc, #44]	@ (80027e4 <HAL_TIM_Base_MspInit+0x3c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d10d      	bne.n	80027d6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	4b0a      	ldr	r3, [pc, #40]	@ (80027e8 <HAL_TIM_Base_MspInit+0x40>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c2:	4a09      	ldr	r2, [pc, #36]	@ (80027e8 <HAL_TIM_Base_MspInit+0x40>)
 80027c4:	f043 0310 	orr.w	r3, r3, #16
 80027c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ca:	4b07      	ldr	r3, [pc, #28]	@ (80027e8 <HAL_TIM_Base_MspInit+0x40>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ce:	f003 0310 	and.w	r3, r3, #16
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80027d6:	bf00      	nop
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	40001000 	.word	0x40001000
 80027e8:	40023800 	.word	0x40023800

080027ec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027f0:	4b11      	ldr	r3, [pc, #68]	@ (8002838 <MX_USART2_UART_Init+0x4c>)
 80027f2:	4a12      	ldr	r2, [pc, #72]	@ (800283c <MX_USART2_UART_Init+0x50>)
 80027f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80027f6:	4b10      	ldr	r3, [pc, #64]	@ (8002838 <MX_USART2_UART_Init+0x4c>)
 80027f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002838 <MX_USART2_UART_Init+0x4c>)
 8002800:	2200      	movs	r2, #0
 8002802:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002804:	4b0c      	ldr	r3, [pc, #48]	@ (8002838 <MX_USART2_UART_Init+0x4c>)
 8002806:	2200      	movs	r2, #0
 8002808:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800280a:	4b0b      	ldr	r3, [pc, #44]	@ (8002838 <MX_USART2_UART_Init+0x4c>)
 800280c:	2200      	movs	r2, #0
 800280e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002810:	4b09      	ldr	r3, [pc, #36]	@ (8002838 <MX_USART2_UART_Init+0x4c>)
 8002812:	220c      	movs	r2, #12
 8002814:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002816:	4b08      	ldr	r3, [pc, #32]	@ (8002838 <MX_USART2_UART_Init+0x4c>)
 8002818:	2200      	movs	r2, #0
 800281a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800281c:	4b06      	ldr	r3, [pc, #24]	@ (8002838 <MX_USART2_UART_Init+0x4c>)
 800281e:	2200      	movs	r2, #0
 8002820:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002822:	4805      	ldr	r0, [pc, #20]	@ (8002838 <MX_USART2_UART_Init+0x4c>)
 8002824:	f001 fe54 	bl	80044d0 <HAL_UART_Init>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800282e:	f7ff fe0d 	bl	800244c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	20000184 	.word	0x20000184
 800283c:	40004400 	.word	0x40004400

08002840 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b08a      	sub	sp, #40	@ 0x28
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	609a      	str	r2, [r3, #8]
 8002854:	60da      	str	r2, [r3, #12]
 8002856:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a19      	ldr	r2, [pc, #100]	@ (80028c4 <HAL_UART_MspInit+0x84>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d12b      	bne.n	80028ba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	4b18      	ldr	r3, [pc, #96]	@ (80028c8 <HAL_UART_MspInit+0x88>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286a:	4a17      	ldr	r2, [pc, #92]	@ (80028c8 <HAL_UART_MspInit+0x88>)
 800286c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002870:	6413      	str	r3, [r2, #64]	@ 0x40
 8002872:	4b15      	ldr	r3, [pc, #84]	@ (80028c8 <HAL_UART_MspInit+0x88>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	4b11      	ldr	r3, [pc, #68]	@ (80028c8 <HAL_UART_MspInit+0x88>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002886:	4a10      	ldr	r2, [pc, #64]	@ (80028c8 <HAL_UART_MspInit+0x88>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	6313      	str	r3, [r2, #48]	@ 0x30
 800288e:	4b0e      	ldr	r3, [pc, #56]	@ (80028c8 <HAL_UART_MspInit+0x88>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800289a:	230c      	movs	r3, #12
 800289c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289e:	2302      	movs	r3, #2
 80028a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a6:	2303      	movs	r3, #3
 80028a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028aa:	2307      	movs	r3, #7
 80028ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ae:	f107 0314 	add.w	r3, r7, #20
 80028b2:	4619      	mov	r1, r3
 80028b4:	4805      	ldr	r0, [pc, #20]	@ (80028cc <HAL_UART_MspInit+0x8c>)
 80028b6:	f000 fd7d 	bl	80033b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80028ba:	bf00      	nop
 80028bc:	3728      	adds	r7, #40	@ 0x28
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40004400 	.word	0x40004400
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40020000 	.word	0x40020000

080028d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80028d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002908 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028d4:	480d      	ldr	r0, [pc, #52]	@ (800290c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80028d6:	490e      	ldr	r1, [pc, #56]	@ (8002910 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80028d8:	4a0e      	ldr	r2, [pc, #56]	@ (8002914 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028dc:	e002      	b.n	80028e4 <LoopCopyDataInit>

080028de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028e2:	3304      	adds	r3, #4

080028e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028e8:	d3f9      	bcc.n	80028de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ea:	4a0b      	ldr	r2, [pc, #44]	@ (8002918 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80028ec:	4c0b      	ldr	r4, [pc, #44]	@ (800291c <LoopFillZerobss+0x26>)
  movs r3, #0
 80028ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028f0:	e001      	b.n	80028f6 <LoopFillZerobss>

080028f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028f4:	3204      	adds	r2, #4

080028f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028f8:	d3fb      	bcc.n	80028f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80028fa:	f7ff fea7 	bl	800264c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028fe:	f002 fbe5 	bl	80050cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002902:	f7ff fcf7 	bl	80022f4 <main>
  bx  lr    
 8002906:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002908:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800290c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002910:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002914:	08005cd4 	.word	0x08005cd4
  ldr r2, =_sbss
 8002918:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800291c:	20000318 	.word	0x20000318

08002920 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002920:	e7fe      	b.n	8002920 <ADC_IRQHandler>
	...

08002924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002928:	4b0e      	ldr	r3, [pc, #56]	@ (8002964 <HAL_Init+0x40>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a0d      	ldr	r2, [pc, #52]	@ (8002964 <HAL_Init+0x40>)
 800292e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002932:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002934:	4b0b      	ldr	r3, [pc, #44]	@ (8002964 <HAL_Init+0x40>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a0a      	ldr	r2, [pc, #40]	@ (8002964 <HAL_Init+0x40>)
 800293a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800293e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002940:	4b08      	ldr	r3, [pc, #32]	@ (8002964 <HAL_Init+0x40>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a07      	ldr	r2, [pc, #28]	@ (8002964 <HAL_Init+0x40>)
 8002946:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800294a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800294c:	2003      	movs	r0, #3
 800294e:	f000 fcfd 	bl	800334c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002952:	200f      	movs	r0, #15
 8002954:	f000 f808 	bl	8002968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002958:	f7ff fd7e 	bl	8002458 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40023c00 	.word	0x40023c00

08002968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002970:	4b12      	ldr	r3, [pc, #72]	@ (80029bc <HAL_InitTick+0x54>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	4b12      	ldr	r3, [pc, #72]	@ (80029c0 <HAL_InitTick+0x58>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	4619      	mov	r1, r3
 800297a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800297e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002982:	fbb2 f3f3 	udiv	r3, r2, r3
 8002986:	4618      	mov	r0, r3
 8002988:	f000 fd07 	bl	800339a <HAL_SYSTICK_Config>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e00e      	b.n	80029b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b0f      	cmp	r3, #15
 800299a:	d80a      	bhi.n	80029b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800299c:	2200      	movs	r2, #0
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	f04f 30ff 	mov.w	r0, #4294967295
 80029a4:	f000 fcdd 	bl	8003362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029a8:	4a06      	ldr	r2, [pc, #24]	@ (80029c4 <HAL_InitTick+0x5c>)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
 80029b0:	e000      	b.n	80029b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	20000000 	.word	0x20000000
 80029c0:	2000000c 	.word	0x2000000c
 80029c4:	20000008 	.word	0x20000008

080029c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029cc:	4b06      	ldr	r3, [pc, #24]	@ (80029e8 <HAL_IncTick+0x20>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	461a      	mov	r2, r3
 80029d2:	4b06      	ldr	r3, [pc, #24]	@ (80029ec <HAL_IncTick+0x24>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4413      	add	r3, r2
 80029d8:	4a04      	ldr	r2, [pc, #16]	@ (80029ec <HAL_IncTick+0x24>)
 80029da:	6013      	str	r3, [r2, #0]
}
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	2000000c 	.word	0x2000000c
 80029ec:	200001c8 	.word	0x200001c8

080029f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  return uwTick;
 80029f4:	4b03      	ldr	r3, [pc, #12]	@ (8002a04 <HAL_GetTick+0x14>)
 80029f6:	681b      	ldr	r3, [r3, #0]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	200001c8 	.word	0x200001c8

08002a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a10:	f7ff ffee 	bl	80029f0 <HAL_GetTick>
 8002a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a20:	d005      	beq.n	8002a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a22:	4b0a      	ldr	r3, [pc, #40]	@ (8002a4c <HAL_Delay+0x44>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a2e:	bf00      	nop
 8002a30:	f7ff ffde 	bl	80029f0 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d8f7      	bhi.n	8002a30 <HAL_Delay+0x28>
  {
  }
}
 8002a40:	bf00      	nop
 8002a42:	bf00      	nop
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	2000000c 	.word	0x2000000c

08002a50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e033      	b.n	8002ace <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d109      	bne.n	8002a82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7fd fdc8 	bl	8000604 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a86:	f003 0310 	and.w	r3, r3, #16
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d118      	bne.n	8002ac0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a92:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a96:	f023 0302 	bic.w	r3, r3, #2
 8002a9a:	f043 0202 	orr.w	r2, r3, #2
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 faa4 	bl	8002ff0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab2:	f023 0303 	bic.w	r3, r3, #3
 8002ab6:	f043 0201 	orr.w	r2, r3, #1
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	641a      	str	r2, [r3, #64]	@ 0x40
 8002abe:	e001      	b.n	8002ac4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d101      	bne.n	8002af2 <HAL_ADC_Start+0x1a>
 8002aee:	2302      	movs	r3, #2
 8002af0:	e0b2      	b.n	8002c58 <HAL_ADC_Start+0x180>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d018      	beq.n	8002b3a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689a      	ldr	r2, [r3, #8]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 0201 	orr.w	r2, r2, #1
 8002b16:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b18:	4b52      	ldr	r3, [pc, #328]	@ (8002c64 <HAL_ADC_Start+0x18c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a52      	ldr	r2, [pc, #328]	@ (8002c68 <HAL_ADC_Start+0x190>)
 8002b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b22:	0c9a      	lsrs	r2, r3, #18
 8002b24:	4613      	mov	r3, r2
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	4413      	add	r3, r2
 8002b2a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002b2c:	e002      	b.n	8002b34 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	3b01      	subs	r3, #1
 8002b32:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f9      	bne.n	8002b2e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d17a      	bne.n	8002c3e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002b50:	f023 0301 	bic.w	r3, r3, #1
 8002b54:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d007      	beq.n	8002b7a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b72:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b86:	d106      	bne.n	8002b96 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8c:	f023 0206 	bic.w	r2, r3, #6
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b94:	e002      	b.n	8002b9c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ba4:	4b31      	ldr	r3, [pc, #196]	@ (8002c6c <HAL_ADC_Start+0x194>)
 8002ba6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002bb0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 031f 	and.w	r3, r3, #31
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d12a      	bne.n	8002c14 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a2b      	ldr	r2, [pc, #172]	@ (8002c70 <HAL_ADC_Start+0x198>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d015      	beq.n	8002bf4 <HAL_ADC_Start+0x11c>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a29      	ldr	r2, [pc, #164]	@ (8002c74 <HAL_ADC_Start+0x19c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d105      	bne.n	8002bde <HAL_ADC_Start+0x106>
 8002bd2:	4b26      	ldr	r3, [pc, #152]	@ (8002c6c <HAL_ADC_Start+0x194>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f003 031f 	and.w	r3, r3, #31
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00a      	beq.n	8002bf4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a25      	ldr	r2, [pc, #148]	@ (8002c78 <HAL_ADC_Start+0x1a0>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d136      	bne.n	8002c56 <HAL_ADC_Start+0x17e>
 8002be8:	4b20      	ldr	r3, [pc, #128]	@ (8002c6c <HAL_ADC_Start+0x194>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f003 0310 	and.w	r3, r3, #16
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d130      	bne.n	8002c56 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d129      	bne.n	8002c56 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c10:	609a      	str	r2, [r3, #8]
 8002c12:	e020      	b.n	8002c56 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a15      	ldr	r2, [pc, #84]	@ (8002c70 <HAL_ADC_Start+0x198>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d11b      	bne.n	8002c56 <HAL_ADC_Start+0x17e>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d114      	bne.n	8002c56 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c3a:	609a      	str	r2, [r3, #8]
 8002c3c:	e00b      	b.n	8002c56 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c42:	f043 0210 	orr.w	r2, r3, #16
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c4e:	f043 0201 	orr.w	r2, r3, #1
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	20000000 	.word	0x20000000
 8002c68:	431bde83 	.word	0x431bde83
 8002c6c:	40012300 	.word	0x40012300
 8002c70:	40012000 	.word	0x40012000
 8002c74:	40012100 	.word	0x40012100
 8002c78:	40012200 	.word	0x40012200

08002c7c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c98:	d113      	bne.n	8002cc2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002ca4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ca8:	d10b      	bne.n	8002cc2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cae:	f043 0220 	orr.w	r2, r3, #32
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e063      	b.n	8002d8a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002cc2:	f7ff fe95 	bl	80029f0 <HAL_GetTick>
 8002cc6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002cc8:	e021      	b.n	8002d0e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd0:	d01d      	beq.n	8002d0e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d007      	beq.n	8002ce8 <HAL_ADC_PollForConversion+0x6c>
 8002cd8:	f7ff fe8a 	bl	80029f0 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d212      	bcs.n	8002d0e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d00b      	beq.n	8002d0e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfa:	f043 0204 	orr.w	r2, r3, #4
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e03d      	b.n	8002d8a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d1d6      	bne.n	8002cca <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f06f 0212 	mvn.w	r2, #18
 8002d24:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d123      	bne.n	8002d88 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d11f      	bne.n	8002d88 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d006      	beq.n	8002d64 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d111      	bne.n	8002d88 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d105      	bne.n	8002d88 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d80:	f043 0201 	orr.w	r2, r3, #1
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d101      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x1c>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e105      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x228>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2b09      	cmp	r3, #9
 8002dd6:	d925      	bls.n	8002e24 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68d9      	ldr	r1, [r3, #12]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	461a      	mov	r2, r3
 8002de6:	4613      	mov	r3, r2
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	4413      	add	r3, r2
 8002dec:	3b1e      	subs	r3, #30
 8002dee:	2207      	movs	r2, #7
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	43da      	mvns	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	400a      	ands	r2, r1
 8002dfc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68d9      	ldr	r1, [r3, #12]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	4618      	mov	r0, r3
 8002e10:	4603      	mov	r3, r0
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	4403      	add	r3, r0
 8002e16:	3b1e      	subs	r3, #30
 8002e18:	409a      	lsls	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	60da      	str	r2, [r3, #12]
 8002e22:	e022      	b.n	8002e6a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6919      	ldr	r1, [r3, #16]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	461a      	mov	r2, r3
 8002e32:	4613      	mov	r3, r2
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	4413      	add	r3, r2
 8002e38:	2207      	movs	r2, #7
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43da      	mvns	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	400a      	ands	r2, r1
 8002e46:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6919      	ldr	r1, [r3, #16]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	4618      	mov	r0, r3
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	4403      	add	r3, r0
 8002e60:	409a      	lsls	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b06      	cmp	r3, #6
 8002e70:	d824      	bhi.n	8002ebc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	3b05      	subs	r3, #5
 8002e84:	221f      	movs	r2, #31
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	43da      	mvns	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	400a      	ands	r2, r1
 8002e92:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	3b05      	subs	r3, #5
 8002eae:	fa00 f203 	lsl.w	r2, r0, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002eba:	e04c      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b0c      	cmp	r3, #12
 8002ec2:	d824      	bhi.n	8002f0e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3b23      	subs	r3, #35	@ 0x23
 8002ed6:	221f      	movs	r2, #31
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	43da      	mvns	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	400a      	ands	r2, r1
 8002ee4:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	3b23      	subs	r3, #35	@ 0x23
 8002f00:	fa00 f203 	lsl.w	r2, r0, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f0c:	e023      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	3b41      	subs	r3, #65	@ 0x41
 8002f20:	221f      	movs	r2, #31
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43da      	mvns	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	400a      	ands	r2, r1
 8002f2e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	4613      	mov	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4413      	add	r3, r2
 8002f48:	3b41      	subs	r3, #65	@ 0x41
 8002f4a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f56:	4b22      	ldr	r3, [pc, #136]	@ (8002fe0 <HAL_ADC_ConfigChannel+0x234>)
 8002f58:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a21      	ldr	r2, [pc, #132]	@ (8002fe4 <HAL_ADC_ConfigChannel+0x238>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d109      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x1cc>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b12      	cmp	r3, #18
 8002f6a:	d105      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a19      	ldr	r2, [pc, #100]	@ (8002fe4 <HAL_ADC_ConfigChannel+0x238>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d123      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x21e>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2b10      	cmp	r3, #16
 8002f88:	d003      	beq.n	8002f92 <HAL_ADC_ConfigChannel+0x1e6>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b11      	cmp	r3, #17
 8002f90:	d11b      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2b10      	cmp	r3, #16
 8002fa4:	d111      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002fa6:	4b10      	ldr	r3, [pc, #64]	@ (8002fe8 <HAL_ADC_ConfigChannel+0x23c>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a10      	ldr	r2, [pc, #64]	@ (8002fec <HAL_ADC_ConfigChannel+0x240>)
 8002fac:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb0:	0c9a      	lsrs	r2, r3, #18
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4413      	add	r3, r2
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fbc:	e002      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f9      	bne.n	8002fbe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	40012300 	.word	0x40012300
 8002fe4:	40012000 	.word	0x40012000
 8002fe8:	20000000 	.word	0x20000000
 8002fec:	431bde83 	.word	0x431bde83

08002ff0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ff8:	4b79      	ldr	r3, [pc, #484]	@ (80031e0 <ADC_Init+0x1f0>)
 8002ffa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	431a      	orrs	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003024:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6859      	ldr	r1, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	021a      	lsls	r2, r3, #8
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003048:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6859      	ldr	r1, [r3, #4]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689a      	ldr	r2, [r3, #8]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800306a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6899      	ldr	r1, [r3, #8]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003082:	4a58      	ldr	r2, [pc, #352]	@ (80031e4 <ADC_Init+0x1f4>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d022      	beq.n	80030ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689a      	ldr	r2, [r3, #8]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003096:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6899      	ldr	r1, [r3, #8]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80030b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6899      	ldr	r1, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	609a      	str	r2, [r3, #8]
 80030cc:	e00f      	b.n	80030ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80030ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0202 	bic.w	r2, r2, #2
 80030fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6899      	ldr	r1, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	7e1b      	ldrb	r3, [r3, #24]
 8003108:	005a      	lsls	r2, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d01b      	beq.n	8003154 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800312a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800313a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6859      	ldr	r1, [r3, #4]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003146:	3b01      	subs	r3, #1
 8003148:	035a      	lsls	r2, r3, #13
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	605a      	str	r2, [r3, #4]
 8003152:	e007      	b.n	8003164 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003162:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003172:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	3b01      	subs	r3, #1
 8003180:	051a      	lsls	r2, r3, #20
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003198:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6899      	ldr	r1, [r3, #8]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80031a6:	025a      	lsls	r2, r3, #9
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6899      	ldr	r1, [r3, #8]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	029a      	lsls	r2, r3, #10
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	609a      	str	r2, [r3, #8]
}
 80031d4:	bf00      	nop
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	40012300 	.word	0x40012300
 80031e4:	0f000001 	.word	0x0f000001

080031e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031f8:	4b0c      	ldr	r3, [pc, #48]	@ (800322c <__NVIC_SetPriorityGrouping+0x44>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003204:	4013      	ands	r3, r2
 8003206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003210:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003214:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800321a:	4a04      	ldr	r2, [pc, #16]	@ (800322c <__NVIC_SetPriorityGrouping+0x44>)
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	60d3      	str	r3, [r2, #12]
}
 8003220:	bf00      	nop
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	e000ed00 	.word	0xe000ed00

08003230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003234:	4b04      	ldr	r3, [pc, #16]	@ (8003248 <__NVIC_GetPriorityGrouping+0x18>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	0a1b      	lsrs	r3, r3, #8
 800323a:	f003 0307 	and.w	r3, r3, #7
}
 800323e:	4618      	mov	r0, r3
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	e000ed00 	.word	0xe000ed00

0800324c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	6039      	str	r1, [r7, #0]
 8003256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325c:	2b00      	cmp	r3, #0
 800325e:	db0a      	blt.n	8003276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	b2da      	uxtb	r2, r3
 8003264:	490c      	ldr	r1, [pc, #48]	@ (8003298 <__NVIC_SetPriority+0x4c>)
 8003266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326a:	0112      	lsls	r2, r2, #4
 800326c:	b2d2      	uxtb	r2, r2
 800326e:	440b      	add	r3, r1
 8003270:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003274:	e00a      	b.n	800328c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	b2da      	uxtb	r2, r3
 800327a:	4908      	ldr	r1, [pc, #32]	@ (800329c <__NVIC_SetPriority+0x50>)
 800327c:	79fb      	ldrb	r3, [r7, #7]
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	3b04      	subs	r3, #4
 8003284:	0112      	lsls	r2, r2, #4
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	440b      	add	r3, r1
 800328a:	761a      	strb	r2, [r3, #24]
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	e000e100 	.word	0xe000e100
 800329c:	e000ed00 	.word	0xe000ed00

080032a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b089      	sub	sp, #36	@ 0x24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	f1c3 0307 	rsb	r3, r3, #7
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	bf28      	it	cs
 80032be:	2304      	movcs	r3, #4
 80032c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	3304      	adds	r3, #4
 80032c6:	2b06      	cmp	r3, #6
 80032c8:	d902      	bls.n	80032d0 <NVIC_EncodePriority+0x30>
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	3b03      	subs	r3, #3
 80032ce:	e000      	b.n	80032d2 <NVIC_EncodePriority+0x32>
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d4:	f04f 32ff 	mov.w	r2, #4294967295
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43da      	mvns	r2, r3
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	401a      	ands	r2, r3
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032e8:	f04f 31ff 	mov.w	r1, #4294967295
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	fa01 f303 	lsl.w	r3, r1, r3
 80032f2:	43d9      	mvns	r1, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f8:	4313      	orrs	r3, r2
         );
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3724      	adds	r7, #36	@ 0x24
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
	...

08003308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3b01      	subs	r3, #1
 8003314:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003318:	d301      	bcc.n	800331e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800331a:	2301      	movs	r3, #1
 800331c:	e00f      	b.n	800333e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800331e:	4a0a      	ldr	r2, [pc, #40]	@ (8003348 <SysTick_Config+0x40>)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3b01      	subs	r3, #1
 8003324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003326:	210f      	movs	r1, #15
 8003328:	f04f 30ff 	mov.w	r0, #4294967295
 800332c:	f7ff ff8e 	bl	800324c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003330:	4b05      	ldr	r3, [pc, #20]	@ (8003348 <SysTick_Config+0x40>)
 8003332:	2200      	movs	r2, #0
 8003334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003336:	4b04      	ldr	r3, [pc, #16]	@ (8003348 <SysTick_Config+0x40>)
 8003338:	2207      	movs	r2, #7
 800333a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	e000e010 	.word	0xe000e010

0800334c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff ff47 	bl	80031e8 <__NVIC_SetPriorityGrouping>
}
 800335a:	bf00      	nop
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003362:	b580      	push	{r7, lr}
 8003364:	b086      	sub	sp, #24
 8003366:	af00      	add	r7, sp, #0
 8003368:	4603      	mov	r3, r0
 800336a:	60b9      	str	r1, [r7, #8]
 800336c:	607a      	str	r2, [r7, #4]
 800336e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003374:	f7ff ff5c 	bl	8003230 <__NVIC_GetPriorityGrouping>
 8003378:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	68b9      	ldr	r1, [r7, #8]
 800337e:	6978      	ldr	r0, [r7, #20]
 8003380:	f7ff ff8e 	bl	80032a0 <NVIC_EncodePriority>
 8003384:	4602      	mov	r2, r0
 8003386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800338a:	4611      	mov	r1, r2
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff ff5d 	bl	800324c <__NVIC_SetPriority>
}
 8003392:	bf00      	nop
 8003394:	3718      	adds	r7, #24
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b082      	sub	sp, #8
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7ff ffb0 	bl	8003308 <SysTick_Config>
 80033a8:	4603      	mov	r3, r0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b089      	sub	sp, #36	@ 0x24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033be:	2300      	movs	r3, #0
 80033c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ca:	2300      	movs	r3, #0
 80033cc:	61fb      	str	r3, [r7, #28]
 80033ce:	e16b      	b.n	80036a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033d0:	2201      	movs	r2, #1
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	4013      	ands	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	f040 815a 	bne.w	80036a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f003 0303 	and.w	r3, r3, #3
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d005      	beq.n	8003406 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003402:	2b02      	cmp	r3, #2
 8003404:	d130      	bne.n	8003468 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	2203      	movs	r2, #3
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	43db      	mvns	r3, r3
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	4013      	ands	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4313      	orrs	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800343c:	2201      	movs	r2, #1
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	43db      	mvns	r3, r3
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	4013      	ands	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	091b      	lsrs	r3, r3, #4
 8003452:	f003 0201 	and.w	r2, r3, #1
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	4313      	orrs	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 0303 	and.w	r3, r3, #3
 8003470:	2b03      	cmp	r3, #3
 8003472:	d017      	beq.n	80034a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	2203      	movs	r2, #3
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	43db      	mvns	r3, r3
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	4013      	ands	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4313      	orrs	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f003 0303 	and.w	r3, r3, #3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d123      	bne.n	80034f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	08da      	lsrs	r2, r3, #3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3208      	adds	r2, #8
 80034b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	220f      	movs	r2, #15
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	43db      	mvns	r3, r3
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4013      	ands	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	691a      	ldr	r2, [r3, #16]
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	08da      	lsrs	r2, r3, #3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3208      	adds	r2, #8
 80034f2:	69b9      	ldr	r1, [r7, #24]
 80034f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	2203      	movs	r2, #3
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	43db      	mvns	r3, r3
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	4013      	ands	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 0203 	and.w	r2, r3, #3
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4313      	orrs	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 80b4 	beq.w	80036a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800353a:	2300      	movs	r3, #0
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	4b60      	ldr	r3, [pc, #384]	@ (80036c0 <HAL_GPIO_Init+0x30c>)
 8003540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003542:	4a5f      	ldr	r2, [pc, #380]	@ (80036c0 <HAL_GPIO_Init+0x30c>)
 8003544:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003548:	6453      	str	r3, [r2, #68]	@ 0x44
 800354a:	4b5d      	ldr	r3, [pc, #372]	@ (80036c0 <HAL_GPIO_Init+0x30c>)
 800354c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003556:	4a5b      	ldr	r2, [pc, #364]	@ (80036c4 <HAL_GPIO_Init+0x310>)
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	089b      	lsrs	r3, r3, #2
 800355c:	3302      	adds	r3, #2
 800355e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003562:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	220f      	movs	r2, #15
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	43db      	mvns	r3, r3
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	4013      	ands	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a52      	ldr	r2, [pc, #328]	@ (80036c8 <HAL_GPIO_Init+0x314>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d02b      	beq.n	80035da <HAL_GPIO_Init+0x226>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a51      	ldr	r2, [pc, #324]	@ (80036cc <HAL_GPIO_Init+0x318>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d025      	beq.n	80035d6 <HAL_GPIO_Init+0x222>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a50      	ldr	r2, [pc, #320]	@ (80036d0 <HAL_GPIO_Init+0x31c>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d01f      	beq.n	80035d2 <HAL_GPIO_Init+0x21e>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a4f      	ldr	r2, [pc, #316]	@ (80036d4 <HAL_GPIO_Init+0x320>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d019      	beq.n	80035ce <HAL_GPIO_Init+0x21a>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a4e      	ldr	r2, [pc, #312]	@ (80036d8 <HAL_GPIO_Init+0x324>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d013      	beq.n	80035ca <HAL_GPIO_Init+0x216>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a4d      	ldr	r2, [pc, #308]	@ (80036dc <HAL_GPIO_Init+0x328>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d00d      	beq.n	80035c6 <HAL_GPIO_Init+0x212>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a4c      	ldr	r2, [pc, #304]	@ (80036e0 <HAL_GPIO_Init+0x32c>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d007      	beq.n	80035c2 <HAL_GPIO_Init+0x20e>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a4b      	ldr	r2, [pc, #300]	@ (80036e4 <HAL_GPIO_Init+0x330>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d101      	bne.n	80035be <HAL_GPIO_Init+0x20a>
 80035ba:	2307      	movs	r3, #7
 80035bc:	e00e      	b.n	80035dc <HAL_GPIO_Init+0x228>
 80035be:	2308      	movs	r3, #8
 80035c0:	e00c      	b.n	80035dc <HAL_GPIO_Init+0x228>
 80035c2:	2306      	movs	r3, #6
 80035c4:	e00a      	b.n	80035dc <HAL_GPIO_Init+0x228>
 80035c6:	2305      	movs	r3, #5
 80035c8:	e008      	b.n	80035dc <HAL_GPIO_Init+0x228>
 80035ca:	2304      	movs	r3, #4
 80035cc:	e006      	b.n	80035dc <HAL_GPIO_Init+0x228>
 80035ce:	2303      	movs	r3, #3
 80035d0:	e004      	b.n	80035dc <HAL_GPIO_Init+0x228>
 80035d2:	2302      	movs	r3, #2
 80035d4:	e002      	b.n	80035dc <HAL_GPIO_Init+0x228>
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <HAL_GPIO_Init+0x228>
 80035da:	2300      	movs	r3, #0
 80035dc:	69fa      	ldr	r2, [r7, #28]
 80035de:	f002 0203 	and.w	r2, r2, #3
 80035e2:	0092      	lsls	r2, r2, #2
 80035e4:	4093      	lsls	r3, r2
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035ec:	4935      	ldr	r1, [pc, #212]	@ (80036c4 <HAL_GPIO_Init+0x310>)
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	089b      	lsrs	r3, r3, #2
 80035f2:	3302      	adds	r3, #2
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035fa:	4b3b      	ldr	r3, [pc, #236]	@ (80036e8 <HAL_GPIO_Init+0x334>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	43db      	mvns	r3, r3
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	4013      	ands	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	4313      	orrs	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800361e:	4a32      	ldr	r2, [pc, #200]	@ (80036e8 <HAL_GPIO_Init+0x334>)
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003624:	4b30      	ldr	r3, [pc, #192]	@ (80036e8 <HAL_GPIO_Init+0x334>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	43db      	mvns	r3, r3
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4013      	ands	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	4313      	orrs	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003648:	4a27      	ldr	r2, [pc, #156]	@ (80036e8 <HAL_GPIO_Init+0x334>)
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800364e:	4b26      	ldr	r3, [pc, #152]	@ (80036e8 <HAL_GPIO_Init+0x334>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	43db      	mvns	r3, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4013      	ands	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	4313      	orrs	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003672:	4a1d      	ldr	r2, [pc, #116]	@ (80036e8 <HAL_GPIO_Init+0x334>)
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003678:	4b1b      	ldr	r3, [pc, #108]	@ (80036e8 <HAL_GPIO_Init+0x334>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	43db      	mvns	r3, r3
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	4013      	ands	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	4313      	orrs	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800369c:	4a12      	ldr	r2, [pc, #72]	@ (80036e8 <HAL_GPIO_Init+0x334>)
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	3301      	adds	r3, #1
 80036a6:	61fb      	str	r3, [r7, #28]
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	2b0f      	cmp	r3, #15
 80036ac:	f67f ae90 	bls.w	80033d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036b0:	bf00      	nop
 80036b2:	bf00      	nop
 80036b4:	3724      	adds	r7, #36	@ 0x24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40023800 	.word	0x40023800
 80036c4:	40013800 	.word	0x40013800
 80036c8:	40020000 	.word	0x40020000
 80036cc:	40020400 	.word	0x40020400
 80036d0:	40020800 	.word	0x40020800
 80036d4:	40020c00 	.word	0x40020c00
 80036d8:	40021000 	.word	0x40021000
 80036dc:	40021400 	.word	0x40021400
 80036e0:	40021800 	.word	0x40021800
 80036e4:	40021c00 	.word	0x40021c00
 80036e8:	40013c00 	.word	0x40013c00

080036ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	460b      	mov	r3, r1
 80036f6:	807b      	strh	r3, [r7, #2]
 80036f8:	4613      	mov	r3, r2
 80036fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036fc:	787b      	ldrb	r3, [r7, #1]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003702:	887a      	ldrh	r2, [r7, #2]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003708:	e003      	b.n	8003712 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800370a:	887b      	ldrh	r3, [r7, #2]
 800370c:	041a      	lsls	r2, r3, #16
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	619a      	str	r2, [r3, #24]
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
	...

08003720 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e267      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d075      	beq.n	800382a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800373e:	4b88      	ldr	r3, [pc, #544]	@ (8003960 <HAL_RCC_OscConfig+0x240>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 030c 	and.w	r3, r3, #12
 8003746:	2b04      	cmp	r3, #4
 8003748:	d00c      	beq.n	8003764 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800374a:	4b85      	ldr	r3, [pc, #532]	@ (8003960 <HAL_RCC_OscConfig+0x240>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003752:	2b08      	cmp	r3, #8
 8003754:	d112      	bne.n	800377c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003756:	4b82      	ldr	r3, [pc, #520]	@ (8003960 <HAL_RCC_OscConfig+0x240>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800375e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003762:	d10b      	bne.n	800377c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003764:	4b7e      	ldr	r3, [pc, #504]	@ (8003960 <HAL_RCC_OscConfig+0x240>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d05b      	beq.n	8003828 <HAL_RCC_OscConfig+0x108>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d157      	bne.n	8003828 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e242      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003784:	d106      	bne.n	8003794 <HAL_RCC_OscConfig+0x74>
 8003786:	4b76      	ldr	r3, [pc, #472]	@ (8003960 <HAL_RCC_OscConfig+0x240>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a75      	ldr	r2, [pc, #468]	@ (8003960 <HAL_RCC_OscConfig+0x240>)
 800378c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	e01d      	b.n	80037d0 <HAL_RCC_OscConfig+0xb0>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800379c:	d10c      	bne.n	80037b8 <HAL_RCC_OscConfig+0x98>
 800379e:	4b70      	ldr	r3, [pc, #448]	@ (8003960 <HAL_RCC_OscConfig+0x240>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a6f      	ldr	r2, [pc, #444]	@ (8003960 <HAL_RCC_OscConfig+0x240>)
 80037a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	4b6d      	ldr	r3, [pc, #436]	@ (8003960 <HAL_RCC_OscConfig+0x240>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a6c      	ldr	r2, [pc, #432]	@ (8003960 <HAL_RCC_OscConfig+0x240>)
 80037b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	e00b      	b.n	80037d0 <HAL_RCC_OscConfig+0xb0>
 80037b8:	4b69      	ldr	r3, [pc, #420]	@ (8003960 <HAL_RCC_OscConfig+0x240>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a68      	ldr	r2, [pc, #416]	@ (8003960 <HAL_RCC_OscConfig+0x240>)
 80037be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037c2:	6013      	str	r3, [r2, #0]
 80037c4:	4b66      	ldr	r3, [pc, #408]	@ (8003960 <HAL_RCC_OscConfig+0x240>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a65      	ldr	r2, [pc, #404]	@ (8003960 <HAL_RCC_OscConfig+0x240>)
 80037ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d013      	beq.n	8003800 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d8:	f7ff f90a 	bl	80029f0 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037e0:	f7ff f906 	bl	80029f0 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b64      	cmp	r3, #100	@ 0x64
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e207      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f2:	4b5b      	ldr	r3, [pc, #364]	@ (8003960 <HAL_RCC_OscConfig+0x240>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0f0      	beq.n	80037e0 <HAL_RCC_OscConfig+0xc0>
 80037fe:	e014      	b.n	800382a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003800:	f7ff f8f6 	bl	80029f0 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003808:	f7ff f8f2 	bl	80029f0 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b64      	cmp	r3, #100	@ 0x64
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e1f3      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800381a:	4b51      	ldr	r3, [pc, #324]	@ (8003960 <HAL_RCC_OscConfig+0x240>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0xe8>
 8003826:	e000      	b.n	800382a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d063      	beq.n	80038fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003836:	4b4a      	ldr	r3, [pc, #296]	@ (8003960 <HAL_RCC_OscConfig+0x240>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 030c 	and.w	r3, r3, #12
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00b      	beq.n	800385a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003842:	4b47      	ldr	r3, [pc, #284]	@ (8003960 <HAL_RCC_OscConfig+0x240>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800384a:	2b08      	cmp	r3, #8
 800384c:	d11c      	bne.n	8003888 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800384e:	4b44      	ldr	r3, [pc, #272]	@ (8003960 <HAL_RCC_OscConfig+0x240>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d116      	bne.n	8003888 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800385a:	4b41      	ldr	r3, [pc, #260]	@ (8003960 <HAL_RCC_OscConfig+0x240>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d005      	beq.n	8003872 <HAL_RCC_OscConfig+0x152>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d001      	beq.n	8003872 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e1c7      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003872:	4b3b      	ldr	r3, [pc, #236]	@ (8003960 <HAL_RCC_OscConfig+0x240>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	4937      	ldr	r1, [pc, #220]	@ (8003960 <HAL_RCC_OscConfig+0x240>)
 8003882:	4313      	orrs	r3, r2
 8003884:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003886:	e03a      	b.n	80038fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d020      	beq.n	80038d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003890:	4b34      	ldr	r3, [pc, #208]	@ (8003964 <HAL_RCC_OscConfig+0x244>)
 8003892:	2201      	movs	r2, #1
 8003894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003896:	f7ff f8ab 	bl	80029f0 <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800389c:	e008      	b.n	80038b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800389e:	f7ff f8a7 	bl	80029f0 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e1a8      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b0:	4b2b      	ldr	r3, [pc, #172]	@ (8003960 <HAL_RCC_OscConfig+0x240>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0f0      	beq.n	800389e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038bc:	4b28      	ldr	r3, [pc, #160]	@ (8003960 <HAL_RCC_OscConfig+0x240>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	4925      	ldr	r1, [pc, #148]	@ (8003960 <HAL_RCC_OscConfig+0x240>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	600b      	str	r3, [r1, #0]
 80038d0:	e015      	b.n	80038fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038d2:	4b24      	ldr	r3, [pc, #144]	@ (8003964 <HAL_RCC_OscConfig+0x244>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d8:	f7ff f88a 	bl	80029f0 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038e0:	f7ff f886 	bl	80029f0 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e187      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003960 <HAL_RCC_OscConfig+0x240>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1f0      	bne.n	80038e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b00      	cmp	r3, #0
 8003908:	d036      	beq.n	8003978 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d016      	beq.n	8003940 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003912:	4b15      	ldr	r3, [pc, #84]	@ (8003968 <HAL_RCC_OscConfig+0x248>)
 8003914:	2201      	movs	r2, #1
 8003916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003918:	f7ff f86a 	bl	80029f0 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003920:	f7ff f866 	bl	80029f0 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e167      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003932:	4b0b      	ldr	r3, [pc, #44]	@ (8003960 <HAL_RCC_OscConfig+0x240>)
 8003934:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d0f0      	beq.n	8003920 <HAL_RCC_OscConfig+0x200>
 800393e:	e01b      	b.n	8003978 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003940:	4b09      	ldr	r3, [pc, #36]	@ (8003968 <HAL_RCC_OscConfig+0x248>)
 8003942:	2200      	movs	r2, #0
 8003944:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003946:	f7ff f853 	bl	80029f0 <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800394c:	e00e      	b.n	800396c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800394e:	f7ff f84f 	bl	80029f0 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d907      	bls.n	800396c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e150      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
 8003960:	40023800 	.word	0x40023800
 8003964:	42470000 	.word	0x42470000
 8003968:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800396c:	4b88      	ldr	r3, [pc, #544]	@ (8003b90 <HAL_RCC_OscConfig+0x470>)
 800396e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1ea      	bne.n	800394e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 8097 	beq.w	8003ab4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003986:	2300      	movs	r3, #0
 8003988:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800398a:	4b81      	ldr	r3, [pc, #516]	@ (8003b90 <HAL_RCC_OscConfig+0x470>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10f      	bne.n	80039b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003996:	2300      	movs	r3, #0
 8003998:	60bb      	str	r3, [r7, #8]
 800399a:	4b7d      	ldr	r3, [pc, #500]	@ (8003b90 <HAL_RCC_OscConfig+0x470>)
 800399c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399e:	4a7c      	ldr	r2, [pc, #496]	@ (8003b90 <HAL_RCC_OscConfig+0x470>)
 80039a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80039a6:	4b7a      	ldr	r3, [pc, #488]	@ (8003b90 <HAL_RCC_OscConfig+0x470>)
 80039a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ae:	60bb      	str	r3, [r7, #8]
 80039b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039b2:	2301      	movs	r3, #1
 80039b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b6:	4b77      	ldr	r3, [pc, #476]	@ (8003b94 <HAL_RCC_OscConfig+0x474>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d118      	bne.n	80039f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039c2:	4b74      	ldr	r3, [pc, #464]	@ (8003b94 <HAL_RCC_OscConfig+0x474>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a73      	ldr	r2, [pc, #460]	@ (8003b94 <HAL_RCC_OscConfig+0x474>)
 80039c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ce:	f7ff f80f 	bl	80029f0 <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d4:	e008      	b.n	80039e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d6:	f7ff f80b 	bl	80029f0 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e10c      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e8:	4b6a      	ldr	r3, [pc, #424]	@ (8003b94 <HAL_RCC_OscConfig+0x474>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0f0      	beq.n	80039d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d106      	bne.n	8003a0a <HAL_RCC_OscConfig+0x2ea>
 80039fc:	4b64      	ldr	r3, [pc, #400]	@ (8003b90 <HAL_RCC_OscConfig+0x470>)
 80039fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a00:	4a63      	ldr	r2, [pc, #396]	@ (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003a02:	f043 0301 	orr.w	r3, r3, #1
 8003a06:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a08:	e01c      	b.n	8003a44 <HAL_RCC_OscConfig+0x324>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	2b05      	cmp	r3, #5
 8003a10:	d10c      	bne.n	8003a2c <HAL_RCC_OscConfig+0x30c>
 8003a12:	4b5f      	ldr	r3, [pc, #380]	@ (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a16:	4a5e      	ldr	r2, [pc, #376]	@ (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003a18:	f043 0304 	orr.w	r3, r3, #4
 8003a1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a1e:	4b5c      	ldr	r3, [pc, #368]	@ (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a22:	4a5b      	ldr	r2, [pc, #364]	@ (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003a24:	f043 0301 	orr.w	r3, r3, #1
 8003a28:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a2a:	e00b      	b.n	8003a44 <HAL_RCC_OscConfig+0x324>
 8003a2c:	4b58      	ldr	r3, [pc, #352]	@ (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a30:	4a57      	ldr	r2, [pc, #348]	@ (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003a32:	f023 0301 	bic.w	r3, r3, #1
 8003a36:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a38:	4b55      	ldr	r3, [pc, #340]	@ (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a3c:	4a54      	ldr	r2, [pc, #336]	@ (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003a3e:	f023 0304 	bic.w	r3, r3, #4
 8003a42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d015      	beq.n	8003a78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a4c:	f7fe ffd0 	bl	80029f0 <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a52:	e00a      	b.n	8003a6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a54:	f7fe ffcc 	bl	80029f0 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e0cb      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a6a:	4b49      	ldr	r3, [pc, #292]	@ (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0ee      	beq.n	8003a54 <HAL_RCC_OscConfig+0x334>
 8003a76:	e014      	b.n	8003aa2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a78:	f7fe ffba 	bl	80029f0 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a7e:	e00a      	b.n	8003a96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a80:	f7fe ffb6 	bl	80029f0 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e0b5      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a96:	4b3e      	ldr	r3, [pc, #248]	@ (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1ee      	bne.n	8003a80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aa2:	7dfb      	ldrb	r3, [r7, #23]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d105      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aa8:	4b39      	ldr	r3, [pc, #228]	@ (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aac:	4a38      	ldr	r2, [pc, #224]	@ (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003aae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ab2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 80a1 	beq.w	8003c00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003abe:	4b34      	ldr	r3, [pc, #208]	@ (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 030c 	and.w	r3, r3, #12
 8003ac6:	2b08      	cmp	r3, #8
 8003ac8:	d05c      	beq.n	8003b84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d141      	bne.n	8003b56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ad2:	4b31      	ldr	r3, [pc, #196]	@ (8003b98 <HAL_RCC_OscConfig+0x478>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad8:	f7fe ff8a 	bl	80029f0 <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ae0:	f7fe ff86 	bl	80029f0 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e087      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af2:	4b27      	ldr	r3, [pc, #156]	@ (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1f0      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	69da      	ldr	r2, [r3, #28]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0c:	019b      	lsls	r3, r3, #6
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b14:	085b      	lsrs	r3, r3, #1
 8003b16:	3b01      	subs	r3, #1
 8003b18:	041b      	lsls	r3, r3, #16
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b20:	061b      	lsls	r3, r3, #24
 8003b22:	491b      	ldr	r1, [pc, #108]	@ (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b28:	4b1b      	ldr	r3, [pc, #108]	@ (8003b98 <HAL_RCC_OscConfig+0x478>)
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2e:	f7fe ff5f 	bl	80029f0 <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b36:	f7fe ff5b 	bl	80029f0 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e05c      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b48:	4b11      	ldr	r3, [pc, #68]	@ (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0f0      	beq.n	8003b36 <HAL_RCC_OscConfig+0x416>
 8003b54:	e054      	b.n	8003c00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b56:	4b10      	ldr	r3, [pc, #64]	@ (8003b98 <HAL_RCC_OscConfig+0x478>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5c:	f7fe ff48 	bl	80029f0 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b64:	f7fe ff44 	bl	80029f0 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e045      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b76:	4b06      	ldr	r3, [pc, #24]	@ (8003b90 <HAL_RCC_OscConfig+0x470>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1f0      	bne.n	8003b64 <HAL_RCC_OscConfig+0x444>
 8003b82:	e03d      	b.n	8003c00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d107      	bne.n	8003b9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e038      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
 8003b90:	40023800 	.word	0x40023800
 8003b94:	40007000 	.word	0x40007000
 8003b98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b9c:	4b1b      	ldr	r3, [pc, #108]	@ (8003c0c <HAL_RCC_OscConfig+0x4ec>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d028      	beq.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d121      	bne.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d11a      	bne.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003bcc:	4013      	ands	r3, r2
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003bd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d111      	bne.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be2:	085b      	lsrs	r3, r3, #1
 8003be4:	3b01      	subs	r3, #1
 8003be6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d107      	bne.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d001      	beq.n	8003c00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e000      	b.n	8003c02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40023800 	.word	0x40023800

08003c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e0cc      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c24:	4b68      	ldr	r3, [pc, #416]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d90c      	bls.n	8003c4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c32:	4b65      	ldr	r3, [pc, #404]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c3a:	4b63      	ldr	r3, [pc, #396]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d001      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e0b8      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d020      	beq.n	8003c9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d005      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c64:	4b59      	ldr	r3, [pc, #356]	@ (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	4a58      	ldr	r2, [pc, #352]	@ (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003c6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0308 	and.w	r3, r3, #8
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d005      	beq.n	8003c88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c7c:	4b53      	ldr	r3, [pc, #332]	@ (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	4a52      	ldr	r2, [pc, #328]	@ (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003c82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c88:	4b50      	ldr	r3, [pc, #320]	@ (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	494d      	ldr	r1, [pc, #308]	@ (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d044      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d107      	bne.n	8003cbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cae:	4b47      	ldr	r3, [pc, #284]	@ (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d119      	bne.n	8003cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e07f      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d003      	beq.n	8003cce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cca:	2b03      	cmp	r3, #3
 8003ccc:	d107      	bne.n	8003cde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cce:	4b3f      	ldr	r3, [pc, #252]	@ (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d109      	bne.n	8003cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e06f      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cde:	4b3b      	ldr	r3, [pc, #236]	@ (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e067      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cee:	4b37      	ldr	r3, [pc, #220]	@ (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f023 0203 	bic.w	r2, r3, #3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	4934      	ldr	r1, [pc, #208]	@ (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d00:	f7fe fe76 	bl	80029f0 <HAL_GetTick>
 8003d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d06:	e00a      	b.n	8003d1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d08:	f7fe fe72 	bl	80029f0 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e04f      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d1e:	4b2b      	ldr	r3, [pc, #172]	@ (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 020c 	and.w	r2, r3, #12
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d1eb      	bne.n	8003d08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d30:	4b25      	ldr	r3, [pc, #148]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d20c      	bcs.n	8003d58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3e:	4b22      	ldr	r3, [pc, #136]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	b2d2      	uxtb	r2, r2
 8003d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d46:	4b20      	ldr	r3, [pc, #128]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d001      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e032      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d008      	beq.n	8003d76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d64:	4b19      	ldr	r3, [pc, #100]	@ (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	4916      	ldr	r1, [pc, #88]	@ (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d009      	beq.n	8003d96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d82:	4b12      	ldr	r3, [pc, #72]	@ (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	490e      	ldr	r1, [pc, #56]	@ (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d96:	f000 f821 	bl	8003ddc <HAL_RCC_GetSysClockFreq>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	091b      	lsrs	r3, r3, #4
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	490a      	ldr	r1, [pc, #40]	@ (8003dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8003da8:	5ccb      	ldrb	r3, [r1, r3]
 8003daa:	fa22 f303 	lsr.w	r3, r2, r3
 8003dae:	4a09      	ldr	r2, [pc, #36]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003db2:	4b09      	ldr	r3, [pc, #36]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fe fdd6 	bl	8002968 <HAL_InitTick>

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40023c00 	.word	0x40023c00
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	08005c78 	.word	0x08005c78
 8003dd4:	20000000 	.word	0x20000000
 8003dd8:	20000008 	.word	0x20000008

08003ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003de0:	b094      	sub	sp, #80	@ 0x50
 8003de2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003de8:	2300      	movs	r3, #0
 8003dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003dec:	2300      	movs	r3, #0
 8003dee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003df4:	4b79      	ldr	r3, [pc, #484]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 030c 	and.w	r3, r3, #12
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	d00d      	beq.n	8003e1c <HAL_RCC_GetSysClockFreq+0x40>
 8003e00:	2b08      	cmp	r3, #8
 8003e02:	f200 80e1 	bhi.w	8003fc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <HAL_RCC_GetSysClockFreq+0x34>
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	d003      	beq.n	8003e16 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e0e:	e0db      	b.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e10:	4b73      	ldr	r3, [pc, #460]	@ (8003fe0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e12:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003e14:	e0db      	b.n	8003fce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e16:	4b73      	ldr	r3, [pc, #460]	@ (8003fe4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e1a:	e0d8      	b.n	8003fce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e1c:	4b6f      	ldr	r3, [pc, #444]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e24:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e26:	4b6d      	ldr	r3, [pc, #436]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d063      	beq.n	8003efa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e32:	4b6a      	ldr	r3, [pc, #424]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	099b      	lsrs	r3, r3, #6
 8003e38:	2200      	movs	r2, #0
 8003e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e44:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e46:	2300      	movs	r3, #0
 8003e48:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003e4e:	4622      	mov	r2, r4
 8003e50:	462b      	mov	r3, r5
 8003e52:	f04f 0000 	mov.w	r0, #0
 8003e56:	f04f 0100 	mov.w	r1, #0
 8003e5a:	0159      	lsls	r1, r3, #5
 8003e5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e60:	0150      	lsls	r0, r2, #5
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	4621      	mov	r1, r4
 8003e68:	1a51      	subs	r1, r2, r1
 8003e6a:	6139      	str	r1, [r7, #16]
 8003e6c:	4629      	mov	r1, r5
 8003e6e:	eb63 0301 	sbc.w	r3, r3, r1
 8003e72:	617b      	str	r3, [r7, #20]
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	f04f 0300 	mov.w	r3, #0
 8003e7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e80:	4659      	mov	r1, fp
 8003e82:	018b      	lsls	r3, r1, #6
 8003e84:	4651      	mov	r1, sl
 8003e86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e8a:	4651      	mov	r1, sl
 8003e8c:	018a      	lsls	r2, r1, #6
 8003e8e:	4651      	mov	r1, sl
 8003e90:	ebb2 0801 	subs.w	r8, r2, r1
 8003e94:	4659      	mov	r1, fp
 8003e96:	eb63 0901 	sbc.w	r9, r3, r1
 8003e9a:	f04f 0200 	mov.w	r2, #0
 8003e9e:	f04f 0300 	mov.w	r3, #0
 8003ea2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ea6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003eaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003eae:	4690      	mov	r8, r2
 8003eb0:	4699      	mov	r9, r3
 8003eb2:	4623      	mov	r3, r4
 8003eb4:	eb18 0303 	adds.w	r3, r8, r3
 8003eb8:	60bb      	str	r3, [r7, #8]
 8003eba:	462b      	mov	r3, r5
 8003ebc:	eb49 0303 	adc.w	r3, r9, r3
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	f04f 0200 	mov.w	r2, #0
 8003ec6:	f04f 0300 	mov.w	r3, #0
 8003eca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ece:	4629      	mov	r1, r5
 8003ed0:	024b      	lsls	r3, r1, #9
 8003ed2:	4621      	mov	r1, r4
 8003ed4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ed8:	4621      	mov	r1, r4
 8003eda:	024a      	lsls	r2, r1, #9
 8003edc:	4610      	mov	r0, r2
 8003ede:	4619      	mov	r1, r3
 8003ee0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ee6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ee8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003eec:	f7fc f9c0 	bl	8000270 <__aeabi_uldivmod>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ef8:	e058      	b.n	8003fac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003efa:	4b38      	ldr	r3, [pc, #224]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	099b      	lsrs	r3, r3, #6
 8003f00:	2200      	movs	r2, #0
 8003f02:	4618      	mov	r0, r3
 8003f04:	4611      	mov	r1, r2
 8003f06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f0a:	623b      	str	r3, [r7, #32]
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f14:	4642      	mov	r2, r8
 8003f16:	464b      	mov	r3, r9
 8003f18:	f04f 0000 	mov.w	r0, #0
 8003f1c:	f04f 0100 	mov.w	r1, #0
 8003f20:	0159      	lsls	r1, r3, #5
 8003f22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f26:	0150      	lsls	r0, r2, #5
 8003f28:	4602      	mov	r2, r0
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	4641      	mov	r1, r8
 8003f2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f32:	4649      	mov	r1, r9
 8003f34:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f38:	f04f 0200 	mov.w	r2, #0
 8003f3c:	f04f 0300 	mov.w	r3, #0
 8003f40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f4c:	ebb2 040a 	subs.w	r4, r2, sl
 8003f50:	eb63 050b 	sbc.w	r5, r3, fp
 8003f54:	f04f 0200 	mov.w	r2, #0
 8003f58:	f04f 0300 	mov.w	r3, #0
 8003f5c:	00eb      	lsls	r3, r5, #3
 8003f5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f62:	00e2      	lsls	r2, r4, #3
 8003f64:	4614      	mov	r4, r2
 8003f66:	461d      	mov	r5, r3
 8003f68:	4643      	mov	r3, r8
 8003f6a:	18e3      	adds	r3, r4, r3
 8003f6c:	603b      	str	r3, [r7, #0]
 8003f6e:	464b      	mov	r3, r9
 8003f70:	eb45 0303 	adc.w	r3, r5, r3
 8003f74:	607b      	str	r3, [r7, #4]
 8003f76:	f04f 0200 	mov.w	r2, #0
 8003f7a:	f04f 0300 	mov.w	r3, #0
 8003f7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f82:	4629      	mov	r1, r5
 8003f84:	028b      	lsls	r3, r1, #10
 8003f86:	4621      	mov	r1, r4
 8003f88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f8c:	4621      	mov	r1, r4
 8003f8e:	028a      	lsls	r2, r1, #10
 8003f90:	4610      	mov	r0, r2
 8003f92:	4619      	mov	r1, r3
 8003f94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f96:	2200      	movs	r2, #0
 8003f98:	61bb      	str	r3, [r7, #24]
 8003f9a:	61fa      	str	r2, [r7, #28]
 8003f9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fa0:	f7fc f966 	bl	8000270 <__aeabi_uldivmod>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4613      	mov	r3, r2
 8003faa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fac:	4b0b      	ldr	r3, [pc, #44]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	0c1b      	lsrs	r3, r3, #16
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003fbc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003fbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fc6:	e002      	b.n	8003fce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fc8:	4b05      	ldr	r3, [pc, #20]	@ (8003fe0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003fca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3750      	adds	r7, #80	@ 0x50
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fda:	bf00      	nop
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	00f42400 	.word	0x00f42400
 8003fe4:	007a1200 	.word	0x007a1200

08003fe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fec:	4b03      	ldr	r3, [pc, #12]	@ (8003ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8003fee:	681b      	ldr	r3, [r3, #0]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	20000000 	.word	0x20000000

08004000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004004:	f7ff fff0 	bl	8003fe8 <HAL_RCC_GetHCLKFreq>
 8004008:	4602      	mov	r2, r0
 800400a:	4b05      	ldr	r3, [pc, #20]	@ (8004020 <HAL_RCC_GetPCLK1Freq+0x20>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	0a9b      	lsrs	r3, r3, #10
 8004010:	f003 0307 	and.w	r3, r3, #7
 8004014:	4903      	ldr	r1, [pc, #12]	@ (8004024 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004016:	5ccb      	ldrb	r3, [r1, r3]
 8004018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800401c:	4618      	mov	r0, r3
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40023800 	.word	0x40023800
 8004024:	08005c88 	.word	0x08005c88

08004028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800402c:	f7ff ffdc 	bl	8003fe8 <HAL_RCC_GetHCLKFreq>
 8004030:	4602      	mov	r2, r0
 8004032:	4b05      	ldr	r3, [pc, #20]	@ (8004048 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	0b5b      	lsrs	r3, r3, #13
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	4903      	ldr	r1, [pc, #12]	@ (800404c <HAL_RCC_GetPCLK2Freq+0x24>)
 800403e:	5ccb      	ldrb	r3, [r1, r3]
 8004040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004044:	4618      	mov	r0, r3
 8004046:	bd80      	pop	{r7, pc}
 8004048:	40023800 	.word	0x40023800
 800404c:	08005c88 	.word	0x08005c88

08004050 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e034      	b.n	80040d0 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d106      	bne.n	8004080 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f7fc fbb2 	bl	80007e4 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	3308      	adds	r3, #8
 8004088:	4619      	mov	r1, r3
 800408a:	4610      	mov	r0, r2
 800408c:	f000 fde2 	bl	8004c54 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6818      	ldr	r0, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	461a      	mov	r2, r3
 800409a:	68b9      	ldr	r1, [r7, #8]
 800409c:	f000 fe2c 	bl	8004cf8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6858      	ldr	r0, [r3, #4]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ac:	6879      	ldr	r1, [r7, #4]
 80040ae:	f000 fe61 	bl	8004d74 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	6892      	ldr	r2, [r2, #8]
 80040ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	6892      	ldr	r2, [r2, #8]
 80040c6:	f041 0101 	orr.w	r1, r1, #1
 80040ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e041      	b.n	800416e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d106      	bne.n	8004104 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7fe fb52 	bl	80027a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3304      	adds	r3, #4
 8004114:	4619      	mov	r1, r3
 8004116:	4610      	mov	r0, r2
 8004118:	f000 f8be 	bl	8004298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
	...

08004178 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b01      	cmp	r3, #1
 800418a:	d001      	beq.n	8004190 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e046      	b.n	800421e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2202      	movs	r2, #2
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a23      	ldr	r2, [pc, #140]	@ (800422c <HAL_TIM_Base_Start+0xb4>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d022      	beq.n	80041e8 <HAL_TIM_Base_Start+0x70>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041aa:	d01d      	beq.n	80041e8 <HAL_TIM_Base_Start+0x70>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a1f      	ldr	r2, [pc, #124]	@ (8004230 <HAL_TIM_Base_Start+0xb8>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d018      	beq.n	80041e8 <HAL_TIM_Base_Start+0x70>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a1e      	ldr	r2, [pc, #120]	@ (8004234 <HAL_TIM_Base_Start+0xbc>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d013      	beq.n	80041e8 <HAL_TIM_Base_Start+0x70>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a1c      	ldr	r2, [pc, #112]	@ (8004238 <HAL_TIM_Base_Start+0xc0>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d00e      	beq.n	80041e8 <HAL_TIM_Base_Start+0x70>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a1b      	ldr	r2, [pc, #108]	@ (800423c <HAL_TIM_Base_Start+0xc4>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d009      	beq.n	80041e8 <HAL_TIM_Base_Start+0x70>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a19      	ldr	r2, [pc, #100]	@ (8004240 <HAL_TIM_Base_Start+0xc8>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d004      	beq.n	80041e8 <HAL_TIM_Base_Start+0x70>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a18      	ldr	r2, [pc, #96]	@ (8004244 <HAL_TIM_Base_Start+0xcc>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d111      	bne.n	800420c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2b06      	cmp	r3, #6
 80041f8:	d010      	beq.n	800421c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f042 0201 	orr.w	r2, r2, #1
 8004208:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800420a:	e007      	b.n	800421c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f042 0201 	orr.w	r2, r2, #1
 800421a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	40010000 	.word	0x40010000
 8004230:	40000400 	.word	0x40000400
 8004234:	40000800 	.word	0x40000800
 8004238:	40000c00 	.word	0x40000c00
 800423c:	40010400 	.word	0x40010400
 8004240:	40014000 	.word	0x40014000
 8004244:	40001800 	.word	0x40001800

08004248 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6a1a      	ldr	r2, [r3, #32]
 8004256:	f241 1311 	movw	r3, #4369	@ 0x1111
 800425a:	4013      	ands	r3, r2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10f      	bne.n	8004280 <HAL_TIM_Base_Stop+0x38>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6a1a      	ldr	r2, [r3, #32]
 8004266:	f240 4344 	movw	r3, #1092	@ 0x444
 800426a:	4013      	ands	r3, r2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d107      	bne.n	8004280 <HAL_TIM_Base_Stop+0x38>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 0201 	bic.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
	...

08004298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a40      	ldr	r2, [pc, #256]	@ (80043ac <TIM_Base_SetConfig+0x114>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d013      	beq.n	80042d8 <TIM_Base_SetConfig+0x40>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042b6:	d00f      	beq.n	80042d8 <TIM_Base_SetConfig+0x40>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a3d      	ldr	r2, [pc, #244]	@ (80043b0 <TIM_Base_SetConfig+0x118>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d00b      	beq.n	80042d8 <TIM_Base_SetConfig+0x40>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a3c      	ldr	r2, [pc, #240]	@ (80043b4 <TIM_Base_SetConfig+0x11c>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d007      	beq.n	80042d8 <TIM_Base_SetConfig+0x40>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a3b      	ldr	r2, [pc, #236]	@ (80043b8 <TIM_Base_SetConfig+0x120>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d003      	beq.n	80042d8 <TIM_Base_SetConfig+0x40>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a3a      	ldr	r2, [pc, #232]	@ (80043bc <TIM_Base_SetConfig+0x124>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d108      	bne.n	80042ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a2f      	ldr	r2, [pc, #188]	@ (80043ac <TIM_Base_SetConfig+0x114>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d02b      	beq.n	800434a <TIM_Base_SetConfig+0xb2>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042f8:	d027      	beq.n	800434a <TIM_Base_SetConfig+0xb2>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a2c      	ldr	r2, [pc, #176]	@ (80043b0 <TIM_Base_SetConfig+0x118>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d023      	beq.n	800434a <TIM_Base_SetConfig+0xb2>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a2b      	ldr	r2, [pc, #172]	@ (80043b4 <TIM_Base_SetConfig+0x11c>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d01f      	beq.n	800434a <TIM_Base_SetConfig+0xb2>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a2a      	ldr	r2, [pc, #168]	@ (80043b8 <TIM_Base_SetConfig+0x120>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d01b      	beq.n	800434a <TIM_Base_SetConfig+0xb2>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a29      	ldr	r2, [pc, #164]	@ (80043bc <TIM_Base_SetConfig+0x124>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d017      	beq.n	800434a <TIM_Base_SetConfig+0xb2>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a28      	ldr	r2, [pc, #160]	@ (80043c0 <TIM_Base_SetConfig+0x128>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d013      	beq.n	800434a <TIM_Base_SetConfig+0xb2>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a27      	ldr	r2, [pc, #156]	@ (80043c4 <TIM_Base_SetConfig+0x12c>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d00f      	beq.n	800434a <TIM_Base_SetConfig+0xb2>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a26      	ldr	r2, [pc, #152]	@ (80043c8 <TIM_Base_SetConfig+0x130>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d00b      	beq.n	800434a <TIM_Base_SetConfig+0xb2>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a25      	ldr	r2, [pc, #148]	@ (80043cc <TIM_Base_SetConfig+0x134>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d007      	beq.n	800434a <TIM_Base_SetConfig+0xb2>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a24      	ldr	r2, [pc, #144]	@ (80043d0 <TIM_Base_SetConfig+0x138>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d003      	beq.n	800434a <TIM_Base_SetConfig+0xb2>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a23      	ldr	r2, [pc, #140]	@ (80043d4 <TIM_Base_SetConfig+0x13c>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d108      	bne.n	800435c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	4313      	orrs	r3, r2
 800435a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	4313      	orrs	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a0a      	ldr	r2, [pc, #40]	@ (80043ac <TIM_Base_SetConfig+0x114>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d003      	beq.n	8004390 <TIM_Base_SetConfig+0xf8>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a0c      	ldr	r2, [pc, #48]	@ (80043bc <TIM_Base_SetConfig+0x124>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d103      	bne.n	8004398 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	691a      	ldr	r2, [r3, #16]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	615a      	str	r2, [r3, #20]
}
 800439e:	bf00      	nop
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	40010000 	.word	0x40010000
 80043b0:	40000400 	.word	0x40000400
 80043b4:	40000800 	.word	0x40000800
 80043b8:	40000c00 	.word	0x40000c00
 80043bc:	40010400 	.word	0x40010400
 80043c0:	40014000 	.word	0x40014000
 80043c4:	40014400 	.word	0x40014400
 80043c8:	40014800 	.word	0x40014800
 80043cc:	40001800 	.word	0x40001800
 80043d0:	40001c00 	.word	0x40001c00
 80043d4:	40002000 	.word	0x40002000

080043d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d101      	bne.n	80043f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043ec:	2302      	movs	r3, #2
 80043ee:	e05a      	b.n	80044a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2202      	movs	r2, #2
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004416:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	4313      	orrs	r3, r2
 8004420:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a21      	ldr	r2, [pc, #132]	@ (80044b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d022      	beq.n	800447a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800443c:	d01d      	beq.n	800447a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a1d      	ldr	r2, [pc, #116]	@ (80044b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d018      	beq.n	800447a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a1b      	ldr	r2, [pc, #108]	@ (80044bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d013      	beq.n	800447a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a1a      	ldr	r2, [pc, #104]	@ (80044c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d00e      	beq.n	800447a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a18      	ldr	r2, [pc, #96]	@ (80044c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d009      	beq.n	800447a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a17      	ldr	r2, [pc, #92]	@ (80044c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d004      	beq.n	800447a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a15      	ldr	r2, [pc, #84]	@ (80044cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d10c      	bne.n	8004494 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004480:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	4313      	orrs	r3, r2
 800448a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68ba      	ldr	r2, [r7, #8]
 8004492:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3714      	adds	r7, #20
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	40010000 	.word	0x40010000
 80044b8:	40000400 	.word	0x40000400
 80044bc:	40000800 	.word	0x40000800
 80044c0:	40000c00 	.word	0x40000c00
 80044c4:	40010400 	.word	0x40010400
 80044c8:	40014000 	.word	0x40014000
 80044cc:	40001800 	.word	0x40001800

080044d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e03f      	b.n	8004562 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d106      	bne.n	80044fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7fe f9a2 	bl	8002840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2224      	movs	r2, #36	@ 0x24
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004512:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f929 	bl	800476c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	691a      	ldr	r2, [r3, #16]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004528:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	695a      	ldr	r2, [r3, #20]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004538:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68da      	ldr	r2, [r3, #12]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004548:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2220      	movs	r2, #32
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2220      	movs	r2, #32
 800455c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b08a      	sub	sp, #40	@ 0x28
 800456e:	af02      	add	r7, sp, #8
 8004570:	60f8      	str	r0, [r7, #12]
 8004572:	60b9      	str	r1, [r7, #8]
 8004574:	603b      	str	r3, [r7, #0]
 8004576:	4613      	mov	r3, r2
 8004578:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800457a:	2300      	movs	r3, #0
 800457c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b20      	cmp	r3, #32
 8004588:	d17c      	bne.n	8004684 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d002      	beq.n	8004596 <HAL_UART_Transmit+0x2c>
 8004590:	88fb      	ldrh	r3, [r7, #6]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e075      	b.n	8004686 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d101      	bne.n	80045a8 <HAL_UART_Transmit+0x3e>
 80045a4:	2302      	movs	r3, #2
 80045a6:	e06e      	b.n	8004686 <HAL_UART_Transmit+0x11c>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2221      	movs	r2, #33	@ 0x21
 80045ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045be:	f7fe fa17 	bl	80029f0 <HAL_GetTick>
 80045c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	88fa      	ldrh	r2, [r7, #6]
 80045c8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	88fa      	ldrh	r2, [r7, #6]
 80045ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045d8:	d108      	bne.n	80045ec <HAL_UART_Transmit+0x82>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d104      	bne.n	80045ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80045e2:	2300      	movs	r3, #0
 80045e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	61bb      	str	r3, [r7, #24]
 80045ea:	e003      	b.n	80045f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045f0:	2300      	movs	r3, #0
 80045f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80045fc:	e02a      	b.n	8004654 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	2200      	movs	r2, #0
 8004606:	2180      	movs	r1, #128	@ 0x80
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 f840 	bl	800468e <UART_WaitOnFlagUntilTimeout>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e036      	b.n	8004686 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10b      	bne.n	8004636 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	881b      	ldrh	r3, [r3, #0]
 8004622:	461a      	mov	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800462c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	3302      	adds	r3, #2
 8004632:	61bb      	str	r3, [r7, #24]
 8004634:	e007      	b.n	8004646 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	781a      	ldrb	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	3301      	adds	r3, #1
 8004644:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800464a:	b29b      	uxth	r3, r3
 800464c:	3b01      	subs	r3, #1
 800464e:	b29a      	uxth	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004658:	b29b      	uxth	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1cf      	bne.n	80045fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	2200      	movs	r2, #0
 8004666:	2140      	movs	r1, #64	@ 0x40
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 f810 	bl	800468e <UART_WaitOnFlagUntilTimeout>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e006      	b.n	8004686 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2220      	movs	r2, #32
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004680:	2300      	movs	r3, #0
 8004682:	e000      	b.n	8004686 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004684:	2302      	movs	r3, #2
  }
}
 8004686:	4618      	mov	r0, r3
 8004688:	3720      	adds	r7, #32
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b090      	sub	sp, #64	@ 0x40
 8004692:	af00      	add	r7, sp, #0
 8004694:	60f8      	str	r0, [r7, #12]
 8004696:	60b9      	str	r1, [r7, #8]
 8004698:	603b      	str	r3, [r7, #0]
 800469a:	4613      	mov	r3, r2
 800469c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800469e:	e050      	b.n	8004742 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a6:	d04c      	beq.n	8004742 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80046a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d007      	beq.n	80046be <UART_WaitOnFlagUntilTimeout+0x30>
 80046ae:	f7fe f99f 	bl	80029f0 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d241      	bcs.n	8004742 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	330c      	adds	r3, #12
 80046c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c8:	e853 3f00 	ldrex	r3, [r3]
 80046cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80046d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	330c      	adds	r3, #12
 80046dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80046de:	637a      	str	r2, [r7, #52]	@ 0x34
 80046e0:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80046e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80046e6:	e841 2300 	strex	r3, r2, [r1]
 80046ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80046ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1e5      	bne.n	80046be <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3314      	adds	r3, #20
 80046f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	e853 3f00 	ldrex	r3, [r3]
 8004700:	613b      	str	r3, [r7, #16]
   return(result);
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	f023 0301 	bic.w	r3, r3, #1
 8004708:	63bb      	str	r3, [r7, #56]	@ 0x38
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3314      	adds	r3, #20
 8004710:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004712:	623a      	str	r2, [r7, #32]
 8004714:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004716:	69f9      	ldr	r1, [r7, #28]
 8004718:	6a3a      	ldr	r2, [r7, #32]
 800471a:	e841 2300 	strex	r3, r2, [r1]
 800471e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1e5      	bne.n	80046f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2220      	movs	r2, #32
 800472a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2220      	movs	r2, #32
 8004732:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e00f      	b.n	8004762 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	4013      	ands	r3, r2
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	429a      	cmp	r2, r3
 8004750:	bf0c      	ite	eq
 8004752:	2301      	moveq	r3, #1
 8004754:	2300      	movne	r3, #0
 8004756:	b2db      	uxtb	r3, r3
 8004758:	461a      	mov	r2, r3
 800475a:	79fb      	ldrb	r3, [r7, #7]
 800475c:	429a      	cmp	r2, r3
 800475e:	d09f      	beq.n	80046a0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3740      	adds	r7, #64	@ 0x40
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
	...

0800476c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800476c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004770:	b0c0      	sub	sp, #256	@ 0x100
 8004772:	af00      	add	r7, sp, #0
 8004774:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004788:	68d9      	ldr	r1, [r3, #12]
 800478a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	ea40 0301 	orr.w	r3, r0, r1
 8004794:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	431a      	orrs	r2, r3
 80047a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	431a      	orrs	r2, r3
 80047ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80047c4:	f021 010c 	bic.w	r1, r1, #12
 80047c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80047d2:	430b      	orrs	r3, r1
 80047d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80047e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e6:	6999      	ldr	r1, [r3, #24]
 80047e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	ea40 0301 	orr.w	r3, r0, r1
 80047f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	4b8f      	ldr	r3, [pc, #572]	@ (8004a38 <UART_SetConfig+0x2cc>)
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d005      	beq.n	800480c <UART_SetConfig+0xa0>
 8004800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	4b8d      	ldr	r3, [pc, #564]	@ (8004a3c <UART_SetConfig+0x2d0>)
 8004808:	429a      	cmp	r2, r3
 800480a:	d104      	bne.n	8004816 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800480c:	f7ff fc0c 	bl	8004028 <HAL_RCC_GetPCLK2Freq>
 8004810:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004814:	e003      	b.n	800481e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004816:	f7ff fbf3 	bl	8004000 <HAL_RCC_GetPCLK1Freq>
 800481a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800481e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004822:	69db      	ldr	r3, [r3, #28]
 8004824:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004828:	f040 810c 	bne.w	8004a44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800482c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004830:	2200      	movs	r2, #0
 8004832:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004836:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800483a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800483e:	4622      	mov	r2, r4
 8004840:	462b      	mov	r3, r5
 8004842:	1891      	adds	r1, r2, r2
 8004844:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004846:	415b      	adcs	r3, r3
 8004848:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800484a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800484e:	4621      	mov	r1, r4
 8004850:	eb12 0801 	adds.w	r8, r2, r1
 8004854:	4629      	mov	r1, r5
 8004856:	eb43 0901 	adc.w	r9, r3, r1
 800485a:	f04f 0200 	mov.w	r2, #0
 800485e:	f04f 0300 	mov.w	r3, #0
 8004862:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004866:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800486a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800486e:	4690      	mov	r8, r2
 8004870:	4699      	mov	r9, r3
 8004872:	4623      	mov	r3, r4
 8004874:	eb18 0303 	adds.w	r3, r8, r3
 8004878:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800487c:	462b      	mov	r3, r5
 800487e:	eb49 0303 	adc.w	r3, r9, r3
 8004882:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004892:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004896:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800489a:	460b      	mov	r3, r1
 800489c:	18db      	adds	r3, r3, r3
 800489e:	653b      	str	r3, [r7, #80]	@ 0x50
 80048a0:	4613      	mov	r3, r2
 80048a2:	eb42 0303 	adc.w	r3, r2, r3
 80048a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80048a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80048ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80048b0:	f7fb fcde 	bl	8000270 <__aeabi_uldivmod>
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	4b61      	ldr	r3, [pc, #388]	@ (8004a40 <UART_SetConfig+0x2d4>)
 80048ba:	fba3 2302 	umull	r2, r3, r3, r2
 80048be:	095b      	lsrs	r3, r3, #5
 80048c0:	011c      	lsls	r4, r3, #4
 80048c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048c6:	2200      	movs	r2, #0
 80048c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80048cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80048d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80048d4:	4642      	mov	r2, r8
 80048d6:	464b      	mov	r3, r9
 80048d8:	1891      	adds	r1, r2, r2
 80048da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80048dc:	415b      	adcs	r3, r3
 80048de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80048e4:	4641      	mov	r1, r8
 80048e6:	eb12 0a01 	adds.w	sl, r2, r1
 80048ea:	4649      	mov	r1, r9
 80048ec:	eb43 0b01 	adc.w	fp, r3, r1
 80048f0:	f04f 0200 	mov.w	r2, #0
 80048f4:	f04f 0300 	mov.w	r3, #0
 80048f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004900:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004904:	4692      	mov	sl, r2
 8004906:	469b      	mov	fp, r3
 8004908:	4643      	mov	r3, r8
 800490a:	eb1a 0303 	adds.w	r3, sl, r3
 800490e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004912:	464b      	mov	r3, r9
 8004914:	eb4b 0303 	adc.w	r3, fp, r3
 8004918:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800491c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004928:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800492c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004930:	460b      	mov	r3, r1
 8004932:	18db      	adds	r3, r3, r3
 8004934:	643b      	str	r3, [r7, #64]	@ 0x40
 8004936:	4613      	mov	r3, r2
 8004938:	eb42 0303 	adc.w	r3, r2, r3
 800493c:	647b      	str	r3, [r7, #68]	@ 0x44
 800493e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004942:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004946:	f7fb fc93 	bl	8000270 <__aeabi_uldivmod>
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	4611      	mov	r1, r2
 8004950:	4b3b      	ldr	r3, [pc, #236]	@ (8004a40 <UART_SetConfig+0x2d4>)
 8004952:	fba3 2301 	umull	r2, r3, r3, r1
 8004956:	095b      	lsrs	r3, r3, #5
 8004958:	2264      	movs	r2, #100	@ 0x64
 800495a:	fb02 f303 	mul.w	r3, r2, r3
 800495e:	1acb      	subs	r3, r1, r3
 8004960:	00db      	lsls	r3, r3, #3
 8004962:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004966:	4b36      	ldr	r3, [pc, #216]	@ (8004a40 <UART_SetConfig+0x2d4>)
 8004968:	fba3 2302 	umull	r2, r3, r3, r2
 800496c:	095b      	lsrs	r3, r3, #5
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004974:	441c      	add	r4, r3
 8004976:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800497a:	2200      	movs	r2, #0
 800497c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004980:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004984:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004988:	4642      	mov	r2, r8
 800498a:	464b      	mov	r3, r9
 800498c:	1891      	adds	r1, r2, r2
 800498e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004990:	415b      	adcs	r3, r3
 8004992:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004994:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004998:	4641      	mov	r1, r8
 800499a:	1851      	adds	r1, r2, r1
 800499c:	6339      	str	r1, [r7, #48]	@ 0x30
 800499e:	4649      	mov	r1, r9
 80049a0:	414b      	adcs	r3, r1
 80049a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80049a4:	f04f 0200 	mov.w	r2, #0
 80049a8:	f04f 0300 	mov.w	r3, #0
 80049ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80049b0:	4659      	mov	r1, fp
 80049b2:	00cb      	lsls	r3, r1, #3
 80049b4:	4651      	mov	r1, sl
 80049b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049ba:	4651      	mov	r1, sl
 80049bc:	00ca      	lsls	r2, r1, #3
 80049be:	4610      	mov	r0, r2
 80049c0:	4619      	mov	r1, r3
 80049c2:	4603      	mov	r3, r0
 80049c4:	4642      	mov	r2, r8
 80049c6:	189b      	adds	r3, r3, r2
 80049c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049cc:	464b      	mov	r3, r9
 80049ce:	460a      	mov	r2, r1
 80049d0:	eb42 0303 	adc.w	r3, r2, r3
 80049d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80049e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80049e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80049ec:	460b      	mov	r3, r1
 80049ee:	18db      	adds	r3, r3, r3
 80049f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049f2:	4613      	mov	r3, r2
 80049f4:	eb42 0303 	adc.w	r3, r2, r3
 80049f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80049fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004a02:	f7fb fc35 	bl	8000270 <__aeabi_uldivmod>
 8004a06:	4602      	mov	r2, r0
 8004a08:	460b      	mov	r3, r1
 8004a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a40 <UART_SetConfig+0x2d4>)
 8004a0c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a10:	095b      	lsrs	r3, r3, #5
 8004a12:	2164      	movs	r1, #100	@ 0x64
 8004a14:	fb01 f303 	mul.w	r3, r1, r3
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	3332      	adds	r3, #50	@ 0x32
 8004a1e:	4a08      	ldr	r2, [pc, #32]	@ (8004a40 <UART_SetConfig+0x2d4>)
 8004a20:	fba2 2303 	umull	r2, r3, r2, r3
 8004a24:	095b      	lsrs	r3, r3, #5
 8004a26:	f003 0207 	and.w	r2, r3, #7
 8004a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4422      	add	r2, r4
 8004a32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a34:	e106      	b.n	8004c44 <UART_SetConfig+0x4d8>
 8004a36:	bf00      	nop
 8004a38:	40011000 	.word	0x40011000
 8004a3c:	40011400 	.word	0x40011400
 8004a40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004a4e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004a52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004a56:	4642      	mov	r2, r8
 8004a58:	464b      	mov	r3, r9
 8004a5a:	1891      	adds	r1, r2, r2
 8004a5c:	6239      	str	r1, [r7, #32]
 8004a5e:	415b      	adcs	r3, r3
 8004a60:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a66:	4641      	mov	r1, r8
 8004a68:	1854      	adds	r4, r2, r1
 8004a6a:	4649      	mov	r1, r9
 8004a6c:	eb43 0501 	adc.w	r5, r3, r1
 8004a70:	f04f 0200 	mov.w	r2, #0
 8004a74:	f04f 0300 	mov.w	r3, #0
 8004a78:	00eb      	lsls	r3, r5, #3
 8004a7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a7e:	00e2      	lsls	r2, r4, #3
 8004a80:	4614      	mov	r4, r2
 8004a82:	461d      	mov	r5, r3
 8004a84:	4643      	mov	r3, r8
 8004a86:	18e3      	adds	r3, r4, r3
 8004a88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a8c:	464b      	mov	r3, r9
 8004a8e:	eb45 0303 	adc.w	r3, r5, r3
 8004a92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004aa2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004aa6:	f04f 0200 	mov.w	r2, #0
 8004aaa:	f04f 0300 	mov.w	r3, #0
 8004aae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ab2:	4629      	mov	r1, r5
 8004ab4:	008b      	lsls	r3, r1, #2
 8004ab6:	4621      	mov	r1, r4
 8004ab8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004abc:	4621      	mov	r1, r4
 8004abe:	008a      	lsls	r2, r1, #2
 8004ac0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004ac4:	f7fb fbd4 	bl	8000270 <__aeabi_uldivmod>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	4b60      	ldr	r3, [pc, #384]	@ (8004c50 <UART_SetConfig+0x4e4>)
 8004ace:	fba3 2302 	umull	r2, r3, r3, r2
 8004ad2:	095b      	lsrs	r3, r3, #5
 8004ad4:	011c      	lsls	r4, r3, #4
 8004ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ada:	2200      	movs	r2, #0
 8004adc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ae0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ae4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ae8:	4642      	mov	r2, r8
 8004aea:	464b      	mov	r3, r9
 8004aec:	1891      	adds	r1, r2, r2
 8004aee:	61b9      	str	r1, [r7, #24]
 8004af0:	415b      	adcs	r3, r3
 8004af2:	61fb      	str	r3, [r7, #28]
 8004af4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004af8:	4641      	mov	r1, r8
 8004afa:	1851      	adds	r1, r2, r1
 8004afc:	6139      	str	r1, [r7, #16]
 8004afe:	4649      	mov	r1, r9
 8004b00:	414b      	adcs	r3, r1
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	f04f 0300 	mov.w	r3, #0
 8004b0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b10:	4659      	mov	r1, fp
 8004b12:	00cb      	lsls	r3, r1, #3
 8004b14:	4651      	mov	r1, sl
 8004b16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b1a:	4651      	mov	r1, sl
 8004b1c:	00ca      	lsls	r2, r1, #3
 8004b1e:	4610      	mov	r0, r2
 8004b20:	4619      	mov	r1, r3
 8004b22:	4603      	mov	r3, r0
 8004b24:	4642      	mov	r2, r8
 8004b26:	189b      	adds	r3, r3, r2
 8004b28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b2c:	464b      	mov	r3, r9
 8004b2e:	460a      	mov	r2, r1
 8004b30:	eb42 0303 	adc.w	r3, r2, r3
 8004b34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b42:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004b50:	4649      	mov	r1, r9
 8004b52:	008b      	lsls	r3, r1, #2
 8004b54:	4641      	mov	r1, r8
 8004b56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b5a:	4641      	mov	r1, r8
 8004b5c:	008a      	lsls	r2, r1, #2
 8004b5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004b62:	f7fb fb85 	bl	8000270 <__aeabi_uldivmod>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4611      	mov	r1, r2
 8004b6c:	4b38      	ldr	r3, [pc, #224]	@ (8004c50 <UART_SetConfig+0x4e4>)
 8004b6e:	fba3 2301 	umull	r2, r3, r3, r1
 8004b72:	095b      	lsrs	r3, r3, #5
 8004b74:	2264      	movs	r2, #100	@ 0x64
 8004b76:	fb02 f303 	mul.w	r3, r2, r3
 8004b7a:	1acb      	subs	r3, r1, r3
 8004b7c:	011b      	lsls	r3, r3, #4
 8004b7e:	3332      	adds	r3, #50	@ 0x32
 8004b80:	4a33      	ldr	r2, [pc, #204]	@ (8004c50 <UART_SetConfig+0x4e4>)
 8004b82:	fba2 2303 	umull	r2, r3, r2, r3
 8004b86:	095b      	lsrs	r3, r3, #5
 8004b88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b8c:	441c      	add	r4, r3
 8004b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b92:	2200      	movs	r2, #0
 8004b94:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b96:	677a      	str	r2, [r7, #116]	@ 0x74
 8004b98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004b9c:	4642      	mov	r2, r8
 8004b9e:	464b      	mov	r3, r9
 8004ba0:	1891      	adds	r1, r2, r2
 8004ba2:	60b9      	str	r1, [r7, #8]
 8004ba4:	415b      	adcs	r3, r3
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bac:	4641      	mov	r1, r8
 8004bae:	1851      	adds	r1, r2, r1
 8004bb0:	6039      	str	r1, [r7, #0]
 8004bb2:	4649      	mov	r1, r9
 8004bb4:	414b      	adcs	r3, r1
 8004bb6:	607b      	str	r3, [r7, #4]
 8004bb8:	f04f 0200 	mov.w	r2, #0
 8004bbc:	f04f 0300 	mov.w	r3, #0
 8004bc0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004bc4:	4659      	mov	r1, fp
 8004bc6:	00cb      	lsls	r3, r1, #3
 8004bc8:	4651      	mov	r1, sl
 8004bca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bce:	4651      	mov	r1, sl
 8004bd0:	00ca      	lsls	r2, r1, #3
 8004bd2:	4610      	mov	r0, r2
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	4642      	mov	r2, r8
 8004bda:	189b      	adds	r3, r3, r2
 8004bdc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004bde:	464b      	mov	r3, r9
 8004be0:	460a      	mov	r2, r1
 8004be2:	eb42 0303 	adc.w	r3, r2, r3
 8004be6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004bf2:	667a      	str	r2, [r7, #100]	@ 0x64
 8004bf4:	f04f 0200 	mov.w	r2, #0
 8004bf8:	f04f 0300 	mov.w	r3, #0
 8004bfc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004c00:	4649      	mov	r1, r9
 8004c02:	008b      	lsls	r3, r1, #2
 8004c04:	4641      	mov	r1, r8
 8004c06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c0a:	4641      	mov	r1, r8
 8004c0c:	008a      	lsls	r2, r1, #2
 8004c0e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004c12:	f7fb fb2d 	bl	8000270 <__aeabi_uldivmod>
 8004c16:	4602      	mov	r2, r0
 8004c18:	460b      	mov	r3, r1
 8004c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c50 <UART_SetConfig+0x4e4>)
 8004c1c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c20:	095b      	lsrs	r3, r3, #5
 8004c22:	2164      	movs	r1, #100	@ 0x64
 8004c24:	fb01 f303 	mul.w	r3, r1, r3
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	011b      	lsls	r3, r3, #4
 8004c2c:	3332      	adds	r3, #50	@ 0x32
 8004c2e:	4a08      	ldr	r2, [pc, #32]	@ (8004c50 <UART_SetConfig+0x4e4>)
 8004c30:	fba2 2303 	umull	r2, r3, r2, r3
 8004c34:	095b      	lsrs	r3, r3, #5
 8004c36:	f003 020f 	and.w	r2, r3, #15
 8004c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4422      	add	r2, r4
 8004c42:	609a      	str	r2, [r3, #8]
}
 8004c44:	bf00      	nop
 8004c46:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c50:	51eb851f 	.word	0x51eb851f

08004c54 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c6c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	4b20      	ldr	r3, [pc, #128]	@ (8004cf4 <FSMC_NORSRAM_Init+0xa0>)
 8004c72:	4013      	ands	r3, r2
 8004c74:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004c7e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8004c84:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8004c8a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8004c90:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8004c96:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8004c9c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8004ca2:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                     Init->WriteOperation       |\
 8004ca8:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                     Init->WaitSignal           |\
 8004cae:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                     Init->ExtendedMode         |\
 8004cb4:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                     Init->AsynchronousWait     |\
 8004cba:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                     Init->PageSize             |\
 8004cc0:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	2b08      	cmp	r3, #8
 8004cce:	d103      	bne.n	8004cd8 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cd6:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68f9      	ldr	r1, [r7, #12]
 8004ce0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3714      	adds	r7, #20
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	fff00080 	.word	0xfff00080

08004cf8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b087      	sub	sp, #28
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8004d04:	2300      	movs	r3, #0
 8004d06:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	1c5a      	adds	r2, r3, #1
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d12:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004d1a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004d26:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004d2e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8004d36:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004d40:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	3b02      	subs	r3, #2
 8004d48:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004d4a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004d50:	4313      	orrs	r3, r2
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	1c5a      	adds	r2, r3, #1
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6979      	ldr	r1, [r7, #20]
 8004d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	371c      	adds	r7, #28
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
	...

08004d74 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b087      	sub	sp, #28
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
 8004d80:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8004d82:	2300      	movs	r3, #0
 8004d84:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d8c:	d122      	bne.n	8004dd4 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d96:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	4b15      	ldr	r3, [pc, #84]	@ (8004df0 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004daa:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004db2:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8004dba:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004dc0:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	6979      	ldr	r1, [r7, #20]
 8004dce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004dd2:	e005      	b.n	8004de0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8004ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	371c      	adds	r7, #28
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	cff00000 	.word	0xcff00000

08004df4 <std>:
 8004df4:	2300      	movs	r3, #0
 8004df6:	b510      	push	{r4, lr}
 8004df8:	4604      	mov	r4, r0
 8004dfa:	e9c0 3300 	strd	r3, r3, [r0]
 8004dfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e02:	6083      	str	r3, [r0, #8]
 8004e04:	8181      	strh	r1, [r0, #12]
 8004e06:	6643      	str	r3, [r0, #100]	@ 0x64
 8004e08:	81c2      	strh	r2, [r0, #14]
 8004e0a:	6183      	str	r3, [r0, #24]
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	2208      	movs	r2, #8
 8004e10:	305c      	adds	r0, #92	@ 0x5c
 8004e12:	f000 f906 	bl	8005022 <memset>
 8004e16:	4b0d      	ldr	r3, [pc, #52]	@ (8004e4c <std+0x58>)
 8004e18:	6263      	str	r3, [r4, #36]	@ 0x24
 8004e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e50 <std+0x5c>)
 8004e1c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e54 <std+0x60>)
 8004e20:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004e22:	4b0d      	ldr	r3, [pc, #52]	@ (8004e58 <std+0x64>)
 8004e24:	6323      	str	r3, [r4, #48]	@ 0x30
 8004e26:	4b0d      	ldr	r3, [pc, #52]	@ (8004e5c <std+0x68>)
 8004e28:	6224      	str	r4, [r4, #32]
 8004e2a:	429c      	cmp	r4, r3
 8004e2c:	d006      	beq.n	8004e3c <std+0x48>
 8004e2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004e32:	4294      	cmp	r4, r2
 8004e34:	d002      	beq.n	8004e3c <std+0x48>
 8004e36:	33d0      	adds	r3, #208	@ 0xd0
 8004e38:	429c      	cmp	r4, r3
 8004e3a:	d105      	bne.n	8004e48 <std+0x54>
 8004e3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e44:	f000 b966 	b.w	8005114 <__retarget_lock_init_recursive>
 8004e48:	bd10      	pop	{r4, pc}
 8004e4a:	bf00      	nop
 8004e4c:	08004f9d 	.word	0x08004f9d
 8004e50:	08004fbf 	.word	0x08004fbf
 8004e54:	08004ff7 	.word	0x08004ff7
 8004e58:	0800501b 	.word	0x0800501b
 8004e5c:	200001cc 	.word	0x200001cc

08004e60 <stdio_exit_handler>:
 8004e60:	4a02      	ldr	r2, [pc, #8]	@ (8004e6c <stdio_exit_handler+0xc>)
 8004e62:	4903      	ldr	r1, [pc, #12]	@ (8004e70 <stdio_exit_handler+0x10>)
 8004e64:	4803      	ldr	r0, [pc, #12]	@ (8004e74 <stdio_exit_handler+0x14>)
 8004e66:	f000 b869 	b.w	8004f3c <_fwalk_sglue>
 8004e6a:	bf00      	nop
 8004e6c:	20000010 	.word	0x20000010
 8004e70:	080059b5 	.word	0x080059b5
 8004e74:	20000020 	.word	0x20000020

08004e78 <cleanup_stdio>:
 8004e78:	6841      	ldr	r1, [r0, #4]
 8004e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8004eac <cleanup_stdio+0x34>)
 8004e7c:	4299      	cmp	r1, r3
 8004e7e:	b510      	push	{r4, lr}
 8004e80:	4604      	mov	r4, r0
 8004e82:	d001      	beq.n	8004e88 <cleanup_stdio+0x10>
 8004e84:	f000 fd96 	bl	80059b4 <_fflush_r>
 8004e88:	68a1      	ldr	r1, [r4, #8]
 8004e8a:	4b09      	ldr	r3, [pc, #36]	@ (8004eb0 <cleanup_stdio+0x38>)
 8004e8c:	4299      	cmp	r1, r3
 8004e8e:	d002      	beq.n	8004e96 <cleanup_stdio+0x1e>
 8004e90:	4620      	mov	r0, r4
 8004e92:	f000 fd8f 	bl	80059b4 <_fflush_r>
 8004e96:	68e1      	ldr	r1, [r4, #12]
 8004e98:	4b06      	ldr	r3, [pc, #24]	@ (8004eb4 <cleanup_stdio+0x3c>)
 8004e9a:	4299      	cmp	r1, r3
 8004e9c:	d004      	beq.n	8004ea8 <cleanup_stdio+0x30>
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ea4:	f000 bd86 	b.w	80059b4 <_fflush_r>
 8004ea8:	bd10      	pop	{r4, pc}
 8004eaa:	bf00      	nop
 8004eac:	200001cc 	.word	0x200001cc
 8004eb0:	20000234 	.word	0x20000234
 8004eb4:	2000029c 	.word	0x2000029c

08004eb8 <global_stdio_init.part.0>:
 8004eb8:	b510      	push	{r4, lr}
 8004eba:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee8 <global_stdio_init.part.0+0x30>)
 8004ebc:	4c0b      	ldr	r4, [pc, #44]	@ (8004eec <global_stdio_init.part.0+0x34>)
 8004ebe:	4a0c      	ldr	r2, [pc, #48]	@ (8004ef0 <global_stdio_init.part.0+0x38>)
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	2104      	movs	r1, #4
 8004ec8:	f7ff ff94 	bl	8004df4 <std>
 8004ecc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	2109      	movs	r1, #9
 8004ed4:	f7ff ff8e 	bl	8004df4 <std>
 8004ed8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004edc:	2202      	movs	r2, #2
 8004ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ee2:	2112      	movs	r1, #18
 8004ee4:	f7ff bf86 	b.w	8004df4 <std>
 8004ee8:	20000304 	.word	0x20000304
 8004eec:	200001cc 	.word	0x200001cc
 8004ef0:	08004e61 	.word	0x08004e61

08004ef4 <__sfp_lock_acquire>:
 8004ef4:	4801      	ldr	r0, [pc, #4]	@ (8004efc <__sfp_lock_acquire+0x8>)
 8004ef6:	f000 b90e 	b.w	8005116 <__retarget_lock_acquire_recursive>
 8004efa:	bf00      	nop
 8004efc:	2000030d 	.word	0x2000030d

08004f00 <__sfp_lock_release>:
 8004f00:	4801      	ldr	r0, [pc, #4]	@ (8004f08 <__sfp_lock_release+0x8>)
 8004f02:	f000 b909 	b.w	8005118 <__retarget_lock_release_recursive>
 8004f06:	bf00      	nop
 8004f08:	2000030d 	.word	0x2000030d

08004f0c <__sinit>:
 8004f0c:	b510      	push	{r4, lr}
 8004f0e:	4604      	mov	r4, r0
 8004f10:	f7ff fff0 	bl	8004ef4 <__sfp_lock_acquire>
 8004f14:	6a23      	ldr	r3, [r4, #32]
 8004f16:	b11b      	cbz	r3, 8004f20 <__sinit+0x14>
 8004f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f1c:	f7ff bff0 	b.w	8004f00 <__sfp_lock_release>
 8004f20:	4b04      	ldr	r3, [pc, #16]	@ (8004f34 <__sinit+0x28>)
 8004f22:	6223      	str	r3, [r4, #32]
 8004f24:	4b04      	ldr	r3, [pc, #16]	@ (8004f38 <__sinit+0x2c>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1f5      	bne.n	8004f18 <__sinit+0xc>
 8004f2c:	f7ff ffc4 	bl	8004eb8 <global_stdio_init.part.0>
 8004f30:	e7f2      	b.n	8004f18 <__sinit+0xc>
 8004f32:	bf00      	nop
 8004f34:	08004e79 	.word	0x08004e79
 8004f38:	20000304 	.word	0x20000304

08004f3c <_fwalk_sglue>:
 8004f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f40:	4607      	mov	r7, r0
 8004f42:	4688      	mov	r8, r1
 8004f44:	4614      	mov	r4, r2
 8004f46:	2600      	movs	r6, #0
 8004f48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f4c:	f1b9 0901 	subs.w	r9, r9, #1
 8004f50:	d505      	bpl.n	8004f5e <_fwalk_sglue+0x22>
 8004f52:	6824      	ldr	r4, [r4, #0]
 8004f54:	2c00      	cmp	r4, #0
 8004f56:	d1f7      	bne.n	8004f48 <_fwalk_sglue+0xc>
 8004f58:	4630      	mov	r0, r6
 8004f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f5e:	89ab      	ldrh	r3, [r5, #12]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d907      	bls.n	8004f74 <_fwalk_sglue+0x38>
 8004f64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	d003      	beq.n	8004f74 <_fwalk_sglue+0x38>
 8004f6c:	4629      	mov	r1, r5
 8004f6e:	4638      	mov	r0, r7
 8004f70:	47c0      	blx	r8
 8004f72:	4306      	orrs	r6, r0
 8004f74:	3568      	adds	r5, #104	@ 0x68
 8004f76:	e7e9      	b.n	8004f4c <_fwalk_sglue+0x10>

08004f78 <iprintf>:
 8004f78:	b40f      	push	{r0, r1, r2, r3}
 8004f7a:	b507      	push	{r0, r1, r2, lr}
 8004f7c:	4906      	ldr	r1, [pc, #24]	@ (8004f98 <iprintf+0x20>)
 8004f7e:	ab04      	add	r3, sp, #16
 8004f80:	6808      	ldr	r0, [r1, #0]
 8004f82:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f86:	6881      	ldr	r1, [r0, #8]
 8004f88:	9301      	str	r3, [sp, #4]
 8004f8a:	f000 f9e9 	bl	8005360 <_vfiprintf_r>
 8004f8e:	b003      	add	sp, #12
 8004f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f94:	b004      	add	sp, #16
 8004f96:	4770      	bx	lr
 8004f98:	2000001c 	.word	0x2000001c

08004f9c <__sread>:
 8004f9c:	b510      	push	{r4, lr}
 8004f9e:	460c      	mov	r4, r1
 8004fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fa4:	f000 f868 	bl	8005078 <_read_r>
 8004fa8:	2800      	cmp	r0, #0
 8004faa:	bfab      	itete	ge
 8004fac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004fae:	89a3      	ldrhlt	r3, [r4, #12]
 8004fb0:	181b      	addge	r3, r3, r0
 8004fb2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004fb6:	bfac      	ite	ge
 8004fb8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004fba:	81a3      	strhlt	r3, [r4, #12]
 8004fbc:	bd10      	pop	{r4, pc}

08004fbe <__swrite>:
 8004fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fc2:	461f      	mov	r7, r3
 8004fc4:	898b      	ldrh	r3, [r1, #12]
 8004fc6:	05db      	lsls	r3, r3, #23
 8004fc8:	4605      	mov	r5, r0
 8004fca:	460c      	mov	r4, r1
 8004fcc:	4616      	mov	r6, r2
 8004fce:	d505      	bpl.n	8004fdc <__swrite+0x1e>
 8004fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f000 f83c 	bl	8005054 <_lseek_r>
 8004fdc:	89a3      	ldrh	r3, [r4, #12]
 8004fde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fe2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004fe6:	81a3      	strh	r3, [r4, #12]
 8004fe8:	4632      	mov	r2, r6
 8004fea:	463b      	mov	r3, r7
 8004fec:	4628      	mov	r0, r5
 8004fee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ff2:	f000 b853 	b.w	800509c <_write_r>

08004ff6 <__sseek>:
 8004ff6:	b510      	push	{r4, lr}
 8004ff8:	460c      	mov	r4, r1
 8004ffa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ffe:	f000 f829 	bl	8005054 <_lseek_r>
 8005002:	1c43      	adds	r3, r0, #1
 8005004:	89a3      	ldrh	r3, [r4, #12]
 8005006:	bf15      	itete	ne
 8005008:	6560      	strne	r0, [r4, #84]	@ 0x54
 800500a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800500e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005012:	81a3      	strheq	r3, [r4, #12]
 8005014:	bf18      	it	ne
 8005016:	81a3      	strhne	r3, [r4, #12]
 8005018:	bd10      	pop	{r4, pc}

0800501a <__sclose>:
 800501a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800501e:	f000 b809 	b.w	8005034 <_close_r>

08005022 <memset>:
 8005022:	4402      	add	r2, r0
 8005024:	4603      	mov	r3, r0
 8005026:	4293      	cmp	r3, r2
 8005028:	d100      	bne.n	800502c <memset+0xa>
 800502a:	4770      	bx	lr
 800502c:	f803 1b01 	strb.w	r1, [r3], #1
 8005030:	e7f9      	b.n	8005026 <memset+0x4>
	...

08005034 <_close_r>:
 8005034:	b538      	push	{r3, r4, r5, lr}
 8005036:	4d06      	ldr	r5, [pc, #24]	@ (8005050 <_close_r+0x1c>)
 8005038:	2300      	movs	r3, #0
 800503a:	4604      	mov	r4, r0
 800503c:	4608      	mov	r0, r1
 800503e:	602b      	str	r3, [r5, #0]
 8005040:	f7fd fa9a 	bl	8002578 <_close>
 8005044:	1c43      	adds	r3, r0, #1
 8005046:	d102      	bne.n	800504e <_close_r+0x1a>
 8005048:	682b      	ldr	r3, [r5, #0]
 800504a:	b103      	cbz	r3, 800504e <_close_r+0x1a>
 800504c:	6023      	str	r3, [r4, #0]
 800504e:	bd38      	pop	{r3, r4, r5, pc}
 8005050:	20000308 	.word	0x20000308

08005054 <_lseek_r>:
 8005054:	b538      	push	{r3, r4, r5, lr}
 8005056:	4d07      	ldr	r5, [pc, #28]	@ (8005074 <_lseek_r+0x20>)
 8005058:	4604      	mov	r4, r0
 800505a:	4608      	mov	r0, r1
 800505c:	4611      	mov	r1, r2
 800505e:	2200      	movs	r2, #0
 8005060:	602a      	str	r2, [r5, #0]
 8005062:	461a      	mov	r2, r3
 8005064:	f7fd faaf 	bl	80025c6 <_lseek>
 8005068:	1c43      	adds	r3, r0, #1
 800506a:	d102      	bne.n	8005072 <_lseek_r+0x1e>
 800506c:	682b      	ldr	r3, [r5, #0]
 800506e:	b103      	cbz	r3, 8005072 <_lseek_r+0x1e>
 8005070:	6023      	str	r3, [r4, #0]
 8005072:	bd38      	pop	{r3, r4, r5, pc}
 8005074:	20000308 	.word	0x20000308

08005078 <_read_r>:
 8005078:	b538      	push	{r3, r4, r5, lr}
 800507a:	4d07      	ldr	r5, [pc, #28]	@ (8005098 <_read_r+0x20>)
 800507c:	4604      	mov	r4, r0
 800507e:	4608      	mov	r0, r1
 8005080:	4611      	mov	r1, r2
 8005082:	2200      	movs	r2, #0
 8005084:	602a      	str	r2, [r5, #0]
 8005086:	461a      	mov	r2, r3
 8005088:	f7fd fa3d 	bl	8002506 <_read>
 800508c:	1c43      	adds	r3, r0, #1
 800508e:	d102      	bne.n	8005096 <_read_r+0x1e>
 8005090:	682b      	ldr	r3, [r5, #0]
 8005092:	b103      	cbz	r3, 8005096 <_read_r+0x1e>
 8005094:	6023      	str	r3, [r4, #0]
 8005096:	bd38      	pop	{r3, r4, r5, pc}
 8005098:	20000308 	.word	0x20000308

0800509c <_write_r>:
 800509c:	b538      	push	{r3, r4, r5, lr}
 800509e:	4d07      	ldr	r5, [pc, #28]	@ (80050bc <_write_r+0x20>)
 80050a0:	4604      	mov	r4, r0
 80050a2:	4608      	mov	r0, r1
 80050a4:	4611      	mov	r1, r2
 80050a6:	2200      	movs	r2, #0
 80050a8:	602a      	str	r2, [r5, #0]
 80050aa:	461a      	mov	r2, r3
 80050ac:	f7fd fa48 	bl	8002540 <_write>
 80050b0:	1c43      	adds	r3, r0, #1
 80050b2:	d102      	bne.n	80050ba <_write_r+0x1e>
 80050b4:	682b      	ldr	r3, [r5, #0]
 80050b6:	b103      	cbz	r3, 80050ba <_write_r+0x1e>
 80050b8:	6023      	str	r3, [r4, #0]
 80050ba:	bd38      	pop	{r3, r4, r5, pc}
 80050bc:	20000308 	.word	0x20000308

080050c0 <__errno>:
 80050c0:	4b01      	ldr	r3, [pc, #4]	@ (80050c8 <__errno+0x8>)
 80050c2:	6818      	ldr	r0, [r3, #0]
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	2000001c 	.word	0x2000001c

080050cc <__libc_init_array>:
 80050cc:	b570      	push	{r4, r5, r6, lr}
 80050ce:	4d0d      	ldr	r5, [pc, #52]	@ (8005104 <__libc_init_array+0x38>)
 80050d0:	4c0d      	ldr	r4, [pc, #52]	@ (8005108 <__libc_init_array+0x3c>)
 80050d2:	1b64      	subs	r4, r4, r5
 80050d4:	10a4      	asrs	r4, r4, #2
 80050d6:	2600      	movs	r6, #0
 80050d8:	42a6      	cmp	r6, r4
 80050da:	d109      	bne.n	80050f0 <__libc_init_array+0x24>
 80050dc:	4d0b      	ldr	r5, [pc, #44]	@ (800510c <__libc_init_array+0x40>)
 80050de:	4c0c      	ldr	r4, [pc, #48]	@ (8005110 <__libc_init_array+0x44>)
 80050e0:	f000 fdb8 	bl	8005c54 <_init>
 80050e4:	1b64      	subs	r4, r4, r5
 80050e6:	10a4      	asrs	r4, r4, #2
 80050e8:	2600      	movs	r6, #0
 80050ea:	42a6      	cmp	r6, r4
 80050ec:	d105      	bne.n	80050fa <__libc_init_array+0x2e>
 80050ee:	bd70      	pop	{r4, r5, r6, pc}
 80050f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80050f4:	4798      	blx	r3
 80050f6:	3601      	adds	r6, #1
 80050f8:	e7ee      	b.n	80050d8 <__libc_init_array+0xc>
 80050fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80050fe:	4798      	blx	r3
 8005100:	3601      	adds	r6, #1
 8005102:	e7f2      	b.n	80050ea <__libc_init_array+0x1e>
 8005104:	08005ccc 	.word	0x08005ccc
 8005108:	08005ccc 	.word	0x08005ccc
 800510c:	08005ccc 	.word	0x08005ccc
 8005110:	08005cd0 	.word	0x08005cd0

08005114 <__retarget_lock_init_recursive>:
 8005114:	4770      	bx	lr

08005116 <__retarget_lock_acquire_recursive>:
 8005116:	4770      	bx	lr

08005118 <__retarget_lock_release_recursive>:
 8005118:	4770      	bx	lr
	...

0800511c <_free_r>:
 800511c:	b538      	push	{r3, r4, r5, lr}
 800511e:	4605      	mov	r5, r0
 8005120:	2900      	cmp	r1, #0
 8005122:	d041      	beq.n	80051a8 <_free_r+0x8c>
 8005124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005128:	1f0c      	subs	r4, r1, #4
 800512a:	2b00      	cmp	r3, #0
 800512c:	bfb8      	it	lt
 800512e:	18e4      	addlt	r4, r4, r3
 8005130:	f000 f8e0 	bl	80052f4 <__malloc_lock>
 8005134:	4a1d      	ldr	r2, [pc, #116]	@ (80051ac <_free_r+0x90>)
 8005136:	6813      	ldr	r3, [r2, #0]
 8005138:	b933      	cbnz	r3, 8005148 <_free_r+0x2c>
 800513a:	6063      	str	r3, [r4, #4]
 800513c:	6014      	str	r4, [r2, #0]
 800513e:	4628      	mov	r0, r5
 8005140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005144:	f000 b8dc 	b.w	8005300 <__malloc_unlock>
 8005148:	42a3      	cmp	r3, r4
 800514a:	d908      	bls.n	800515e <_free_r+0x42>
 800514c:	6820      	ldr	r0, [r4, #0]
 800514e:	1821      	adds	r1, r4, r0
 8005150:	428b      	cmp	r3, r1
 8005152:	bf01      	itttt	eq
 8005154:	6819      	ldreq	r1, [r3, #0]
 8005156:	685b      	ldreq	r3, [r3, #4]
 8005158:	1809      	addeq	r1, r1, r0
 800515a:	6021      	streq	r1, [r4, #0]
 800515c:	e7ed      	b.n	800513a <_free_r+0x1e>
 800515e:	461a      	mov	r2, r3
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	b10b      	cbz	r3, 8005168 <_free_r+0x4c>
 8005164:	42a3      	cmp	r3, r4
 8005166:	d9fa      	bls.n	800515e <_free_r+0x42>
 8005168:	6811      	ldr	r1, [r2, #0]
 800516a:	1850      	adds	r0, r2, r1
 800516c:	42a0      	cmp	r0, r4
 800516e:	d10b      	bne.n	8005188 <_free_r+0x6c>
 8005170:	6820      	ldr	r0, [r4, #0]
 8005172:	4401      	add	r1, r0
 8005174:	1850      	adds	r0, r2, r1
 8005176:	4283      	cmp	r3, r0
 8005178:	6011      	str	r1, [r2, #0]
 800517a:	d1e0      	bne.n	800513e <_free_r+0x22>
 800517c:	6818      	ldr	r0, [r3, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	6053      	str	r3, [r2, #4]
 8005182:	4408      	add	r0, r1
 8005184:	6010      	str	r0, [r2, #0]
 8005186:	e7da      	b.n	800513e <_free_r+0x22>
 8005188:	d902      	bls.n	8005190 <_free_r+0x74>
 800518a:	230c      	movs	r3, #12
 800518c:	602b      	str	r3, [r5, #0]
 800518e:	e7d6      	b.n	800513e <_free_r+0x22>
 8005190:	6820      	ldr	r0, [r4, #0]
 8005192:	1821      	adds	r1, r4, r0
 8005194:	428b      	cmp	r3, r1
 8005196:	bf04      	itt	eq
 8005198:	6819      	ldreq	r1, [r3, #0]
 800519a:	685b      	ldreq	r3, [r3, #4]
 800519c:	6063      	str	r3, [r4, #4]
 800519e:	bf04      	itt	eq
 80051a0:	1809      	addeq	r1, r1, r0
 80051a2:	6021      	streq	r1, [r4, #0]
 80051a4:	6054      	str	r4, [r2, #4]
 80051a6:	e7ca      	b.n	800513e <_free_r+0x22>
 80051a8:	bd38      	pop	{r3, r4, r5, pc}
 80051aa:	bf00      	nop
 80051ac:	20000314 	.word	0x20000314

080051b0 <sbrk_aligned>:
 80051b0:	b570      	push	{r4, r5, r6, lr}
 80051b2:	4e0f      	ldr	r6, [pc, #60]	@ (80051f0 <sbrk_aligned+0x40>)
 80051b4:	460c      	mov	r4, r1
 80051b6:	6831      	ldr	r1, [r6, #0]
 80051b8:	4605      	mov	r5, r0
 80051ba:	b911      	cbnz	r1, 80051c2 <sbrk_aligned+0x12>
 80051bc:	f000 fcb6 	bl	8005b2c <_sbrk_r>
 80051c0:	6030      	str	r0, [r6, #0]
 80051c2:	4621      	mov	r1, r4
 80051c4:	4628      	mov	r0, r5
 80051c6:	f000 fcb1 	bl	8005b2c <_sbrk_r>
 80051ca:	1c43      	adds	r3, r0, #1
 80051cc:	d103      	bne.n	80051d6 <sbrk_aligned+0x26>
 80051ce:	f04f 34ff 	mov.w	r4, #4294967295
 80051d2:	4620      	mov	r0, r4
 80051d4:	bd70      	pop	{r4, r5, r6, pc}
 80051d6:	1cc4      	adds	r4, r0, #3
 80051d8:	f024 0403 	bic.w	r4, r4, #3
 80051dc:	42a0      	cmp	r0, r4
 80051de:	d0f8      	beq.n	80051d2 <sbrk_aligned+0x22>
 80051e0:	1a21      	subs	r1, r4, r0
 80051e2:	4628      	mov	r0, r5
 80051e4:	f000 fca2 	bl	8005b2c <_sbrk_r>
 80051e8:	3001      	adds	r0, #1
 80051ea:	d1f2      	bne.n	80051d2 <sbrk_aligned+0x22>
 80051ec:	e7ef      	b.n	80051ce <sbrk_aligned+0x1e>
 80051ee:	bf00      	nop
 80051f0:	20000310 	.word	0x20000310

080051f4 <_malloc_r>:
 80051f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051f8:	1ccd      	adds	r5, r1, #3
 80051fa:	f025 0503 	bic.w	r5, r5, #3
 80051fe:	3508      	adds	r5, #8
 8005200:	2d0c      	cmp	r5, #12
 8005202:	bf38      	it	cc
 8005204:	250c      	movcc	r5, #12
 8005206:	2d00      	cmp	r5, #0
 8005208:	4606      	mov	r6, r0
 800520a:	db01      	blt.n	8005210 <_malloc_r+0x1c>
 800520c:	42a9      	cmp	r1, r5
 800520e:	d904      	bls.n	800521a <_malloc_r+0x26>
 8005210:	230c      	movs	r3, #12
 8005212:	6033      	str	r3, [r6, #0]
 8005214:	2000      	movs	r0, #0
 8005216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800521a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80052f0 <_malloc_r+0xfc>
 800521e:	f000 f869 	bl	80052f4 <__malloc_lock>
 8005222:	f8d8 3000 	ldr.w	r3, [r8]
 8005226:	461c      	mov	r4, r3
 8005228:	bb44      	cbnz	r4, 800527c <_malloc_r+0x88>
 800522a:	4629      	mov	r1, r5
 800522c:	4630      	mov	r0, r6
 800522e:	f7ff ffbf 	bl	80051b0 <sbrk_aligned>
 8005232:	1c43      	adds	r3, r0, #1
 8005234:	4604      	mov	r4, r0
 8005236:	d158      	bne.n	80052ea <_malloc_r+0xf6>
 8005238:	f8d8 4000 	ldr.w	r4, [r8]
 800523c:	4627      	mov	r7, r4
 800523e:	2f00      	cmp	r7, #0
 8005240:	d143      	bne.n	80052ca <_malloc_r+0xd6>
 8005242:	2c00      	cmp	r4, #0
 8005244:	d04b      	beq.n	80052de <_malloc_r+0xea>
 8005246:	6823      	ldr	r3, [r4, #0]
 8005248:	4639      	mov	r1, r7
 800524a:	4630      	mov	r0, r6
 800524c:	eb04 0903 	add.w	r9, r4, r3
 8005250:	f000 fc6c 	bl	8005b2c <_sbrk_r>
 8005254:	4581      	cmp	r9, r0
 8005256:	d142      	bne.n	80052de <_malloc_r+0xea>
 8005258:	6821      	ldr	r1, [r4, #0]
 800525a:	1a6d      	subs	r5, r5, r1
 800525c:	4629      	mov	r1, r5
 800525e:	4630      	mov	r0, r6
 8005260:	f7ff ffa6 	bl	80051b0 <sbrk_aligned>
 8005264:	3001      	adds	r0, #1
 8005266:	d03a      	beq.n	80052de <_malloc_r+0xea>
 8005268:	6823      	ldr	r3, [r4, #0]
 800526a:	442b      	add	r3, r5
 800526c:	6023      	str	r3, [r4, #0]
 800526e:	f8d8 3000 	ldr.w	r3, [r8]
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	bb62      	cbnz	r2, 80052d0 <_malloc_r+0xdc>
 8005276:	f8c8 7000 	str.w	r7, [r8]
 800527a:	e00f      	b.n	800529c <_malloc_r+0xa8>
 800527c:	6822      	ldr	r2, [r4, #0]
 800527e:	1b52      	subs	r2, r2, r5
 8005280:	d420      	bmi.n	80052c4 <_malloc_r+0xd0>
 8005282:	2a0b      	cmp	r2, #11
 8005284:	d917      	bls.n	80052b6 <_malloc_r+0xc2>
 8005286:	1961      	adds	r1, r4, r5
 8005288:	42a3      	cmp	r3, r4
 800528a:	6025      	str	r5, [r4, #0]
 800528c:	bf18      	it	ne
 800528e:	6059      	strne	r1, [r3, #4]
 8005290:	6863      	ldr	r3, [r4, #4]
 8005292:	bf08      	it	eq
 8005294:	f8c8 1000 	streq.w	r1, [r8]
 8005298:	5162      	str	r2, [r4, r5]
 800529a:	604b      	str	r3, [r1, #4]
 800529c:	4630      	mov	r0, r6
 800529e:	f000 f82f 	bl	8005300 <__malloc_unlock>
 80052a2:	f104 000b 	add.w	r0, r4, #11
 80052a6:	1d23      	adds	r3, r4, #4
 80052a8:	f020 0007 	bic.w	r0, r0, #7
 80052ac:	1ac2      	subs	r2, r0, r3
 80052ae:	bf1c      	itt	ne
 80052b0:	1a1b      	subne	r3, r3, r0
 80052b2:	50a3      	strne	r3, [r4, r2]
 80052b4:	e7af      	b.n	8005216 <_malloc_r+0x22>
 80052b6:	6862      	ldr	r2, [r4, #4]
 80052b8:	42a3      	cmp	r3, r4
 80052ba:	bf0c      	ite	eq
 80052bc:	f8c8 2000 	streq.w	r2, [r8]
 80052c0:	605a      	strne	r2, [r3, #4]
 80052c2:	e7eb      	b.n	800529c <_malloc_r+0xa8>
 80052c4:	4623      	mov	r3, r4
 80052c6:	6864      	ldr	r4, [r4, #4]
 80052c8:	e7ae      	b.n	8005228 <_malloc_r+0x34>
 80052ca:	463c      	mov	r4, r7
 80052cc:	687f      	ldr	r7, [r7, #4]
 80052ce:	e7b6      	b.n	800523e <_malloc_r+0x4a>
 80052d0:	461a      	mov	r2, r3
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	42a3      	cmp	r3, r4
 80052d6:	d1fb      	bne.n	80052d0 <_malloc_r+0xdc>
 80052d8:	2300      	movs	r3, #0
 80052da:	6053      	str	r3, [r2, #4]
 80052dc:	e7de      	b.n	800529c <_malloc_r+0xa8>
 80052de:	230c      	movs	r3, #12
 80052e0:	6033      	str	r3, [r6, #0]
 80052e2:	4630      	mov	r0, r6
 80052e4:	f000 f80c 	bl	8005300 <__malloc_unlock>
 80052e8:	e794      	b.n	8005214 <_malloc_r+0x20>
 80052ea:	6005      	str	r5, [r0, #0]
 80052ec:	e7d6      	b.n	800529c <_malloc_r+0xa8>
 80052ee:	bf00      	nop
 80052f0:	20000314 	.word	0x20000314

080052f4 <__malloc_lock>:
 80052f4:	4801      	ldr	r0, [pc, #4]	@ (80052fc <__malloc_lock+0x8>)
 80052f6:	f7ff bf0e 	b.w	8005116 <__retarget_lock_acquire_recursive>
 80052fa:	bf00      	nop
 80052fc:	2000030c 	.word	0x2000030c

08005300 <__malloc_unlock>:
 8005300:	4801      	ldr	r0, [pc, #4]	@ (8005308 <__malloc_unlock+0x8>)
 8005302:	f7ff bf09 	b.w	8005118 <__retarget_lock_release_recursive>
 8005306:	bf00      	nop
 8005308:	2000030c 	.word	0x2000030c

0800530c <__sfputc_r>:
 800530c:	6893      	ldr	r3, [r2, #8]
 800530e:	3b01      	subs	r3, #1
 8005310:	2b00      	cmp	r3, #0
 8005312:	b410      	push	{r4}
 8005314:	6093      	str	r3, [r2, #8]
 8005316:	da08      	bge.n	800532a <__sfputc_r+0x1e>
 8005318:	6994      	ldr	r4, [r2, #24]
 800531a:	42a3      	cmp	r3, r4
 800531c:	db01      	blt.n	8005322 <__sfputc_r+0x16>
 800531e:	290a      	cmp	r1, #10
 8005320:	d103      	bne.n	800532a <__sfputc_r+0x1e>
 8005322:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005326:	f000 bb6d 	b.w	8005a04 <__swbuf_r>
 800532a:	6813      	ldr	r3, [r2, #0]
 800532c:	1c58      	adds	r0, r3, #1
 800532e:	6010      	str	r0, [r2, #0]
 8005330:	7019      	strb	r1, [r3, #0]
 8005332:	4608      	mov	r0, r1
 8005334:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005338:	4770      	bx	lr

0800533a <__sfputs_r>:
 800533a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800533c:	4606      	mov	r6, r0
 800533e:	460f      	mov	r7, r1
 8005340:	4614      	mov	r4, r2
 8005342:	18d5      	adds	r5, r2, r3
 8005344:	42ac      	cmp	r4, r5
 8005346:	d101      	bne.n	800534c <__sfputs_r+0x12>
 8005348:	2000      	movs	r0, #0
 800534a:	e007      	b.n	800535c <__sfputs_r+0x22>
 800534c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005350:	463a      	mov	r2, r7
 8005352:	4630      	mov	r0, r6
 8005354:	f7ff ffda 	bl	800530c <__sfputc_r>
 8005358:	1c43      	adds	r3, r0, #1
 800535a:	d1f3      	bne.n	8005344 <__sfputs_r+0xa>
 800535c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005360 <_vfiprintf_r>:
 8005360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005364:	460d      	mov	r5, r1
 8005366:	b09d      	sub	sp, #116	@ 0x74
 8005368:	4614      	mov	r4, r2
 800536a:	4698      	mov	r8, r3
 800536c:	4606      	mov	r6, r0
 800536e:	b118      	cbz	r0, 8005378 <_vfiprintf_r+0x18>
 8005370:	6a03      	ldr	r3, [r0, #32]
 8005372:	b90b      	cbnz	r3, 8005378 <_vfiprintf_r+0x18>
 8005374:	f7ff fdca 	bl	8004f0c <__sinit>
 8005378:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800537a:	07d9      	lsls	r1, r3, #31
 800537c:	d405      	bmi.n	800538a <_vfiprintf_r+0x2a>
 800537e:	89ab      	ldrh	r3, [r5, #12]
 8005380:	059a      	lsls	r2, r3, #22
 8005382:	d402      	bmi.n	800538a <_vfiprintf_r+0x2a>
 8005384:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005386:	f7ff fec6 	bl	8005116 <__retarget_lock_acquire_recursive>
 800538a:	89ab      	ldrh	r3, [r5, #12]
 800538c:	071b      	lsls	r3, r3, #28
 800538e:	d501      	bpl.n	8005394 <_vfiprintf_r+0x34>
 8005390:	692b      	ldr	r3, [r5, #16]
 8005392:	b99b      	cbnz	r3, 80053bc <_vfiprintf_r+0x5c>
 8005394:	4629      	mov	r1, r5
 8005396:	4630      	mov	r0, r6
 8005398:	f000 fb72 	bl	8005a80 <__swsetup_r>
 800539c:	b170      	cbz	r0, 80053bc <_vfiprintf_r+0x5c>
 800539e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80053a0:	07dc      	lsls	r4, r3, #31
 80053a2:	d504      	bpl.n	80053ae <_vfiprintf_r+0x4e>
 80053a4:	f04f 30ff 	mov.w	r0, #4294967295
 80053a8:	b01d      	add	sp, #116	@ 0x74
 80053aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ae:	89ab      	ldrh	r3, [r5, #12]
 80053b0:	0598      	lsls	r0, r3, #22
 80053b2:	d4f7      	bmi.n	80053a4 <_vfiprintf_r+0x44>
 80053b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80053b6:	f7ff feaf 	bl	8005118 <__retarget_lock_release_recursive>
 80053ba:	e7f3      	b.n	80053a4 <_vfiprintf_r+0x44>
 80053bc:	2300      	movs	r3, #0
 80053be:	9309      	str	r3, [sp, #36]	@ 0x24
 80053c0:	2320      	movs	r3, #32
 80053c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80053c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80053ca:	2330      	movs	r3, #48	@ 0x30
 80053cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800557c <_vfiprintf_r+0x21c>
 80053d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80053d4:	f04f 0901 	mov.w	r9, #1
 80053d8:	4623      	mov	r3, r4
 80053da:	469a      	mov	sl, r3
 80053dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053e0:	b10a      	cbz	r2, 80053e6 <_vfiprintf_r+0x86>
 80053e2:	2a25      	cmp	r2, #37	@ 0x25
 80053e4:	d1f9      	bne.n	80053da <_vfiprintf_r+0x7a>
 80053e6:	ebba 0b04 	subs.w	fp, sl, r4
 80053ea:	d00b      	beq.n	8005404 <_vfiprintf_r+0xa4>
 80053ec:	465b      	mov	r3, fp
 80053ee:	4622      	mov	r2, r4
 80053f0:	4629      	mov	r1, r5
 80053f2:	4630      	mov	r0, r6
 80053f4:	f7ff ffa1 	bl	800533a <__sfputs_r>
 80053f8:	3001      	adds	r0, #1
 80053fa:	f000 80a7 	beq.w	800554c <_vfiprintf_r+0x1ec>
 80053fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005400:	445a      	add	r2, fp
 8005402:	9209      	str	r2, [sp, #36]	@ 0x24
 8005404:	f89a 3000 	ldrb.w	r3, [sl]
 8005408:	2b00      	cmp	r3, #0
 800540a:	f000 809f 	beq.w	800554c <_vfiprintf_r+0x1ec>
 800540e:	2300      	movs	r3, #0
 8005410:	f04f 32ff 	mov.w	r2, #4294967295
 8005414:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005418:	f10a 0a01 	add.w	sl, sl, #1
 800541c:	9304      	str	r3, [sp, #16]
 800541e:	9307      	str	r3, [sp, #28]
 8005420:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005424:	931a      	str	r3, [sp, #104]	@ 0x68
 8005426:	4654      	mov	r4, sl
 8005428:	2205      	movs	r2, #5
 800542a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800542e:	4853      	ldr	r0, [pc, #332]	@ (800557c <_vfiprintf_r+0x21c>)
 8005430:	f7fa fece 	bl	80001d0 <memchr>
 8005434:	9a04      	ldr	r2, [sp, #16]
 8005436:	b9d8      	cbnz	r0, 8005470 <_vfiprintf_r+0x110>
 8005438:	06d1      	lsls	r1, r2, #27
 800543a:	bf44      	itt	mi
 800543c:	2320      	movmi	r3, #32
 800543e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005442:	0713      	lsls	r3, r2, #28
 8005444:	bf44      	itt	mi
 8005446:	232b      	movmi	r3, #43	@ 0x2b
 8005448:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800544c:	f89a 3000 	ldrb.w	r3, [sl]
 8005450:	2b2a      	cmp	r3, #42	@ 0x2a
 8005452:	d015      	beq.n	8005480 <_vfiprintf_r+0x120>
 8005454:	9a07      	ldr	r2, [sp, #28]
 8005456:	4654      	mov	r4, sl
 8005458:	2000      	movs	r0, #0
 800545a:	f04f 0c0a 	mov.w	ip, #10
 800545e:	4621      	mov	r1, r4
 8005460:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005464:	3b30      	subs	r3, #48	@ 0x30
 8005466:	2b09      	cmp	r3, #9
 8005468:	d94b      	bls.n	8005502 <_vfiprintf_r+0x1a2>
 800546a:	b1b0      	cbz	r0, 800549a <_vfiprintf_r+0x13a>
 800546c:	9207      	str	r2, [sp, #28]
 800546e:	e014      	b.n	800549a <_vfiprintf_r+0x13a>
 8005470:	eba0 0308 	sub.w	r3, r0, r8
 8005474:	fa09 f303 	lsl.w	r3, r9, r3
 8005478:	4313      	orrs	r3, r2
 800547a:	9304      	str	r3, [sp, #16]
 800547c:	46a2      	mov	sl, r4
 800547e:	e7d2      	b.n	8005426 <_vfiprintf_r+0xc6>
 8005480:	9b03      	ldr	r3, [sp, #12]
 8005482:	1d19      	adds	r1, r3, #4
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	9103      	str	r1, [sp, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	bfbb      	ittet	lt
 800548c:	425b      	neglt	r3, r3
 800548e:	f042 0202 	orrlt.w	r2, r2, #2
 8005492:	9307      	strge	r3, [sp, #28]
 8005494:	9307      	strlt	r3, [sp, #28]
 8005496:	bfb8      	it	lt
 8005498:	9204      	strlt	r2, [sp, #16]
 800549a:	7823      	ldrb	r3, [r4, #0]
 800549c:	2b2e      	cmp	r3, #46	@ 0x2e
 800549e:	d10a      	bne.n	80054b6 <_vfiprintf_r+0x156>
 80054a0:	7863      	ldrb	r3, [r4, #1]
 80054a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80054a4:	d132      	bne.n	800550c <_vfiprintf_r+0x1ac>
 80054a6:	9b03      	ldr	r3, [sp, #12]
 80054a8:	1d1a      	adds	r2, r3, #4
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	9203      	str	r2, [sp, #12]
 80054ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80054b2:	3402      	adds	r4, #2
 80054b4:	9305      	str	r3, [sp, #20]
 80054b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800558c <_vfiprintf_r+0x22c>
 80054ba:	7821      	ldrb	r1, [r4, #0]
 80054bc:	2203      	movs	r2, #3
 80054be:	4650      	mov	r0, sl
 80054c0:	f7fa fe86 	bl	80001d0 <memchr>
 80054c4:	b138      	cbz	r0, 80054d6 <_vfiprintf_r+0x176>
 80054c6:	9b04      	ldr	r3, [sp, #16]
 80054c8:	eba0 000a 	sub.w	r0, r0, sl
 80054cc:	2240      	movs	r2, #64	@ 0x40
 80054ce:	4082      	lsls	r2, r0
 80054d0:	4313      	orrs	r3, r2
 80054d2:	3401      	adds	r4, #1
 80054d4:	9304      	str	r3, [sp, #16]
 80054d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054da:	4829      	ldr	r0, [pc, #164]	@ (8005580 <_vfiprintf_r+0x220>)
 80054dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80054e0:	2206      	movs	r2, #6
 80054e2:	f7fa fe75 	bl	80001d0 <memchr>
 80054e6:	2800      	cmp	r0, #0
 80054e8:	d03f      	beq.n	800556a <_vfiprintf_r+0x20a>
 80054ea:	4b26      	ldr	r3, [pc, #152]	@ (8005584 <_vfiprintf_r+0x224>)
 80054ec:	bb1b      	cbnz	r3, 8005536 <_vfiprintf_r+0x1d6>
 80054ee:	9b03      	ldr	r3, [sp, #12]
 80054f0:	3307      	adds	r3, #7
 80054f2:	f023 0307 	bic.w	r3, r3, #7
 80054f6:	3308      	adds	r3, #8
 80054f8:	9303      	str	r3, [sp, #12]
 80054fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054fc:	443b      	add	r3, r7
 80054fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8005500:	e76a      	b.n	80053d8 <_vfiprintf_r+0x78>
 8005502:	fb0c 3202 	mla	r2, ip, r2, r3
 8005506:	460c      	mov	r4, r1
 8005508:	2001      	movs	r0, #1
 800550a:	e7a8      	b.n	800545e <_vfiprintf_r+0xfe>
 800550c:	2300      	movs	r3, #0
 800550e:	3401      	adds	r4, #1
 8005510:	9305      	str	r3, [sp, #20]
 8005512:	4619      	mov	r1, r3
 8005514:	f04f 0c0a 	mov.w	ip, #10
 8005518:	4620      	mov	r0, r4
 800551a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800551e:	3a30      	subs	r2, #48	@ 0x30
 8005520:	2a09      	cmp	r2, #9
 8005522:	d903      	bls.n	800552c <_vfiprintf_r+0x1cc>
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0c6      	beq.n	80054b6 <_vfiprintf_r+0x156>
 8005528:	9105      	str	r1, [sp, #20]
 800552a:	e7c4      	b.n	80054b6 <_vfiprintf_r+0x156>
 800552c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005530:	4604      	mov	r4, r0
 8005532:	2301      	movs	r3, #1
 8005534:	e7f0      	b.n	8005518 <_vfiprintf_r+0x1b8>
 8005536:	ab03      	add	r3, sp, #12
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	462a      	mov	r2, r5
 800553c:	4b12      	ldr	r3, [pc, #72]	@ (8005588 <_vfiprintf_r+0x228>)
 800553e:	a904      	add	r1, sp, #16
 8005540:	4630      	mov	r0, r6
 8005542:	f3af 8000 	nop.w
 8005546:	4607      	mov	r7, r0
 8005548:	1c78      	adds	r0, r7, #1
 800554a:	d1d6      	bne.n	80054fa <_vfiprintf_r+0x19a>
 800554c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800554e:	07d9      	lsls	r1, r3, #31
 8005550:	d405      	bmi.n	800555e <_vfiprintf_r+0x1fe>
 8005552:	89ab      	ldrh	r3, [r5, #12]
 8005554:	059a      	lsls	r2, r3, #22
 8005556:	d402      	bmi.n	800555e <_vfiprintf_r+0x1fe>
 8005558:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800555a:	f7ff fddd 	bl	8005118 <__retarget_lock_release_recursive>
 800555e:	89ab      	ldrh	r3, [r5, #12]
 8005560:	065b      	lsls	r3, r3, #25
 8005562:	f53f af1f 	bmi.w	80053a4 <_vfiprintf_r+0x44>
 8005566:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005568:	e71e      	b.n	80053a8 <_vfiprintf_r+0x48>
 800556a:	ab03      	add	r3, sp, #12
 800556c:	9300      	str	r3, [sp, #0]
 800556e:	462a      	mov	r2, r5
 8005570:	4b05      	ldr	r3, [pc, #20]	@ (8005588 <_vfiprintf_r+0x228>)
 8005572:	a904      	add	r1, sp, #16
 8005574:	4630      	mov	r0, r6
 8005576:	f000 f879 	bl	800566c <_printf_i>
 800557a:	e7e4      	b.n	8005546 <_vfiprintf_r+0x1e6>
 800557c:	08005c90 	.word	0x08005c90
 8005580:	08005c9a 	.word	0x08005c9a
 8005584:	00000000 	.word	0x00000000
 8005588:	0800533b 	.word	0x0800533b
 800558c:	08005c96 	.word	0x08005c96

08005590 <_printf_common>:
 8005590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005594:	4616      	mov	r6, r2
 8005596:	4698      	mov	r8, r3
 8005598:	688a      	ldr	r2, [r1, #8]
 800559a:	690b      	ldr	r3, [r1, #16]
 800559c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80055a0:	4293      	cmp	r3, r2
 80055a2:	bfb8      	it	lt
 80055a4:	4613      	movlt	r3, r2
 80055a6:	6033      	str	r3, [r6, #0]
 80055a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80055ac:	4607      	mov	r7, r0
 80055ae:	460c      	mov	r4, r1
 80055b0:	b10a      	cbz	r2, 80055b6 <_printf_common+0x26>
 80055b2:	3301      	adds	r3, #1
 80055b4:	6033      	str	r3, [r6, #0]
 80055b6:	6823      	ldr	r3, [r4, #0]
 80055b8:	0699      	lsls	r1, r3, #26
 80055ba:	bf42      	ittt	mi
 80055bc:	6833      	ldrmi	r3, [r6, #0]
 80055be:	3302      	addmi	r3, #2
 80055c0:	6033      	strmi	r3, [r6, #0]
 80055c2:	6825      	ldr	r5, [r4, #0]
 80055c4:	f015 0506 	ands.w	r5, r5, #6
 80055c8:	d106      	bne.n	80055d8 <_printf_common+0x48>
 80055ca:	f104 0a19 	add.w	sl, r4, #25
 80055ce:	68e3      	ldr	r3, [r4, #12]
 80055d0:	6832      	ldr	r2, [r6, #0]
 80055d2:	1a9b      	subs	r3, r3, r2
 80055d4:	42ab      	cmp	r3, r5
 80055d6:	dc26      	bgt.n	8005626 <_printf_common+0x96>
 80055d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80055dc:	6822      	ldr	r2, [r4, #0]
 80055de:	3b00      	subs	r3, #0
 80055e0:	bf18      	it	ne
 80055e2:	2301      	movne	r3, #1
 80055e4:	0692      	lsls	r2, r2, #26
 80055e6:	d42b      	bmi.n	8005640 <_printf_common+0xb0>
 80055e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80055ec:	4641      	mov	r1, r8
 80055ee:	4638      	mov	r0, r7
 80055f0:	47c8      	blx	r9
 80055f2:	3001      	adds	r0, #1
 80055f4:	d01e      	beq.n	8005634 <_printf_common+0xa4>
 80055f6:	6823      	ldr	r3, [r4, #0]
 80055f8:	6922      	ldr	r2, [r4, #16]
 80055fa:	f003 0306 	and.w	r3, r3, #6
 80055fe:	2b04      	cmp	r3, #4
 8005600:	bf02      	ittt	eq
 8005602:	68e5      	ldreq	r5, [r4, #12]
 8005604:	6833      	ldreq	r3, [r6, #0]
 8005606:	1aed      	subeq	r5, r5, r3
 8005608:	68a3      	ldr	r3, [r4, #8]
 800560a:	bf0c      	ite	eq
 800560c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005610:	2500      	movne	r5, #0
 8005612:	4293      	cmp	r3, r2
 8005614:	bfc4      	itt	gt
 8005616:	1a9b      	subgt	r3, r3, r2
 8005618:	18ed      	addgt	r5, r5, r3
 800561a:	2600      	movs	r6, #0
 800561c:	341a      	adds	r4, #26
 800561e:	42b5      	cmp	r5, r6
 8005620:	d11a      	bne.n	8005658 <_printf_common+0xc8>
 8005622:	2000      	movs	r0, #0
 8005624:	e008      	b.n	8005638 <_printf_common+0xa8>
 8005626:	2301      	movs	r3, #1
 8005628:	4652      	mov	r2, sl
 800562a:	4641      	mov	r1, r8
 800562c:	4638      	mov	r0, r7
 800562e:	47c8      	blx	r9
 8005630:	3001      	adds	r0, #1
 8005632:	d103      	bne.n	800563c <_printf_common+0xac>
 8005634:	f04f 30ff 	mov.w	r0, #4294967295
 8005638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800563c:	3501      	adds	r5, #1
 800563e:	e7c6      	b.n	80055ce <_printf_common+0x3e>
 8005640:	18e1      	adds	r1, r4, r3
 8005642:	1c5a      	adds	r2, r3, #1
 8005644:	2030      	movs	r0, #48	@ 0x30
 8005646:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800564a:	4422      	add	r2, r4
 800564c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005650:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005654:	3302      	adds	r3, #2
 8005656:	e7c7      	b.n	80055e8 <_printf_common+0x58>
 8005658:	2301      	movs	r3, #1
 800565a:	4622      	mov	r2, r4
 800565c:	4641      	mov	r1, r8
 800565e:	4638      	mov	r0, r7
 8005660:	47c8      	blx	r9
 8005662:	3001      	adds	r0, #1
 8005664:	d0e6      	beq.n	8005634 <_printf_common+0xa4>
 8005666:	3601      	adds	r6, #1
 8005668:	e7d9      	b.n	800561e <_printf_common+0x8e>
	...

0800566c <_printf_i>:
 800566c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005670:	7e0f      	ldrb	r7, [r1, #24]
 8005672:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005674:	2f78      	cmp	r7, #120	@ 0x78
 8005676:	4691      	mov	r9, r2
 8005678:	4680      	mov	r8, r0
 800567a:	460c      	mov	r4, r1
 800567c:	469a      	mov	sl, r3
 800567e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005682:	d807      	bhi.n	8005694 <_printf_i+0x28>
 8005684:	2f62      	cmp	r7, #98	@ 0x62
 8005686:	d80a      	bhi.n	800569e <_printf_i+0x32>
 8005688:	2f00      	cmp	r7, #0
 800568a:	f000 80d2 	beq.w	8005832 <_printf_i+0x1c6>
 800568e:	2f58      	cmp	r7, #88	@ 0x58
 8005690:	f000 80b9 	beq.w	8005806 <_printf_i+0x19a>
 8005694:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005698:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800569c:	e03a      	b.n	8005714 <_printf_i+0xa8>
 800569e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80056a2:	2b15      	cmp	r3, #21
 80056a4:	d8f6      	bhi.n	8005694 <_printf_i+0x28>
 80056a6:	a101      	add	r1, pc, #4	@ (adr r1, 80056ac <_printf_i+0x40>)
 80056a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056ac:	08005705 	.word	0x08005705
 80056b0:	08005719 	.word	0x08005719
 80056b4:	08005695 	.word	0x08005695
 80056b8:	08005695 	.word	0x08005695
 80056bc:	08005695 	.word	0x08005695
 80056c0:	08005695 	.word	0x08005695
 80056c4:	08005719 	.word	0x08005719
 80056c8:	08005695 	.word	0x08005695
 80056cc:	08005695 	.word	0x08005695
 80056d0:	08005695 	.word	0x08005695
 80056d4:	08005695 	.word	0x08005695
 80056d8:	08005819 	.word	0x08005819
 80056dc:	08005743 	.word	0x08005743
 80056e0:	080057d3 	.word	0x080057d3
 80056e4:	08005695 	.word	0x08005695
 80056e8:	08005695 	.word	0x08005695
 80056ec:	0800583b 	.word	0x0800583b
 80056f0:	08005695 	.word	0x08005695
 80056f4:	08005743 	.word	0x08005743
 80056f8:	08005695 	.word	0x08005695
 80056fc:	08005695 	.word	0x08005695
 8005700:	080057db 	.word	0x080057db
 8005704:	6833      	ldr	r3, [r6, #0]
 8005706:	1d1a      	adds	r2, r3, #4
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6032      	str	r2, [r6, #0]
 800570c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005710:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005714:	2301      	movs	r3, #1
 8005716:	e09d      	b.n	8005854 <_printf_i+0x1e8>
 8005718:	6833      	ldr	r3, [r6, #0]
 800571a:	6820      	ldr	r0, [r4, #0]
 800571c:	1d19      	adds	r1, r3, #4
 800571e:	6031      	str	r1, [r6, #0]
 8005720:	0606      	lsls	r6, r0, #24
 8005722:	d501      	bpl.n	8005728 <_printf_i+0xbc>
 8005724:	681d      	ldr	r5, [r3, #0]
 8005726:	e003      	b.n	8005730 <_printf_i+0xc4>
 8005728:	0645      	lsls	r5, r0, #25
 800572a:	d5fb      	bpl.n	8005724 <_printf_i+0xb8>
 800572c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005730:	2d00      	cmp	r5, #0
 8005732:	da03      	bge.n	800573c <_printf_i+0xd0>
 8005734:	232d      	movs	r3, #45	@ 0x2d
 8005736:	426d      	negs	r5, r5
 8005738:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800573c:	4859      	ldr	r0, [pc, #356]	@ (80058a4 <_printf_i+0x238>)
 800573e:	230a      	movs	r3, #10
 8005740:	e011      	b.n	8005766 <_printf_i+0xfa>
 8005742:	6821      	ldr	r1, [r4, #0]
 8005744:	6833      	ldr	r3, [r6, #0]
 8005746:	0608      	lsls	r0, r1, #24
 8005748:	f853 5b04 	ldr.w	r5, [r3], #4
 800574c:	d402      	bmi.n	8005754 <_printf_i+0xe8>
 800574e:	0649      	lsls	r1, r1, #25
 8005750:	bf48      	it	mi
 8005752:	b2ad      	uxthmi	r5, r5
 8005754:	2f6f      	cmp	r7, #111	@ 0x6f
 8005756:	4853      	ldr	r0, [pc, #332]	@ (80058a4 <_printf_i+0x238>)
 8005758:	6033      	str	r3, [r6, #0]
 800575a:	bf14      	ite	ne
 800575c:	230a      	movne	r3, #10
 800575e:	2308      	moveq	r3, #8
 8005760:	2100      	movs	r1, #0
 8005762:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005766:	6866      	ldr	r6, [r4, #4]
 8005768:	60a6      	str	r6, [r4, #8]
 800576a:	2e00      	cmp	r6, #0
 800576c:	bfa2      	ittt	ge
 800576e:	6821      	ldrge	r1, [r4, #0]
 8005770:	f021 0104 	bicge.w	r1, r1, #4
 8005774:	6021      	strge	r1, [r4, #0]
 8005776:	b90d      	cbnz	r5, 800577c <_printf_i+0x110>
 8005778:	2e00      	cmp	r6, #0
 800577a:	d04b      	beq.n	8005814 <_printf_i+0x1a8>
 800577c:	4616      	mov	r6, r2
 800577e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005782:	fb03 5711 	mls	r7, r3, r1, r5
 8005786:	5dc7      	ldrb	r7, [r0, r7]
 8005788:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800578c:	462f      	mov	r7, r5
 800578e:	42bb      	cmp	r3, r7
 8005790:	460d      	mov	r5, r1
 8005792:	d9f4      	bls.n	800577e <_printf_i+0x112>
 8005794:	2b08      	cmp	r3, #8
 8005796:	d10b      	bne.n	80057b0 <_printf_i+0x144>
 8005798:	6823      	ldr	r3, [r4, #0]
 800579a:	07df      	lsls	r7, r3, #31
 800579c:	d508      	bpl.n	80057b0 <_printf_i+0x144>
 800579e:	6923      	ldr	r3, [r4, #16]
 80057a0:	6861      	ldr	r1, [r4, #4]
 80057a2:	4299      	cmp	r1, r3
 80057a4:	bfde      	ittt	le
 80057a6:	2330      	movle	r3, #48	@ 0x30
 80057a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80057b0:	1b92      	subs	r2, r2, r6
 80057b2:	6122      	str	r2, [r4, #16]
 80057b4:	f8cd a000 	str.w	sl, [sp]
 80057b8:	464b      	mov	r3, r9
 80057ba:	aa03      	add	r2, sp, #12
 80057bc:	4621      	mov	r1, r4
 80057be:	4640      	mov	r0, r8
 80057c0:	f7ff fee6 	bl	8005590 <_printf_common>
 80057c4:	3001      	adds	r0, #1
 80057c6:	d14a      	bne.n	800585e <_printf_i+0x1f2>
 80057c8:	f04f 30ff 	mov.w	r0, #4294967295
 80057cc:	b004      	add	sp, #16
 80057ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057d2:	6823      	ldr	r3, [r4, #0]
 80057d4:	f043 0320 	orr.w	r3, r3, #32
 80057d8:	6023      	str	r3, [r4, #0]
 80057da:	4833      	ldr	r0, [pc, #204]	@ (80058a8 <_printf_i+0x23c>)
 80057dc:	2778      	movs	r7, #120	@ 0x78
 80057de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80057e2:	6823      	ldr	r3, [r4, #0]
 80057e4:	6831      	ldr	r1, [r6, #0]
 80057e6:	061f      	lsls	r7, r3, #24
 80057e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80057ec:	d402      	bmi.n	80057f4 <_printf_i+0x188>
 80057ee:	065f      	lsls	r7, r3, #25
 80057f0:	bf48      	it	mi
 80057f2:	b2ad      	uxthmi	r5, r5
 80057f4:	6031      	str	r1, [r6, #0]
 80057f6:	07d9      	lsls	r1, r3, #31
 80057f8:	bf44      	itt	mi
 80057fa:	f043 0320 	orrmi.w	r3, r3, #32
 80057fe:	6023      	strmi	r3, [r4, #0]
 8005800:	b11d      	cbz	r5, 800580a <_printf_i+0x19e>
 8005802:	2310      	movs	r3, #16
 8005804:	e7ac      	b.n	8005760 <_printf_i+0xf4>
 8005806:	4827      	ldr	r0, [pc, #156]	@ (80058a4 <_printf_i+0x238>)
 8005808:	e7e9      	b.n	80057de <_printf_i+0x172>
 800580a:	6823      	ldr	r3, [r4, #0]
 800580c:	f023 0320 	bic.w	r3, r3, #32
 8005810:	6023      	str	r3, [r4, #0]
 8005812:	e7f6      	b.n	8005802 <_printf_i+0x196>
 8005814:	4616      	mov	r6, r2
 8005816:	e7bd      	b.n	8005794 <_printf_i+0x128>
 8005818:	6833      	ldr	r3, [r6, #0]
 800581a:	6825      	ldr	r5, [r4, #0]
 800581c:	6961      	ldr	r1, [r4, #20]
 800581e:	1d18      	adds	r0, r3, #4
 8005820:	6030      	str	r0, [r6, #0]
 8005822:	062e      	lsls	r6, r5, #24
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	d501      	bpl.n	800582c <_printf_i+0x1c0>
 8005828:	6019      	str	r1, [r3, #0]
 800582a:	e002      	b.n	8005832 <_printf_i+0x1c6>
 800582c:	0668      	lsls	r0, r5, #25
 800582e:	d5fb      	bpl.n	8005828 <_printf_i+0x1bc>
 8005830:	8019      	strh	r1, [r3, #0]
 8005832:	2300      	movs	r3, #0
 8005834:	6123      	str	r3, [r4, #16]
 8005836:	4616      	mov	r6, r2
 8005838:	e7bc      	b.n	80057b4 <_printf_i+0x148>
 800583a:	6833      	ldr	r3, [r6, #0]
 800583c:	1d1a      	adds	r2, r3, #4
 800583e:	6032      	str	r2, [r6, #0]
 8005840:	681e      	ldr	r6, [r3, #0]
 8005842:	6862      	ldr	r2, [r4, #4]
 8005844:	2100      	movs	r1, #0
 8005846:	4630      	mov	r0, r6
 8005848:	f7fa fcc2 	bl	80001d0 <memchr>
 800584c:	b108      	cbz	r0, 8005852 <_printf_i+0x1e6>
 800584e:	1b80      	subs	r0, r0, r6
 8005850:	6060      	str	r0, [r4, #4]
 8005852:	6863      	ldr	r3, [r4, #4]
 8005854:	6123      	str	r3, [r4, #16]
 8005856:	2300      	movs	r3, #0
 8005858:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800585c:	e7aa      	b.n	80057b4 <_printf_i+0x148>
 800585e:	6923      	ldr	r3, [r4, #16]
 8005860:	4632      	mov	r2, r6
 8005862:	4649      	mov	r1, r9
 8005864:	4640      	mov	r0, r8
 8005866:	47d0      	blx	sl
 8005868:	3001      	adds	r0, #1
 800586a:	d0ad      	beq.n	80057c8 <_printf_i+0x15c>
 800586c:	6823      	ldr	r3, [r4, #0]
 800586e:	079b      	lsls	r3, r3, #30
 8005870:	d413      	bmi.n	800589a <_printf_i+0x22e>
 8005872:	68e0      	ldr	r0, [r4, #12]
 8005874:	9b03      	ldr	r3, [sp, #12]
 8005876:	4298      	cmp	r0, r3
 8005878:	bfb8      	it	lt
 800587a:	4618      	movlt	r0, r3
 800587c:	e7a6      	b.n	80057cc <_printf_i+0x160>
 800587e:	2301      	movs	r3, #1
 8005880:	4632      	mov	r2, r6
 8005882:	4649      	mov	r1, r9
 8005884:	4640      	mov	r0, r8
 8005886:	47d0      	blx	sl
 8005888:	3001      	adds	r0, #1
 800588a:	d09d      	beq.n	80057c8 <_printf_i+0x15c>
 800588c:	3501      	adds	r5, #1
 800588e:	68e3      	ldr	r3, [r4, #12]
 8005890:	9903      	ldr	r1, [sp, #12]
 8005892:	1a5b      	subs	r3, r3, r1
 8005894:	42ab      	cmp	r3, r5
 8005896:	dcf2      	bgt.n	800587e <_printf_i+0x212>
 8005898:	e7eb      	b.n	8005872 <_printf_i+0x206>
 800589a:	2500      	movs	r5, #0
 800589c:	f104 0619 	add.w	r6, r4, #25
 80058a0:	e7f5      	b.n	800588e <_printf_i+0x222>
 80058a2:	bf00      	nop
 80058a4:	08005ca1 	.word	0x08005ca1
 80058a8:	08005cb2 	.word	0x08005cb2

080058ac <__sflush_r>:
 80058ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80058b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058b4:	0716      	lsls	r6, r2, #28
 80058b6:	4605      	mov	r5, r0
 80058b8:	460c      	mov	r4, r1
 80058ba:	d454      	bmi.n	8005966 <__sflush_r+0xba>
 80058bc:	684b      	ldr	r3, [r1, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	dc02      	bgt.n	80058c8 <__sflush_r+0x1c>
 80058c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	dd48      	ble.n	800595a <__sflush_r+0xae>
 80058c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80058ca:	2e00      	cmp	r6, #0
 80058cc:	d045      	beq.n	800595a <__sflush_r+0xae>
 80058ce:	2300      	movs	r3, #0
 80058d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80058d4:	682f      	ldr	r7, [r5, #0]
 80058d6:	6a21      	ldr	r1, [r4, #32]
 80058d8:	602b      	str	r3, [r5, #0]
 80058da:	d030      	beq.n	800593e <__sflush_r+0x92>
 80058dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80058de:	89a3      	ldrh	r3, [r4, #12]
 80058e0:	0759      	lsls	r1, r3, #29
 80058e2:	d505      	bpl.n	80058f0 <__sflush_r+0x44>
 80058e4:	6863      	ldr	r3, [r4, #4]
 80058e6:	1ad2      	subs	r2, r2, r3
 80058e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80058ea:	b10b      	cbz	r3, 80058f0 <__sflush_r+0x44>
 80058ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80058ee:	1ad2      	subs	r2, r2, r3
 80058f0:	2300      	movs	r3, #0
 80058f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80058f4:	6a21      	ldr	r1, [r4, #32]
 80058f6:	4628      	mov	r0, r5
 80058f8:	47b0      	blx	r6
 80058fa:	1c43      	adds	r3, r0, #1
 80058fc:	89a3      	ldrh	r3, [r4, #12]
 80058fe:	d106      	bne.n	800590e <__sflush_r+0x62>
 8005900:	6829      	ldr	r1, [r5, #0]
 8005902:	291d      	cmp	r1, #29
 8005904:	d82b      	bhi.n	800595e <__sflush_r+0xb2>
 8005906:	4a2a      	ldr	r2, [pc, #168]	@ (80059b0 <__sflush_r+0x104>)
 8005908:	410a      	asrs	r2, r1
 800590a:	07d6      	lsls	r6, r2, #31
 800590c:	d427      	bmi.n	800595e <__sflush_r+0xb2>
 800590e:	2200      	movs	r2, #0
 8005910:	6062      	str	r2, [r4, #4]
 8005912:	04d9      	lsls	r1, r3, #19
 8005914:	6922      	ldr	r2, [r4, #16]
 8005916:	6022      	str	r2, [r4, #0]
 8005918:	d504      	bpl.n	8005924 <__sflush_r+0x78>
 800591a:	1c42      	adds	r2, r0, #1
 800591c:	d101      	bne.n	8005922 <__sflush_r+0x76>
 800591e:	682b      	ldr	r3, [r5, #0]
 8005920:	b903      	cbnz	r3, 8005924 <__sflush_r+0x78>
 8005922:	6560      	str	r0, [r4, #84]	@ 0x54
 8005924:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005926:	602f      	str	r7, [r5, #0]
 8005928:	b1b9      	cbz	r1, 800595a <__sflush_r+0xae>
 800592a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800592e:	4299      	cmp	r1, r3
 8005930:	d002      	beq.n	8005938 <__sflush_r+0x8c>
 8005932:	4628      	mov	r0, r5
 8005934:	f7ff fbf2 	bl	800511c <_free_r>
 8005938:	2300      	movs	r3, #0
 800593a:	6363      	str	r3, [r4, #52]	@ 0x34
 800593c:	e00d      	b.n	800595a <__sflush_r+0xae>
 800593e:	2301      	movs	r3, #1
 8005940:	4628      	mov	r0, r5
 8005942:	47b0      	blx	r6
 8005944:	4602      	mov	r2, r0
 8005946:	1c50      	adds	r0, r2, #1
 8005948:	d1c9      	bne.n	80058de <__sflush_r+0x32>
 800594a:	682b      	ldr	r3, [r5, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d0c6      	beq.n	80058de <__sflush_r+0x32>
 8005950:	2b1d      	cmp	r3, #29
 8005952:	d001      	beq.n	8005958 <__sflush_r+0xac>
 8005954:	2b16      	cmp	r3, #22
 8005956:	d11e      	bne.n	8005996 <__sflush_r+0xea>
 8005958:	602f      	str	r7, [r5, #0]
 800595a:	2000      	movs	r0, #0
 800595c:	e022      	b.n	80059a4 <__sflush_r+0xf8>
 800595e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005962:	b21b      	sxth	r3, r3
 8005964:	e01b      	b.n	800599e <__sflush_r+0xf2>
 8005966:	690f      	ldr	r7, [r1, #16]
 8005968:	2f00      	cmp	r7, #0
 800596a:	d0f6      	beq.n	800595a <__sflush_r+0xae>
 800596c:	0793      	lsls	r3, r2, #30
 800596e:	680e      	ldr	r6, [r1, #0]
 8005970:	bf08      	it	eq
 8005972:	694b      	ldreq	r3, [r1, #20]
 8005974:	600f      	str	r7, [r1, #0]
 8005976:	bf18      	it	ne
 8005978:	2300      	movne	r3, #0
 800597a:	eba6 0807 	sub.w	r8, r6, r7
 800597e:	608b      	str	r3, [r1, #8]
 8005980:	f1b8 0f00 	cmp.w	r8, #0
 8005984:	dde9      	ble.n	800595a <__sflush_r+0xae>
 8005986:	6a21      	ldr	r1, [r4, #32]
 8005988:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800598a:	4643      	mov	r3, r8
 800598c:	463a      	mov	r2, r7
 800598e:	4628      	mov	r0, r5
 8005990:	47b0      	blx	r6
 8005992:	2800      	cmp	r0, #0
 8005994:	dc08      	bgt.n	80059a8 <__sflush_r+0xfc>
 8005996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800599a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800599e:	81a3      	strh	r3, [r4, #12]
 80059a0:	f04f 30ff 	mov.w	r0, #4294967295
 80059a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059a8:	4407      	add	r7, r0
 80059aa:	eba8 0800 	sub.w	r8, r8, r0
 80059ae:	e7e7      	b.n	8005980 <__sflush_r+0xd4>
 80059b0:	dfbffffe 	.word	0xdfbffffe

080059b4 <_fflush_r>:
 80059b4:	b538      	push	{r3, r4, r5, lr}
 80059b6:	690b      	ldr	r3, [r1, #16]
 80059b8:	4605      	mov	r5, r0
 80059ba:	460c      	mov	r4, r1
 80059bc:	b913      	cbnz	r3, 80059c4 <_fflush_r+0x10>
 80059be:	2500      	movs	r5, #0
 80059c0:	4628      	mov	r0, r5
 80059c2:	bd38      	pop	{r3, r4, r5, pc}
 80059c4:	b118      	cbz	r0, 80059ce <_fflush_r+0x1a>
 80059c6:	6a03      	ldr	r3, [r0, #32]
 80059c8:	b90b      	cbnz	r3, 80059ce <_fflush_r+0x1a>
 80059ca:	f7ff fa9f 	bl	8004f0c <__sinit>
 80059ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d0f3      	beq.n	80059be <_fflush_r+0xa>
 80059d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80059d8:	07d0      	lsls	r0, r2, #31
 80059da:	d404      	bmi.n	80059e6 <_fflush_r+0x32>
 80059dc:	0599      	lsls	r1, r3, #22
 80059de:	d402      	bmi.n	80059e6 <_fflush_r+0x32>
 80059e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059e2:	f7ff fb98 	bl	8005116 <__retarget_lock_acquire_recursive>
 80059e6:	4628      	mov	r0, r5
 80059e8:	4621      	mov	r1, r4
 80059ea:	f7ff ff5f 	bl	80058ac <__sflush_r>
 80059ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80059f0:	07da      	lsls	r2, r3, #31
 80059f2:	4605      	mov	r5, r0
 80059f4:	d4e4      	bmi.n	80059c0 <_fflush_r+0xc>
 80059f6:	89a3      	ldrh	r3, [r4, #12]
 80059f8:	059b      	lsls	r3, r3, #22
 80059fa:	d4e1      	bmi.n	80059c0 <_fflush_r+0xc>
 80059fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059fe:	f7ff fb8b 	bl	8005118 <__retarget_lock_release_recursive>
 8005a02:	e7dd      	b.n	80059c0 <_fflush_r+0xc>

08005a04 <__swbuf_r>:
 8005a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a06:	460e      	mov	r6, r1
 8005a08:	4614      	mov	r4, r2
 8005a0a:	4605      	mov	r5, r0
 8005a0c:	b118      	cbz	r0, 8005a16 <__swbuf_r+0x12>
 8005a0e:	6a03      	ldr	r3, [r0, #32]
 8005a10:	b90b      	cbnz	r3, 8005a16 <__swbuf_r+0x12>
 8005a12:	f7ff fa7b 	bl	8004f0c <__sinit>
 8005a16:	69a3      	ldr	r3, [r4, #24]
 8005a18:	60a3      	str	r3, [r4, #8]
 8005a1a:	89a3      	ldrh	r3, [r4, #12]
 8005a1c:	071a      	lsls	r2, r3, #28
 8005a1e:	d501      	bpl.n	8005a24 <__swbuf_r+0x20>
 8005a20:	6923      	ldr	r3, [r4, #16]
 8005a22:	b943      	cbnz	r3, 8005a36 <__swbuf_r+0x32>
 8005a24:	4621      	mov	r1, r4
 8005a26:	4628      	mov	r0, r5
 8005a28:	f000 f82a 	bl	8005a80 <__swsetup_r>
 8005a2c:	b118      	cbz	r0, 8005a36 <__swbuf_r+0x32>
 8005a2e:	f04f 37ff 	mov.w	r7, #4294967295
 8005a32:	4638      	mov	r0, r7
 8005a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	6922      	ldr	r2, [r4, #16]
 8005a3a:	1a98      	subs	r0, r3, r2
 8005a3c:	6963      	ldr	r3, [r4, #20]
 8005a3e:	b2f6      	uxtb	r6, r6
 8005a40:	4283      	cmp	r3, r0
 8005a42:	4637      	mov	r7, r6
 8005a44:	dc05      	bgt.n	8005a52 <__swbuf_r+0x4e>
 8005a46:	4621      	mov	r1, r4
 8005a48:	4628      	mov	r0, r5
 8005a4a:	f7ff ffb3 	bl	80059b4 <_fflush_r>
 8005a4e:	2800      	cmp	r0, #0
 8005a50:	d1ed      	bne.n	8005a2e <__swbuf_r+0x2a>
 8005a52:	68a3      	ldr	r3, [r4, #8]
 8005a54:	3b01      	subs	r3, #1
 8005a56:	60a3      	str	r3, [r4, #8]
 8005a58:	6823      	ldr	r3, [r4, #0]
 8005a5a:	1c5a      	adds	r2, r3, #1
 8005a5c:	6022      	str	r2, [r4, #0]
 8005a5e:	701e      	strb	r6, [r3, #0]
 8005a60:	6962      	ldr	r2, [r4, #20]
 8005a62:	1c43      	adds	r3, r0, #1
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d004      	beq.n	8005a72 <__swbuf_r+0x6e>
 8005a68:	89a3      	ldrh	r3, [r4, #12]
 8005a6a:	07db      	lsls	r3, r3, #31
 8005a6c:	d5e1      	bpl.n	8005a32 <__swbuf_r+0x2e>
 8005a6e:	2e0a      	cmp	r6, #10
 8005a70:	d1df      	bne.n	8005a32 <__swbuf_r+0x2e>
 8005a72:	4621      	mov	r1, r4
 8005a74:	4628      	mov	r0, r5
 8005a76:	f7ff ff9d 	bl	80059b4 <_fflush_r>
 8005a7a:	2800      	cmp	r0, #0
 8005a7c:	d0d9      	beq.n	8005a32 <__swbuf_r+0x2e>
 8005a7e:	e7d6      	b.n	8005a2e <__swbuf_r+0x2a>

08005a80 <__swsetup_r>:
 8005a80:	b538      	push	{r3, r4, r5, lr}
 8005a82:	4b29      	ldr	r3, [pc, #164]	@ (8005b28 <__swsetup_r+0xa8>)
 8005a84:	4605      	mov	r5, r0
 8005a86:	6818      	ldr	r0, [r3, #0]
 8005a88:	460c      	mov	r4, r1
 8005a8a:	b118      	cbz	r0, 8005a94 <__swsetup_r+0x14>
 8005a8c:	6a03      	ldr	r3, [r0, #32]
 8005a8e:	b90b      	cbnz	r3, 8005a94 <__swsetup_r+0x14>
 8005a90:	f7ff fa3c 	bl	8004f0c <__sinit>
 8005a94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a98:	0719      	lsls	r1, r3, #28
 8005a9a:	d422      	bmi.n	8005ae2 <__swsetup_r+0x62>
 8005a9c:	06da      	lsls	r2, r3, #27
 8005a9e:	d407      	bmi.n	8005ab0 <__swsetup_r+0x30>
 8005aa0:	2209      	movs	r2, #9
 8005aa2:	602a      	str	r2, [r5, #0]
 8005aa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005aa8:	81a3      	strh	r3, [r4, #12]
 8005aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8005aae:	e033      	b.n	8005b18 <__swsetup_r+0x98>
 8005ab0:	0758      	lsls	r0, r3, #29
 8005ab2:	d512      	bpl.n	8005ada <__swsetup_r+0x5a>
 8005ab4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ab6:	b141      	cbz	r1, 8005aca <__swsetup_r+0x4a>
 8005ab8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005abc:	4299      	cmp	r1, r3
 8005abe:	d002      	beq.n	8005ac6 <__swsetup_r+0x46>
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	f7ff fb2b 	bl	800511c <_free_r>
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	6363      	str	r3, [r4, #52]	@ 0x34
 8005aca:	89a3      	ldrh	r3, [r4, #12]
 8005acc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005ad0:	81a3      	strh	r3, [r4, #12]
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	6063      	str	r3, [r4, #4]
 8005ad6:	6923      	ldr	r3, [r4, #16]
 8005ad8:	6023      	str	r3, [r4, #0]
 8005ada:	89a3      	ldrh	r3, [r4, #12]
 8005adc:	f043 0308 	orr.w	r3, r3, #8
 8005ae0:	81a3      	strh	r3, [r4, #12]
 8005ae2:	6923      	ldr	r3, [r4, #16]
 8005ae4:	b94b      	cbnz	r3, 8005afa <__swsetup_r+0x7a>
 8005ae6:	89a3      	ldrh	r3, [r4, #12]
 8005ae8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005aec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005af0:	d003      	beq.n	8005afa <__swsetup_r+0x7a>
 8005af2:	4621      	mov	r1, r4
 8005af4:	4628      	mov	r0, r5
 8005af6:	f000 f84f 	bl	8005b98 <__smakebuf_r>
 8005afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005afe:	f013 0201 	ands.w	r2, r3, #1
 8005b02:	d00a      	beq.n	8005b1a <__swsetup_r+0x9a>
 8005b04:	2200      	movs	r2, #0
 8005b06:	60a2      	str	r2, [r4, #8]
 8005b08:	6962      	ldr	r2, [r4, #20]
 8005b0a:	4252      	negs	r2, r2
 8005b0c:	61a2      	str	r2, [r4, #24]
 8005b0e:	6922      	ldr	r2, [r4, #16]
 8005b10:	b942      	cbnz	r2, 8005b24 <__swsetup_r+0xa4>
 8005b12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005b16:	d1c5      	bne.n	8005aa4 <__swsetup_r+0x24>
 8005b18:	bd38      	pop	{r3, r4, r5, pc}
 8005b1a:	0799      	lsls	r1, r3, #30
 8005b1c:	bf58      	it	pl
 8005b1e:	6962      	ldrpl	r2, [r4, #20]
 8005b20:	60a2      	str	r2, [r4, #8]
 8005b22:	e7f4      	b.n	8005b0e <__swsetup_r+0x8e>
 8005b24:	2000      	movs	r0, #0
 8005b26:	e7f7      	b.n	8005b18 <__swsetup_r+0x98>
 8005b28:	2000001c 	.word	0x2000001c

08005b2c <_sbrk_r>:
 8005b2c:	b538      	push	{r3, r4, r5, lr}
 8005b2e:	4d06      	ldr	r5, [pc, #24]	@ (8005b48 <_sbrk_r+0x1c>)
 8005b30:	2300      	movs	r3, #0
 8005b32:	4604      	mov	r4, r0
 8005b34:	4608      	mov	r0, r1
 8005b36:	602b      	str	r3, [r5, #0]
 8005b38:	f7fc fd52 	bl	80025e0 <_sbrk>
 8005b3c:	1c43      	adds	r3, r0, #1
 8005b3e:	d102      	bne.n	8005b46 <_sbrk_r+0x1a>
 8005b40:	682b      	ldr	r3, [r5, #0]
 8005b42:	b103      	cbz	r3, 8005b46 <_sbrk_r+0x1a>
 8005b44:	6023      	str	r3, [r4, #0]
 8005b46:	bd38      	pop	{r3, r4, r5, pc}
 8005b48:	20000308 	.word	0x20000308

08005b4c <__swhatbuf_r>:
 8005b4c:	b570      	push	{r4, r5, r6, lr}
 8005b4e:	460c      	mov	r4, r1
 8005b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b54:	2900      	cmp	r1, #0
 8005b56:	b096      	sub	sp, #88	@ 0x58
 8005b58:	4615      	mov	r5, r2
 8005b5a:	461e      	mov	r6, r3
 8005b5c:	da0d      	bge.n	8005b7a <__swhatbuf_r+0x2e>
 8005b5e:	89a3      	ldrh	r3, [r4, #12]
 8005b60:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005b64:	f04f 0100 	mov.w	r1, #0
 8005b68:	bf14      	ite	ne
 8005b6a:	2340      	movne	r3, #64	@ 0x40
 8005b6c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005b70:	2000      	movs	r0, #0
 8005b72:	6031      	str	r1, [r6, #0]
 8005b74:	602b      	str	r3, [r5, #0]
 8005b76:	b016      	add	sp, #88	@ 0x58
 8005b78:	bd70      	pop	{r4, r5, r6, pc}
 8005b7a:	466a      	mov	r2, sp
 8005b7c:	f000 f848 	bl	8005c10 <_fstat_r>
 8005b80:	2800      	cmp	r0, #0
 8005b82:	dbec      	blt.n	8005b5e <__swhatbuf_r+0x12>
 8005b84:	9901      	ldr	r1, [sp, #4]
 8005b86:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005b8a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005b8e:	4259      	negs	r1, r3
 8005b90:	4159      	adcs	r1, r3
 8005b92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b96:	e7eb      	b.n	8005b70 <__swhatbuf_r+0x24>

08005b98 <__smakebuf_r>:
 8005b98:	898b      	ldrh	r3, [r1, #12]
 8005b9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b9c:	079d      	lsls	r5, r3, #30
 8005b9e:	4606      	mov	r6, r0
 8005ba0:	460c      	mov	r4, r1
 8005ba2:	d507      	bpl.n	8005bb4 <__smakebuf_r+0x1c>
 8005ba4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005ba8:	6023      	str	r3, [r4, #0]
 8005baa:	6123      	str	r3, [r4, #16]
 8005bac:	2301      	movs	r3, #1
 8005bae:	6163      	str	r3, [r4, #20]
 8005bb0:	b003      	add	sp, #12
 8005bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bb4:	ab01      	add	r3, sp, #4
 8005bb6:	466a      	mov	r2, sp
 8005bb8:	f7ff ffc8 	bl	8005b4c <__swhatbuf_r>
 8005bbc:	9f00      	ldr	r7, [sp, #0]
 8005bbe:	4605      	mov	r5, r0
 8005bc0:	4639      	mov	r1, r7
 8005bc2:	4630      	mov	r0, r6
 8005bc4:	f7ff fb16 	bl	80051f4 <_malloc_r>
 8005bc8:	b948      	cbnz	r0, 8005bde <__smakebuf_r+0x46>
 8005bca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bce:	059a      	lsls	r2, r3, #22
 8005bd0:	d4ee      	bmi.n	8005bb0 <__smakebuf_r+0x18>
 8005bd2:	f023 0303 	bic.w	r3, r3, #3
 8005bd6:	f043 0302 	orr.w	r3, r3, #2
 8005bda:	81a3      	strh	r3, [r4, #12]
 8005bdc:	e7e2      	b.n	8005ba4 <__smakebuf_r+0xc>
 8005bde:	89a3      	ldrh	r3, [r4, #12]
 8005be0:	6020      	str	r0, [r4, #0]
 8005be2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005be6:	81a3      	strh	r3, [r4, #12]
 8005be8:	9b01      	ldr	r3, [sp, #4]
 8005bea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005bee:	b15b      	cbz	r3, 8005c08 <__smakebuf_r+0x70>
 8005bf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bf4:	4630      	mov	r0, r6
 8005bf6:	f000 f81d 	bl	8005c34 <_isatty_r>
 8005bfa:	b128      	cbz	r0, 8005c08 <__smakebuf_r+0x70>
 8005bfc:	89a3      	ldrh	r3, [r4, #12]
 8005bfe:	f023 0303 	bic.w	r3, r3, #3
 8005c02:	f043 0301 	orr.w	r3, r3, #1
 8005c06:	81a3      	strh	r3, [r4, #12]
 8005c08:	89a3      	ldrh	r3, [r4, #12]
 8005c0a:	431d      	orrs	r5, r3
 8005c0c:	81a5      	strh	r5, [r4, #12]
 8005c0e:	e7cf      	b.n	8005bb0 <__smakebuf_r+0x18>

08005c10 <_fstat_r>:
 8005c10:	b538      	push	{r3, r4, r5, lr}
 8005c12:	4d07      	ldr	r5, [pc, #28]	@ (8005c30 <_fstat_r+0x20>)
 8005c14:	2300      	movs	r3, #0
 8005c16:	4604      	mov	r4, r0
 8005c18:	4608      	mov	r0, r1
 8005c1a:	4611      	mov	r1, r2
 8005c1c:	602b      	str	r3, [r5, #0]
 8005c1e:	f7fc fcb7 	bl	8002590 <_fstat>
 8005c22:	1c43      	adds	r3, r0, #1
 8005c24:	d102      	bne.n	8005c2c <_fstat_r+0x1c>
 8005c26:	682b      	ldr	r3, [r5, #0]
 8005c28:	b103      	cbz	r3, 8005c2c <_fstat_r+0x1c>
 8005c2a:	6023      	str	r3, [r4, #0]
 8005c2c:	bd38      	pop	{r3, r4, r5, pc}
 8005c2e:	bf00      	nop
 8005c30:	20000308 	.word	0x20000308

08005c34 <_isatty_r>:
 8005c34:	b538      	push	{r3, r4, r5, lr}
 8005c36:	4d06      	ldr	r5, [pc, #24]	@ (8005c50 <_isatty_r+0x1c>)
 8005c38:	2300      	movs	r3, #0
 8005c3a:	4604      	mov	r4, r0
 8005c3c:	4608      	mov	r0, r1
 8005c3e:	602b      	str	r3, [r5, #0]
 8005c40:	f7fc fcb6 	bl	80025b0 <_isatty>
 8005c44:	1c43      	adds	r3, r0, #1
 8005c46:	d102      	bne.n	8005c4e <_isatty_r+0x1a>
 8005c48:	682b      	ldr	r3, [r5, #0]
 8005c4a:	b103      	cbz	r3, 8005c4e <_isatty_r+0x1a>
 8005c4c:	6023      	str	r3, [r4, #0]
 8005c4e:	bd38      	pop	{r3, r4, r5, pc}
 8005c50:	20000308 	.word	0x20000308

08005c54 <_init>:
 8005c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c56:	bf00      	nop
 8005c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c5a:	bc08      	pop	{r3}
 8005c5c:	469e      	mov	lr, r3
 8005c5e:	4770      	bx	lr

08005c60 <_fini>:
 8005c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c62:	bf00      	nop
 8005c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c66:	bc08      	pop	{r3}
 8005c68:	469e      	mov	lr, r3
 8005c6a:	4770      	bx	lr
