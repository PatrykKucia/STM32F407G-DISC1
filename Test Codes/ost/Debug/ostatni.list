
ostatni.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042f8  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004480  08004480  00005480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004490  08004490  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  08004490  08004490  00005490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004498  08004498  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004498  08004498  00005498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800449c  0800449c  0000549c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080044a0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006010  2**0
                  CONTENTS
 10 .bss          000000d0  20000010  20000010  00006010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000e0  200000e0  00006010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ba95  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000232c  00000000  00000000  00011ad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d10  00000000  00000000  00013e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009fd  00000000  00000000  00014b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022707  00000000  00000000  00015515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000105ec  00000000  00000000  00037c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc253  00000000  00000000  00048208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011445b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000036d4  00000000  00000000  001144a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  00117b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004468 	.word	0x08004468

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004468 	.word	0x08004468

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b96a 	b.w	8000ca0 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9d08      	ldr	r5, [sp, #32]
 80009ea:	460c      	mov	r4, r1
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d14e      	bne.n	8000a8e <__udivmoddi4+0xaa>
 80009f0:	4694      	mov	ip, r2
 80009f2:	458c      	cmp	ip, r1
 80009f4:	4686      	mov	lr, r0
 80009f6:	fab2 f282 	clz	r2, r2
 80009fa:	d962      	bls.n	8000ac2 <__udivmoddi4+0xde>
 80009fc:	b14a      	cbz	r2, 8000a12 <__udivmoddi4+0x2e>
 80009fe:	f1c2 0320 	rsb	r3, r2, #32
 8000a02:	4091      	lsls	r1, r2
 8000a04:	fa20 f303 	lsr.w	r3, r0, r3
 8000a08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a0c:	4319      	orrs	r1, r3
 8000a0e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a16:	fa1f f68c 	uxth.w	r6, ip
 8000a1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a22:	fb07 1114 	mls	r1, r7, r4, r1
 8000a26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a2a:	fb04 f106 	mul.w	r1, r4, r6
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d90a      	bls.n	8000a48 <__udivmoddi4+0x64>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a3a:	f080 8112 	bcs.w	8000c62 <__udivmoddi4+0x27e>
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	f240 810f 	bls.w	8000c62 <__udivmoddi4+0x27e>
 8000a44:	3c02      	subs	r4, #2
 8000a46:	4463      	add	r3, ip
 8000a48:	1a59      	subs	r1, r3, r1
 8000a4a:	fa1f f38e 	uxth.w	r3, lr
 8000a4e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a52:	fb07 1110 	mls	r1, r7, r0, r1
 8000a56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a5a:	fb00 f606 	mul.w	r6, r0, r6
 8000a5e:	429e      	cmp	r6, r3
 8000a60:	d90a      	bls.n	8000a78 <__udivmoddi4+0x94>
 8000a62:	eb1c 0303 	adds.w	r3, ip, r3
 8000a66:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a6a:	f080 80fc 	bcs.w	8000c66 <__udivmoddi4+0x282>
 8000a6e:	429e      	cmp	r6, r3
 8000a70:	f240 80f9 	bls.w	8000c66 <__udivmoddi4+0x282>
 8000a74:	4463      	add	r3, ip
 8000a76:	3802      	subs	r0, #2
 8000a78:	1b9b      	subs	r3, r3, r6
 8000a7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a7e:	2100      	movs	r1, #0
 8000a80:	b11d      	cbz	r5, 8000a8a <__udivmoddi4+0xa6>
 8000a82:	40d3      	lsrs	r3, r2
 8000a84:	2200      	movs	r2, #0
 8000a86:	e9c5 3200 	strd	r3, r2, [r5]
 8000a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8e:	428b      	cmp	r3, r1
 8000a90:	d905      	bls.n	8000a9e <__udivmoddi4+0xba>
 8000a92:	b10d      	cbz	r5, 8000a98 <__udivmoddi4+0xb4>
 8000a94:	e9c5 0100 	strd	r0, r1, [r5]
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4608      	mov	r0, r1
 8000a9c:	e7f5      	b.n	8000a8a <__udivmoddi4+0xa6>
 8000a9e:	fab3 f183 	clz	r1, r3
 8000aa2:	2900      	cmp	r1, #0
 8000aa4:	d146      	bne.n	8000b34 <__udivmoddi4+0x150>
 8000aa6:	42a3      	cmp	r3, r4
 8000aa8:	d302      	bcc.n	8000ab0 <__udivmoddi4+0xcc>
 8000aaa:	4290      	cmp	r0, r2
 8000aac:	f0c0 80f0 	bcc.w	8000c90 <__udivmoddi4+0x2ac>
 8000ab0:	1a86      	subs	r6, r0, r2
 8000ab2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	2d00      	cmp	r5, #0
 8000aba:	d0e6      	beq.n	8000a8a <__udivmoddi4+0xa6>
 8000abc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ac0:	e7e3      	b.n	8000a8a <__udivmoddi4+0xa6>
 8000ac2:	2a00      	cmp	r2, #0
 8000ac4:	f040 8090 	bne.w	8000be8 <__udivmoddi4+0x204>
 8000ac8:	eba1 040c 	sub.w	r4, r1, ip
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	fa1f f78c 	uxth.w	r7, ip
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ada:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ade:	fb08 4416 	mls	r4, r8, r6, r4
 8000ae2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ae6:	fb07 f006 	mul.w	r0, r7, r6
 8000aea:	4298      	cmp	r0, r3
 8000aec:	d908      	bls.n	8000b00 <__udivmoddi4+0x11c>
 8000aee:	eb1c 0303 	adds.w	r3, ip, r3
 8000af2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000af6:	d202      	bcs.n	8000afe <__udivmoddi4+0x11a>
 8000af8:	4298      	cmp	r0, r3
 8000afa:	f200 80cd 	bhi.w	8000c98 <__udivmoddi4+0x2b4>
 8000afe:	4626      	mov	r6, r4
 8000b00:	1a1c      	subs	r4, r3, r0
 8000b02:	fa1f f38e 	uxth.w	r3, lr
 8000b06:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b0a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b12:	fb00 f707 	mul.w	r7, r0, r7
 8000b16:	429f      	cmp	r7, r3
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x148>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b22:	d202      	bcs.n	8000b2a <__udivmoddi4+0x146>
 8000b24:	429f      	cmp	r7, r3
 8000b26:	f200 80b0 	bhi.w	8000c8a <__udivmoddi4+0x2a6>
 8000b2a:	4620      	mov	r0, r4
 8000b2c:	1bdb      	subs	r3, r3, r7
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	e7a5      	b.n	8000a80 <__udivmoddi4+0x9c>
 8000b34:	f1c1 0620 	rsb	r6, r1, #32
 8000b38:	408b      	lsls	r3, r1
 8000b3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b3e:	431f      	orrs	r7, r3
 8000b40:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b44:	fa04 f301 	lsl.w	r3, r4, r1
 8000b48:	ea43 030c 	orr.w	r3, r3, ip
 8000b4c:	40f4      	lsrs	r4, r6
 8000b4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b52:	0c38      	lsrs	r0, r7, #16
 8000b54:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b58:	fbb4 fef0 	udiv	lr, r4, r0
 8000b5c:	fa1f fc87 	uxth.w	ip, r7
 8000b60:	fb00 441e 	mls	r4, r0, lr, r4
 8000b64:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b68:	fb0e f90c 	mul.w	r9, lr, ip
 8000b6c:	45a1      	cmp	r9, r4
 8000b6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000b72:	d90a      	bls.n	8000b8a <__udivmoddi4+0x1a6>
 8000b74:	193c      	adds	r4, r7, r4
 8000b76:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b7a:	f080 8084 	bcs.w	8000c86 <__udivmoddi4+0x2a2>
 8000b7e:	45a1      	cmp	r9, r4
 8000b80:	f240 8081 	bls.w	8000c86 <__udivmoddi4+0x2a2>
 8000b84:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b88:	443c      	add	r4, r7
 8000b8a:	eba4 0409 	sub.w	r4, r4, r9
 8000b8e:	fa1f f983 	uxth.w	r9, r3
 8000b92:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b96:	fb00 4413 	mls	r4, r0, r3, r4
 8000b9a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b9e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ba2:	45a4      	cmp	ip, r4
 8000ba4:	d907      	bls.n	8000bb6 <__udivmoddi4+0x1d2>
 8000ba6:	193c      	adds	r4, r7, r4
 8000ba8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bac:	d267      	bcs.n	8000c7e <__udivmoddi4+0x29a>
 8000bae:	45a4      	cmp	ip, r4
 8000bb0:	d965      	bls.n	8000c7e <__udivmoddi4+0x29a>
 8000bb2:	3b02      	subs	r3, #2
 8000bb4:	443c      	add	r4, r7
 8000bb6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bba:	fba0 9302 	umull	r9, r3, r0, r2
 8000bbe:	eba4 040c 	sub.w	r4, r4, ip
 8000bc2:	429c      	cmp	r4, r3
 8000bc4:	46ce      	mov	lr, r9
 8000bc6:	469c      	mov	ip, r3
 8000bc8:	d351      	bcc.n	8000c6e <__udivmoddi4+0x28a>
 8000bca:	d04e      	beq.n	8000c6a <__udivmoddi4+0x286>
 8000bcc:	b155      	cbz	r5, 8000be4 <__udivmoddi4+0x200>
 8000bce:	ebb8 030e 	subs.w	r3, r8, lr
 8000bd2:	eb64 040c 	sbc.w	r4, r4, ip
 8000bd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000bda:	40cb      	lsrs	r3, r1
 8000bdc:	431e      	orrs	r6, r3
 8000bde:	40cc      	lsrs	r4, r1
 8000be0:	e9c5 6400 	strd	r6, r4, [r5]
 8000be4:	2100      	movs	r1, #0
 8000be6:	e750      	b.n	8000a8a <__udivmoddi4+0xa6>
 8000be8:	f1c2 0320 	rsb	r3, r2, #32
 8000bec:	fa20 f103 	lsr.w	r1, r0, r3
 8000bf0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf4:	fa24 f303 	lsr.w	r3, r4, r3
 8000bf8:	4094      	lsls	r4, r2
 8000bfa:	430c      	orrs	r4, r1
 8000bfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c00:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c04:	fa1f f78c 	uxth.w	r7, ip
 8000c08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c0c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c10:	0c23      	lsrs	r3, r4, #16
 8000c12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c16:	fb00 f107 	mul.w	r1, r0, r7
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	d908      	bls.n	8000c30 <__udivmoddi4+0x24c>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c26:	d22c      	bcs.n	8000c82 <__udivmoddi4+0x29e>
 8000c28:	4299      	cmp	r1, r3
 8000c2a:	d92a      	bls.n	8000c82 <__udivmoddi4+0x29e>
 8000c2c:	3802      	subs	r0, #2
 8000c2e:	4463      	add	r3, ip
 8000c30:	1a5b      	subs	r3, r3, r1
 8000c32:	b2a4      	uxth	r4, r4
 8000c34:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c38:	fb08 3311 	mls	r3, r8, r1, r3
 8000c3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c40:	fb01 f307 	mul.w	r3, r1, r7
 8000c44:	42a3      	cmp	r3, r4
 8000c46:	d908      	bls.n	8000c5a <__udivmoddi4+0x276>
 8000c48:	eb1c 0404 	adds.w	r4, ip, r4
 8000c4c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c50:	d213      	bcs.n	8000c7a <__udivmoddi4+0x296>
 8000c52:	42a3      	cmp	r3, r4
 8000c54:	d911      	bls.n	8000c7a <__udivmoddi4+0x296>
 8000c56:	3902      	subs	r1, #2
 8000c58:	4464      	add	r4, ip
 8000c5a:	1ae4      	subs	r4, r4, r3
 8000c5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c60:	e739      	b.n	8000ad6 <__udivmoddi4+0xf2>
 8000c62:	4604      	mov	r4, r0
 8000c64:	e6f0      	b.n	8000a48 <__udivmoddi4+0x64>
 8000c66:	4608      	mov	r0, r1
 8000c68:	e706      	b.n	8000a78 <__udivmoddi4+0x94>
 8000c6a:	45c8      	cmp	r8, r9
 8000c6c:	d2ae      	bcs.n	8000bcc <__udivmoddi4+0x1e8>
 8000c6e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c72:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c76:	3801      	subs	r0, #1
 8000c78:	e7a8      	b.n	8000bcc <__udivmoddi4+0x1e8>
 8000c7a:	4631      	mov	r1, r6
 8000c7c:	e7ed      	b.n	8000c5a <__udivmoddi4+0x276>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	e799      	b.n	8000bb6 <__udivmoddi4+0x1d2>
 8000c82:	4630      	mov	r0, r6
 8000c84:	e7d4      	b.n	8000c30 <__udivmoddi4+0x24c>
 8000c86:	46d6      	mov	lr, sl
 8000c88:	e77f      	b.n	8000b8a <__udivmoddi4+0x1a6>
 8000c8a:	4463      	add	r3, ip
 8000c8c:	3802      	subs	r0, #2
 8000c8e:	e74d      	b.n	8000b2c <__udivmoddi4+0x148>
 8000c90:	4606      	mov	r6, r0
 8000c92:	4623      	mov	r3, r4
 8000c94:	4608      	mov	r0, r1
 8000c96:	e70f      	b.n	8000ab8 <__udivmoddi4+0xd4>
 8000c98:	3e02      	subs	r6, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	e730      	b.n	8000b00 <__udivmoddi4+0x11c>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_idiv0>:
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08e      	sub	sp, #56	@ 0x38
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
 8000cb8:	611a      	str	r2, [r3, #16]
 8000cba:	615a      	str	r2, [r3, #20]
 8000cbc:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
 8000ccc:	615a      	str	r2, [r3, #20]
 8000cce:	619a      	str	r2, [r3, #24]
//bank 4
  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000cd0:	4b2f      	ldr	r3, [pc, #188]	@ (8000d90 <MX_FSMC_Init+0xec>)
 8000cd2:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8000cd6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000cd8:	4b2d      	ldr	r3, [pc, #180]	@ (8000d90 <MX_FSMC_Init+0xec>)
 8000cda:	4a2e      	ldr	r2, [pc, #184]	@ (8000d94 <MX_FSMC_Init+0xf0>)
 8000cdc:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000cde:	4b2c      	ldr	r3, [pc, #176]	@ (8000d90 <MX_FSMC_Init+0xec>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000ce4:	4b2a      	ldr	r3, [pc, #168]	@ (8000d90 <MX_FSMC_Init+0xec>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000cea:	4b29      	ldr	r3, [pc, #164]	@ (8000d90 <MX_FSMC_Init+0xec>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000cf0:	4b27      	ldr	r3, [pc, #156]	@ (8000d90 <MX_FSMC_Init+0xec>)
 8000cf2:	2210      	movs	r2, #16
 8000cf4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000cf6:	4b26      	ldr	r3, [pc, #152]	@ (8000d90 <MX_FSMC_Init+0xec>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000cfc:	4b24      	ldr	r3, [pc, #144]	@ (8000d90 <MX_FSMC_Init+0xec>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000d02:	4b23      	ldr	r3, [pc, #140]	@ (8000d90 <MX_FSMC_Init+0xec>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000d08:	4b21      	ldr	r3, [pc, #132]	@ (8000d90 <MX_FSMC_Init+0xec>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000d0e:	4b20      	ldr	r3, [pc, #128]	@ (8000d90 <MX_FSMC_Init+0xec>)
 8000d10:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d14:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000d16:	4b1e      	ldr	r3, [pc, #120]	@ (8000d90 <MX_FSMC_Init+0xec>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000d1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000d90 <MX_FSMC_Init+0xec>)
 8000d1e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d22:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000d24:	4b1a      	ldr	r3, [pc, #104]	@ (8000d90 <MX_FSMC_Init+0xec>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000d2a:	4b19      	ldr	r3, [pc, #100]	@ (8000d90 <MX_FSMC_Init+0xec>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000d30:	4b17      	ldr	r3, [pc, #92]	@ (8000d90 <MX_FSMC_Init+0xec>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 1;
 8000d36:	2301      	movs	r3, #1
 8000d38:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000d3a:	230f      	movs	r3, #15
 8000d3c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 15;
 8000d3e:	230f      	movs	r3, #15
 8000d40:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 8000d46:	2310      	movs	r3, #16
 8000d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 8000d4a:	2311      	movs	r3, #17
 8000d4c:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000d56:	230f      	movs	r3, #15
 8000d58:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 3;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000d62:	2310      	movs	r3, #16
 8000d64:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000d66:	2311      	movs	r3, #17
 8000d68:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000d6e:	463a      	mov	r2, r7
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	4619      	mov	r1, r3
 8000d76:	4806      	ldr	r0, [pc, #24]	@ (8000d90 <MX_FSMC_Init+0xec>)
 8000d78:	f003 f83a 	bl	8003df0 <HAL_SRAM_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000d82:	f001 fe1d 	bl	80029c0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000d86:	bf00      	nop
 8000d88:	3738      	adds	r7, #56	@ 0x38
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	2000002c 	.word	0x2000002c
 8000d94:	a0000104 	.word	0xa0000104

08000d98 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000dac:	4b1c      	ldr	r3, [pc, #112]	@ (8000e20 <HAL_FSMC_MspInit+0x88>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d131      	bne.n	8000e18 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000db4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e20 <HAL_FSMC_MspInit+0x88>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	603b      	str	r3, [r7, #0]
 8000dbe:	4b19      	ldr	r3, [pc, #100]	@ (8000e24 <HAL_FSMC_MspInit+0x8c>)
 8000dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000dc2:	4a18      	ldr	r2, [pc, #96]	@ (8000e24 <HAL_FSMC_MspInit+0x8c>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	6393      	str	r3, [r2, #56]	@ 0x38
 8000dca:	4b16      	ldr	r3, [pc, #88]	@ (8000e24 <HAL_FSMC_MspInit+0x8c>)
 8000dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000dd6:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8000dda:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de4:	2303      	movs	r3, #3
 8000de6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000de8:	230c      	movs	r3, #12
 8000dea:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	4619      	mov	r1, r3
 8000df0:	480d      	ldr	r0, [pc, #52]	@ (8000e28 <HAL_FSMC_MspInit+0x90>)
 8000df2:	f002 f9e3 	bl	80031bc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000df6:	f64c 73b3 	movw	r3, #53171	@ 0xcfb3
 8000dfa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e04:	2303      	movs	r3, #3
 8000e06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000e08:	230c      	movs	r3, #12
 8000e0a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4806      	ldr	r0, [pc, #24]	@ (8000e2c <HAL_FSMC_MspInit+0x94>)
 8000e12:	f002 f9d3 	bl	80031bc <HAL_GPIO_Init>
 8000e16:	e000      	b.n	8000e1a <HAL_FSMC_MspInit+0x82>
    return;
 8000e18:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	2000007c 	.word	0x2000007c
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	40020c00 	.word	0x40020c00

08000e30 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000e38:	f7ff ffae 	bl	8000d98 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	@ 0x28
 8000e48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
 8000e58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	4b44      	ldr	r3, [pc, #272]	@ (8000f70 <MX_GPIO_Init+0x12c>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	4a43      	ldr	r2, [pc, #268]	@ (8000f70 <MX_GPIO_Init+0x12c>)
 8000e64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6a:	4b41      	ldr	r3, [pc, #260]	@ (8000f70 <MX_GPIO_Init+0x12c>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f70 <MX_GPIO_Init+0x12c>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	4a3c      	ldr	r2, [pc, #240]	@ (8000f70 <MX_GPIO_Init+0x12c>)
 8000e80:	f043 0304 	orr.w	r3, r3, #4
 8000e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e86:	4b3a      	ldr	r3, [pc, #232]	@ (8000f70 <MX_GPIO_Init+0x12c>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	f003 0304 	and.w	r3, r3, #4
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	4b36      	ldr	r3, [pc, #216]	@ (8000f70 <MX_GPIO_Init+0x12c>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	4a35      	ldr	r2, [pc, #212]	@ (8000f70 <MX_GPIO_Init+0x12c>)
 8000e9c:	f043 0302 	orr.w	r3, r3, #2
 8000ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea2:	4b33      	ldr	r3, [pc, #204]	@ (8000f70 <MX_GPIO_Init+0x12c>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	4b2f      	ldr	r3, [pc, #188]	@ (8000f70 <MX_GPIO_Init+0x12c>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	4a2e      	ldr	r2, [pc, #184]	@ (8000f70 <MX_GPIO_Init+0x12c>)
 8000eb8:	f043 0310 	orr.w	r3, r3, #16
 8000ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ebe:	4b2c      	ldr	r3, [pc, #176]	@ (8000f70 <MX_GPIO_Init+0x12c>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	f003 0310 	and.w	r3, r3, #16
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	603b      	str	r3, [r7, #0]
 8000ece:	4b28      	ldr	r3, [pc, #160]	@ (8000f70 <MX_GPIO_Init+0x12c>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	4a27      	ldr	r2, [pc, #156]	@ (8000f70 <MX_GPIO_Init+0x12c>)
 8000ed4:	f043 0308 	orr.w	r3, r3, #8
 8000ed8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eda:	4b25      	ldr	r3, [pc, #148]	@ (8000f70 <MX_GPIO_Init+0x12c>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	f003 0308 	and.w	r3, r3, #8
 8000ee2:	603b      	str	r3, [r7, #0]
 8000ee4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_SET);
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	2110      	movs	r1, #16
 8000eea:	4822      	ldr	r0, [pc, #136]	@ (8000f74 <MX_GPIO_Init+0x130>)
 8000eec:	f002 fb02 	bl	80034f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BL_Pin|TP_SCK_Pin|TP_MOSI_Pin, GPIO_PIN_SET);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f24a 0101 	movw	r1, #40961	@ 0xa001
 8000ef6:	4820      	ldr	r0, [pc, #128]	@ (8000f78 <MX_GPIO_Init+0x134>)
 8000ef8:	f002 fafc 	bl	80034f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TP_CS_Pin;
 8000efc:	2310      	movs	r3, #16
 8000efe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f00:	2301      	movs	r3, #1
 8000f02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f04:	2301      	movs	r3, #1
 8000f06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TP_CS_GPIO_Port, &GPIO_InitStruct);
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	4619      	mov	r1, r3
 8000f12:	4818      	ldr	r0, [pc, #96]	@ (8000f74 <MX_GPIO_Init+0x130>)
 8000f14:	f002 f952 	bl	80031bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 8000f18:	2320      	movs	r3, #32
 8000f1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f20:	2302      	movs	r3, #2
 8000f22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4812      	ldr	r0, [pc, #72]	@ (8000f74 <MX_GPIO_Init+0x130>)
 8000f2c:	f002 f946 	bl	80031bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BL_Pin|TP_SCK_Pin|TP_MOSI_Pin;
 8000f30:	f24a 0301 	movw	r3, #40961	@ 0xa001
 8000f34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f36:	2301      	movs	r3, #1
 8000f38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	480b      	ldr	r0, [pc, #44]	@ (8000f78 <MX_GPIO_Init+0x134>)
 8000f4a:	f002 f937 	bl	80031bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TP_MISO_Pin;
 8000f4e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TP_MISO_GPIO_Port, &GPIO_InitStruct);
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	4619      	mov	r1, r3
 8000f62:	4805      	ldr	r0, [pc, #20]	@ (8000f78 <MX_GPIO_Init+0x134>)
 8000f64:	f002 f92a 	bl	80031bc <HAL_GPIO_Init>

}
 8000f68:	bf00      	nop
 8000f6a:	3728      	adds	r7, #40	@ 0x28
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40020800 	.word	0x40020800
 8000f78:	40020400 	.word	0x40020400

08000f7c <gui_drawpoint>:
                y:the y coordinate of the point
								color:the color value of the point
 * @retvalue   :None
********************************************************************/
void gui_drawpoint(uint16_t x,uint16_t y,uint16_t color)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	80fb      	strh	r3, [r7, #6]
 8000f86:	460b      	mov	r3, r1
 8000f88:	80bb      	strh	r3, [r7, #4]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	807b      	strh	r3, [r7, #2]
	lcd_setcursor(x,y);
 8000f8e:	88ba      	ldrh	r2, [r7, #4]
 8000f90:	88fb      	ldrh	r3, [r7, #6]
 8000f92:	4611      	mov	r1, r2
 8000f94:	4618      	mov	r0, r3
 8000f96:	f001 fc03 	bl	80027a0 <lcd_setcursor>
	lcd_writedata_16bit(color); 
 8000f9a:	887b      	ldrh	r3, [r7, #2]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f000 f881 	bl	80010a4 <lcd_writedata_16bit>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <lcd_read>:

uint16_t POINT_COLOR = 0x0000,BACK_COLOR = 0xffff;
uint16_t devicecode;

uint16_t lcd_read(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
    volatile uint16_t data;
    data=LCD->LCD_RAM;
 8000fb2:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <lcd_read+0x20>)
 8000fb4:	885b      	ldrh	r3, [r3, #2]
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	80fb      	strh	r3, [r7, #6]
    return data;
 8000fba:	88fb      	ldrh	r3, [r7, #6]
 8000fbc:	b29b      	uxth	r3, r3
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	6001fffe 	.word	0x6001fffe

08000fd0 <lcd_wr_reg>:
 * @function   :write an 16-bit command to the lcd screen
 * @parameters :data:command value to be written
 * @retvalue   :none
******************************************************************************/
void lcd_wr_reg(uint16_t data)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	80fb      	strh	r3, [r7, #6]
    LCD->LCD_REG=data;
 8000fda:	4a04      	ldr	r2, [pc, #16]	@ (8000fec <lcd_wr_reg+0x1c>)
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	8013      	strh	r3, [r2, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	6001fffe 	.word	0x6001fffe

08000ff0 <lcd_wr_data>:
 * @function   :write an 16-bit data to the lcd screen
 * @parameters :data:data value to be written
 * @retvalue   :none
******************************************************************************/
void lcd_wr_data(uint16_t data)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80fb      	strh	r3, [r7, #6]
    LCD->LCD_RAM=data;
 8000ffa:	4a04      	ldr	r2, [pc, #16]	@ (800100c <lcd_wr_data+0x1c>)
 8000ffc:	88fb      	ldrh	r3, [r7, #6]
 8000ffe:	8053      	strh	r3, [r2, #2]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	6001fffe 	.word	0x6001fffe

08001010 <lcd_rd_data>:
 * @function   :read an 16-bit value from the lcd screen
 * @parameters :none
 * @retvalue   :read value
******************************************************************************/
uint16_t lcd_rd_data(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
    return lcd_read();
 8001014:	f7ff ffca 	bl	8000fac <lcd_read>
 8001018:	4603      	mov	r3, r0
}
 800101a:	4618      	mov	r0, r3
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <lcd_writereg>:
 * @parameters :lcd_reg:register address
                lcd_regvalue:data to be written
 * @retvalue   :none
******************************************************************************/
void lcd_writereg(uint16_t lcd_reg, uint16_t lcd_regvalue)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	460a      	mov	r2, r1
 800102a:	80fb      	strh	r3, [r7, #6]
 800102c:	4613      	mov	r3, r2
 800102e:	80bb      	strh	r3, [r7, #4]
    LCD->LCD_REG = lcd_reg;
 8001030:	4a05      	ldr	r2, [pc, #20]	@ (8001048 <lcd_writereg+0x28>)
 8001032:	88fb      	ldrh	r3, [r7, #6]
 8001034:	8013      	strh	r3, [r2, #0]
    LCD->LCD_RAM = lcd_regvalue;
 8001036:	4a04      	ldr	r2, [pc, #16]	@ (8001048 <lcd_writereg+0x28>)
 8001038:	88bb      	ldrh	r3, [r7, #4]
 800103a:	8053      	strh	r3, [r2, #2]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	6001fffe 	.word	0x6001fffe

0800104c <lcd_readreg>:
 * @function   :read value from specially registers
 * @parameters :lcd_reg:register address
 * @retvalue   :read value
******************************************************************************/
void lcd_readreg(uint16_t lcd_reg,uint16_t *rval,int n)
{
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
 8001058:	81fb      	strh	r3, [r7, #14]
    lcd_wr_reg(lcd_reg);
 800105a:	89fb      	ldrh	r3, [r7, #14]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ffb7 	bl	8000fd0 <lcd_wr_reg>
    while(n--)
 8001062:	e009      	b.n	8001078 <lcd_readreg+0x2c>
    {
        *(rval++) = lcd_rd_data();
 8001064:	68bc      	ldr	r4, [r7, #8]
 8001066:	1ca3      	adds	r3, r4, #2
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	f7ff ffd1 	bl	8001010 <lcd_rd_data>
 800106e:	4603      	mov	r3, r0
 8001070:	8023      	strh	r3, [r4, #0]
        delay_us(100);
 8001072:	2064      	movs	r0, #100	@ 0x64
 8001074:	f001 fe80 	bl	8002d78 <delay_us>
    while(n--)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	1e5a      	subs	r2, r3, #1
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1f0      	bne.n	8001064 <lcd_readreg+0x18>
    }
}
 8001082:	bf00      	nop
 8001084:	bf00      	nop
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	bd90      	pop	{r4, r7, pc}

0800108c <lcd_writeram_prepare>:
 * @function   :write gram
 * @parameters :none
 * @retvalue   :none
******************************************************************************/
void lcd_writeram_prepare(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
    lcd_wr_reg(lcddev.wramcmd);
 8001090:	4b03      	ldr	r3, [pc, #12]	@ (80010a0 <lcd_writeram_prepare+0x14>)
 8001092:	891b      	ldrh	r3, [r3, #8]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff9b 	bl	8000fd0 <lcd_wr_reg>
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000080 	.word	0x20000080

080010a4 <lcd_writedata_16bit>:
 * @function   :write an 16-bit command to the lcd screen
 * @parameters :data:data to be written
 * @retvalue   :none
******************************************************************************/
void lcd_writedata_16bit(uint16_t data)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	80fb      	strh	r3, [r7, #6]
    LCD->LCD_RAM = data;
 80010ae:	4a04      	ldr	r2, [pc, #16]	@ (80010c0 <lcd_writedata_16bit+0x1c>)
 80010b0:	88fb      	ldrh	r3, [r7, #6]
 80010b2:	8053      	strh	r3, [r2, #2]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	6001fffe 	.word	0x6001fffe

080010c4 <lcd_clear>:
 * @function   :full screen filled lcd screen
 * @parameters :color:filled color
 * @retvalue   :none
******************************************************************************/
void lcd_clear(uint16_t color)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	80fb      	strh	r3, [r7, #6]
    unsigned int i;
    uint32_t total_point=lcddev.width*lcddev.height;
 80010ce:	4b13      	ldr	r3, [pc, #76]	@ (800111c <lcd_clear+0x58>)
 80010d0:	881b      	ldrh	r3, [r3, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	4b11      	ldr	r3, [pc, #68]	@ (800111c <lcd_clear+0x58>)
 80010d6:	885b      	ldrh	r3, [r3, #2]
 80010d8:	fb02 f303 	mul.w	r3, r2, r3
 80010dc:	60bb      	str	r3, [r7, #8]
    lcd_setwindows(0,0,lcddev.width-1,lcddev.height-1);
 80010de:	4b0f      	ldr	r3, [pc, #60]	@ (800111c <lcd_clear+0x58>)
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	4b0d      	ldr	r3, [pc, #52]	@ (800111c <lcd_clear+0x58>)
 80010e8:	885b      	ldrh	r3, [r3, #2]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	2100      	movs	r1, #0
 80010f0:	2000      	movs	r0, #0
 80010f2:	f001 fad9 	bl	80026a8 <lcd_setwindows>
    for(i=0; i<total_point; i++)
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	e005      	b.n	8001108 <lcd_clear+0x44>
    {
        LCD->LCD_RAM = color;
 80010fc:	4a08      	ldr	r2, [pc, #32]	@ (8001120 <lcd_clear+0x5c>)
 80010fe:	88fb      	ldrh	r3, [r7, #6]
 8001100:	8053      	strh	r3, [r2, #2]
    for(i=0; i<total_point; i++)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	3301      	adds	r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	429a      	cmp	r2, r3
 800110e:	d3f5      	bcc.n	80010fc <lcd_clear+0x38>
    }
}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000080 	.word	0x20000080
 8001120:	6001fffe 	.word	0x6001fffe

08001124 <lcd_init>:
 * @function   :initialization lcd screen
 * @parameters :none
 * @retvalue   :none
******************************************************************************/
void lcd_init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
//		HAL_GPIO_WritePin(GPIOB,LCD_RST_Pin,GPIO_PIN_RESET);
//    HAL_Delay(50);
//		HAL_GPIO_WritePin(GPIOB,LCD_RST_Pin,GPIO_PIN_SET);
//		HAL_Delay(50);
	//lcd_read();
		lcd_read_id();
 8001128:	f001 fbb0 	bl	800288c <lcd_read_id>

//************* nt35510 init**********//
    lcd_wr_reg(0xf000);
 800112c:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 8001130:	f7ff ff4e 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x55);
 8001134:	2055      	movs	r0, #85	@ 0x55
 8001136:	f7ff ff5b 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xf001);
 800113a:	f24f 0001 	movw	r0, #61441	@ 0xf001
 800113e:	f7ff ff47 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xaa);
 8001142:	20aa      	movs	r0, #170	@ 0xaa
 8001144:	f7ff ff54 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xf002);
 8001148:	f24f 0002 	movw	r0, #61442	@ 0xf002
 800114c:	f7ff ff40 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x52);
 8001150:	2052      	movs	r0, #82	@ 0x52
 8001152:	f7ff ff4d 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xf003);
 8001156:	f24f 0003 	movw	r0, #61443	@ 0xf003
 800115a:	f7ff ff39 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x08);
 800115e:	2008      	movs	r0, #8
 8001160:	f7ff ff46 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xf004);
 8001164:	f24f 0004 	movw	r0, #61444	@ 0xf004
 8001168:	f7ff ff32 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x01);
 800116c:	2001      	movs	r0, #1
 800116e:	f7ff ff3f 	bl	8000ff0 <lcd_wr_data>
    //# avdd: manual); lcd_wr_data(
    lcd_wr_reg(0xb600);
 8001172:	f44f 4036 	mov.w	r0, #46592	@ 0xb600
 8001176:	f7ff ff2b 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x34);
 800117a:	2034      	movs	r0, #52	@ 0x34
 800117c:	f7ff ff38 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xb601);
 8001180:	f24b 6001 	movw	r0, #46593	@ 0xb601
 8001184:	f7ff ff24 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x34);
 8001188:	2034      	movs	r0, #52	@ 0x34
 800118a:	f7ff ff31 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xb602);
 800118e:	f24b 6002 	movw	r0, #46594	@ 0xb602
 8001192:	f7ff ff1d 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x34);
 8001196:	2034      	movs	r0, #52	@ 0x34
 8001198:	f7ff ff2a 	bl	8000ff0 <lcd_wr_data>

    lcd_wr_reg(0xb000);
 800119c:	f44f 4030 	mov.w	r0, #45056	@ 0xb000
 80011a0:	f7ff ff16 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x0d);//09
 80011a4:	200d      	movs	r0, #13
 80011a6:	f7ff ff23 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xb001);
 80011aa:	f24b 0001 	movw	r0, #45057	@ 0xb001
 80011ae:	f7ff ff0f 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x0d);
 80011b2:	200d      	movs	r0, #13
 80011b4:	f7ff ff1c 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xb002);
 80011b8:	f24b 0002 	movw	r0, #45058	@ 0xb002
 80011bc:	f7ff ff08 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x0d);
 80011c0:	200d      	movs	r0, #13
 80011c2:	f7ff ff15 	bl	8000ff0 <lcd_wr_data>
    //# avee: manual); lcd_wr_data( -6v
    lcd_wr_reg(0xb700);
 80011c6:	f44f 4037 	mov.w	r0, #46848	@ 0xb700
 80011ca:	f7ff ff01 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x24);
 80011ce:	2024      	movs	r0, #36	@ 0x24
 80011d0:	f7ff ff0e 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xb701);
 80011d4:	f24b 7001 	movw	r0, #46849	@ 0xb701
 80011d8:	f7ff fefa 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x24);
 80011dc:	2024      	movs	r0, #36	@ 0x24
 80011de:	f7ff ff07 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xb702);
 80011e2:	f24b 7002 	movw	r0, #46850	@ 0xb702
 80011e6:	f7ff fef3 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x24);
 80011ea:	2024      	movs	r0, #36	@ 0x24
 80011ec:	f7ff ff00 	bl	8000ff0 <lcd_wr_data>

    lcd_wr_reg(0xb100);
 80011f0:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 80011f4:	f7ff feec 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x0d);
 80011f8:	200d      	movs	r0, #13
 80011fa:	f7ff fef9 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xb101);
 80011fe:	f24b 1001 	movw	r0, #45313	@ 0xb101
 8001202:	f7ff fee5 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x0d);
 8001206:	200d      	movs	r0, #13
 8001208:	f7ff fef2 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xb102);
 800120c:	f24b 1002 	movw	r0, #45314	@ 0xb102
 8001210:	f7ff fede 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x0d);
 8001214:	200d      	movs	r0, #13
 8001216:	f7ff feeb 	bl	8000ff0 <lcd_wr_data>
    //#power control for
    //vcl
    lcd_wr_reg(0xb800);
 800121a:	f44f 4038 	mov.w	r0, #47104	@ 0xb800
 800121e:	f7ff fed7 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x24);
 8001222:	2024      	movs	r0, #36	@ 0x24
 8001224:	f7ff fee4 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xb801);
 8001228:	f64b 0001 	movw	r0, #47105	@ 0xb801
 800122c:	f7ff fed0 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x24);
 8001230:	2024      	movs	r0, #36	@ 0x24
 8001232:	f7ff fedd 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xb802);
 8001236:	f64b 0002 	movw	r0, #47106	@ 0xb802
 800123a:	f7ff fec9 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x24);
 800123e:	2024      	movs	r0, #36	@ 0x24
 8001240:	f7ff fed6 	bl	8000ff0 <lcd_wr_data>

    lcd_wr_reg(0xb200);
 8001244:	f44f 4032 	mov.w	r0, #45568	@ 0xb200
 8001248:	f7ff fec2 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 800124c:	2000      	movs	r0, #0
 800124e:	f7ff fecf 	bl	8000ff0 <lcd_wr_data>

    //# vgh: clamp enable); lcd_wr_data(
    lcd_wr_reg(0xb900);
 8001252:	f44f 4039 	mov.w	r0, #47360	@ 0xb900
 8001256:	f7ff febb 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x24);
 800125a:	2024      	movs	r0, #36	@ 0x24
 800125c:	f7ff fec8 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xb901);
 8001260:	f64b 1001 	movw	r0, #47361	@ 0xb901
 8001264:	f7ff feb4 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x24);
 8001268:	2024      	movs	r0, #36	@ 0x24
 800126a:	f7ff fec1 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xb902);
 800126e:	f64b 1002 	movw	r0, #47362	@ 0xb902
 8001272:	f7ff fead 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x24);
 8001276:	2024      	movs	r0, #36	@ 0x24
 8001278:	f7ff feba 	bl	8000ff0 <lcd_wr_data>

    lcd_wr_reg(0xb300);
 800127c:	f44f 4033 	mov.w	r0, #45824	@ 0xb300
 8001280:	f7ff fea6 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x05);
 8001284:	2005      	movs	r0, #5
 8001286:	f7ff feb3 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xb301);
 800128a:	f24b 3001 	movw	r0, #45825	@ 0xb301
 800128e:	f7ff fe9f 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x05);
 8001292:	2005      	movs	r0, #5
 8001294:	f7ff feac 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xb302);
 8001298:	f24b 3002 	movw	r0, #45826	@ 0xb302
 800129c:	f7ff fe98 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x05);
 80012a0:	2005      	movs	r0, #5
 80012a2:	f7ff fea5 	bl	8000ff0 <lcd_wr_data>

    ///lcd_wr_reg(0xbf00); lcd_wr_data(0x01);

    //# vgl(lvgl):
    lcd_wr_reg(0xba00);
 80012a6:	f44f 403a 	mov.w	r0, #47616	@ 0xba00
 80012aa:	f7ff fe91 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x34);
 80012ae:	2034      	movs	r0, #52	@ 0x34
 80012b0:	f7ff fe9e 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xba01);
 80012b4:	f64b 2001 	movw	r0, #47617	@ 0xba01
 80012b8:	f7ff fe8a 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x34);
 80012bc:	2034      	movs	r0, #52	@ 0x34
 80012be:	f7ff fe97 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xba02);
 80012c2:	f64b 2002 	movw	r0, #47618	@ 0xba02
 80012c6:	f7ff fe83 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x34);
 80012ca:	2034      	movs	r0, #52	@ 0x34
 80012cc:	f7ff fe90 	bl	8000ff0 <lcd_wr_data>
    //# vgl_reg(vglo)
    lcd_wr_reg(0xb500);
 80012d0:	f44f 4035 	mov.w	r0, #46336	@ 0xb500
 80012d4:	f7ff fe7c 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x0b);
 80012d8:	200b      	movs	r0, #11
 80012da:	f7ff fe89 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xb501);
 80012de:	f24b 5001 	movw	r0, #46337	@ 0xb501
 80012e2:	f7ff fe75 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x0b);
 80012e6:	200b      	movs	r0, #11
 80012e8:	f7ff fe82 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xb502);
 80012ec:	f24b 5002 	movw	r0, #46338	@ 0xb502
 80012f0:	f7ff fe6e 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x0b);
 80012f4:	200b      	movs	r0, #11
 80012f6:	f7ff fe7b 	bl	8000ff0 <lcd_wr_data>
    //# vgmp/vgsp:
    lcd_wr_reg(0xbc00);
 80012fa:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
 80012fe:	f7ff fe67 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001302:	2000      	movs	r0, #0
 8001304:	f7ff fe74 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xbc01);
 8001308:	f64b 4001 	movw	r0, #48129	@ 0xbc01
 800130c:	f7ff fe60 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xa3);
 8001310:	20a3      	movs	r0, #163	@ 0xa3
 8001312:	f7ff fe6d 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xbc02);
 8001316:	f64b 4002 	movw	r0, #48130	@ 0xbc02
 800131a:	f7ff fe59 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 800131e:	2000      	movs	r0, #0
 8001320:	f7ff fe66 	bl	8000ff0 <lcd_wr_data>
    //# vgmn/vgsn
    lcd_wr_reg(0xbd00);
 8001324:	f44f 403d 	mov.w	r0, #48384	@ 0xbd00
 8001328:	f7ff fe52 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 800132c:	2000      	movs	r0, #0
 800132e:	f7ff fe5f 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xbd01);
 8001332:	f64b 5001 	movw	r0, #48385	@ 0xbd01
 8001336:	f7ff fe4b 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xa3);
 800133a:	20a3      	movs	r0, #163	@ 0xa3
 800133c:	f7ff fe58 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xbd02);
 8001340:	f64b 5002 	movw	r0, #48386	@ 0xbd02
 8001344:	f7ff fe44 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001348:	2000      	movs	r0, #0
 800134a:	f7ff fe51 	bl	8000ff0 <lcd_wr_data>
    //# vcom=-0.1
    lcd_wr_reg(0xbe00);
 800134e:	f44f 403e 	mov.w	r0, #48640	@ 0xbe00
 8001352:	f7ff fe3d 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001356:	2000      	movs	r0, #0
 8001358:	f7ff fe4a 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xbe01);
 800135c:	f64b 6001 	movw	r0, #48641	@ 0xbe01
 8001360:	f7ff fe36 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x63);//4f
 8001364:	2063      	movs	r0, #99	@ 0x63
 8001366:	f7ff fe43 	bl	8000ff0 <lcd_wr_data>
    //  vcomh+0x01;
    //#r+
    lcd_wr_reg(0xd100);
 800136a:	f44f 4051 	mov.w	r0, #53504	@ 0xd100
 800136e:	f7ff fe2f 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001372:	2000      	movs	r0, #0
 8001374:	f7ff fe3c 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd101);
 8001378:	f24d 1001 	movw	r0, #53505	@ 0xd101
 800137c:	f7ff fe28 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x37);
 8001380:	2037      	movs	r0, #55	@ 0x37
 8001382:	f7ff fe35 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd102);
 8001386:	f24d 1002 	movw	r0, #53506	@ 0xd102
 800138a:	f7ff fe21 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 800138e:	2000      	movs	r0, #0
 8001390:	f7ff fe2e 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd103);
 8001394:	f24d 1003 	movw	r0, #53507	@ 0xd103
 8001398:	f7ff fe1a 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x52);
 800139c:	2052      	movs	r0, #82	@ 0x52
 800139e:	f7ff fe27 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd104);
 80013a2:	f24d 1004 	movw	r0, #53508	@ 0xd104
 80013a6:	f7ff fe13 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 80013aa:	2000      	movs	r0, #0
 80013ac:	f7ff fe20 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd105);
 80013b0:	f24d 1005 	movw	r0, #53509	@ 0xd105
 80013b4:	f7ff fe0c 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x7b);
 80013b8:	207b      	movs	r0, #123	@ 0x7b
 80013ba:	f7ff fe19 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd106);
 80013be:	f24d 1006 	movw	r0, #53510	@ 0xd106
 80013c2:	f7ff fe05 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 80013c6:	2000      	movs	r0, #0
 80013c8:	f7ff fe12 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd107);
 80013cc:	f24d 1007 	movw	r0, #53511	@ 0xd107
 80013d0:	f7ff fdfe 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x99);
 80013d4:	2099      	movs	r0, #153	@ 0x99
 80013d6:	f7ff fe0b 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd108);
 80013da:	f24d 1008 	movw	r0, #53512	@ 0xd108
 80013de:	f7ff fdf7 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 80013e2:	2000      	movs	r0, #0
 80013e4:	f7ff fe04 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd109);
 80013e8:	f24d 1009 	movw	r0, #53513	@ 0xd109
 80013ec:	f7ff fdf0 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xb1);
 80013f0:	20b1      	movs	r0, #177	@ 0xb1
 80013f2:	f7ff fdfd 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd10a);
 80013f6:	f24d 100a 	movw	r0, #53514	@ 0xd10a
 80013fa:	f7ff fde9 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 80013fe:	2000      	movs	r0, #0
 8001400:	f7ff fdf6 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd10b);
 8001404:	f24d 100b 	movw	r0, #53515	@ 0xd10b
 8001408:	f7ff fde2 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xd2);
 800140c:	20d2      	movs	r0, #210	@ 0xd2
 800140e:	f7ff fdef 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd10c);
 8001412:	f24d 100c 	movw	r0, #53516	@ 0xd10c
 8001416:	f7ff fddb 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 800141a:	2000      	movs	r0, #0
 800141c:	f7ff fde8 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd10d);
 8001420:	f24d 100d 	movw	r0, #53517	@ 0xd10d
 8001424:	f7ff fdd4 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xf6);
 8001428:	20f6      	movs	r0, #246	@ 0xf6
 800142a:	f7ff fde1 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd10e);
 800142e:	f24d 100e 	movw	r0, #53518	@ 0xd10e
 8001432:	f7ff fdcd 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x01);
 8001436:	2001      	movs	r0, #1
 8001438:	f7ff fdda 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd10f);
 800143c:	f24d 100f 	movw	r0, #53519	@ 0xd10f
 8001440:	f7ff fdc6 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x27);
 8001444:	2027      	movs	r0, #39	@ 0x27
 8001446:	f7ff fdd3 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd110);
 800144a:	f24d 1010 	movw	r0, #53520	@ 0xd110
 800144e:	f7ff fdbf 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x01);
 8001452:	2001      	movs	r0, #1
 8001454:	f7ff fdcc 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd111);
 8001458:	f24d 1011 	movw	r0, #53521	@ 0xd111
 800145c:	f7ff fdb8 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x4e);
 8001460:	204e      	movs	r0, #78	@ 0x4e
 8001462:	f7ff fdc5 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd112);
 8001466:	f24d 1012 	movw	r0, #53522	@ 0xd112
 800146a:	f7ff fdb1 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x01);
 800146e:	2001      	movs	r0, #1
 8001470:	f7ff fdbe 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd113);
 8001474:	f24d 1013 	movw	r0, #53523	@ 0xd113
 8001478:	f7ff fdaa 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x8c);
 800147c:	208c      	movs	r0, #140	@ 0x8c
 800147e:	f7ff fdb7 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd114);
 8001482:	f24d 1014 	movw	r0, #53524	@ 0xd114
 8001486:	f7ff fda3 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x01);
 800148a:	2001      	movs	r0, #1
 800148c:	f7ff fdb0 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd115);
 8001490:	f24d 1015 	movw	r0, #53525	@ 0xd115
 8001494:	f7ff fd9c 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xbe);
 8001498:	20be      	movs	r0, #190	@ 0xbe
 800149a:	f7ff fda9 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd116);
 800149e:	f24d 1016 	movw	r0, #53526	@ 0xd116
 80014a2:	f7ff fd95 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x02);
 80014a6:	2002      	movs	r0, #2
 80014a8:	f7ff fda2 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd117);
 80014ac:	f24d 1017 	movw	r0, #53527	@ 0xd117
 80014b0:	f7ff fd8e 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x0b);
 80014b4:	200b      	movs	r0, #11
 80014b6:	f7ff fd9b 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd118);
 80014ba:	f24d 1018 	movw	r0, #53528	@ 0xd118
 80014be:	f7ff fd87 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x02);
 80014c2:	2002      	movs	r0, #2
 80014c4:	f7ff fd94 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd119);
 80014c8:	f24d 1019 	movw	r0, #53529	@ 0xd119
 80014cc:	f7ff fd80 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x48);
 80014d0:	2048      	movs	r0, #72	@ 0x48
 80014d2:	f7ff fd8d 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd11a);
 80014d6:	f24d 101a 	movw	r0, #53530	@ 0xd11a
 80014da:	f7ff fd79 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x02);
 80014de:	2002      	movs	r0, #2
 80014e0:	f7ff fd86 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd11b);
 80014e4:	f24d 101b 	movw	r0, #53531	@ 0xd11b
 80014e8:	f7ff fd72 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x4a);
 80014ec:	204a      	movs	r0, #74	@ 0x4a
 80014ee:	f7ff fd7f 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd11c);
 80014f2:	f24d 101c 	movw	r0, #53532	@ 0xd11c
 80014f6:	f7ff fd6b 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x02);
 80014fa:	2002      	movs	r0, #2
 80014fc:	f7ff fd78 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd11d);
 8001500:	f24d 101d 	movw	r0, #53533	@ 0xd11d
 8001504:	f7ff fd64 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x7e);
 8001508:	207e      	movs	r0, #126	@ 0x7e
 800150a:	f7ff fd71 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd11e);
 800150e:	f24d 101e 	movw	r0, #53534	@ 0xd11e
 8001512:	f7ff fd5d 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8001516:	2002      	movs	r0, #2
 8001518:	f7ff fd6a 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd11f);
 800151c:	f24d 101f 	movw	r0, #53535	@ 0xd11f
 8001520:	f7ff fd56 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xbc);
 8001524:	20bc      	movs	r0, #188	@ 0xbc
 8001526:	f7ff fd63 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd120);
 800152a:	f24d 1020 	movw	r0, #53536	@ 0xd120
 800152e:	f7ff fd4f 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8001532:	2002      	movs	r0, #2
 8001534:	f7ff fd5c 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd121);
 8001538:	f24d 1021 	movw	r0, #53537	@ 0xd121
 800153c:	f7ff fd48 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xe1);
 8001540:	20e1      	movs	r0, #225	@ 0xe1
 8001542:	f7ff fd55 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd122);
 8001546:	f24d 1022 	movw	r0, #53538	@ 0xd122
 800154a:	f7ff fd41 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 800154e:	2003      	movs	r0, #3
 8001550:	f7ff fd4e 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd123);
 8001554:	f24d 1023 	movw	r0, #53539	@ 0xd123
 8001558:	f7ff fd3a 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x10);
 800155c:	2010      	movs	r0, #16
 800155e:	f7ff fd47 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd124);
 8001562:	f24d 1024 	movw	r0, #53540	@ 0xd124
 8001566:	f7ff fd33 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 800156a:	2003      	movs	r0, #3
 800156c:	f7ff fd40 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd125);
 8001570:	f24d 1025 	movw	r0, #53541	@ 0xd125
 8001574:	f7ff fd2c 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x31);
 8001578:	2031      	movs	r0, #49	@ 0x31
 800157a:	f7ff fd39 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd126);
 800157e:	f24d 1026 	movw	r0, #53542	@ 0xd126
 8001582:	f7ff fd25 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001586:	2003      	movs	r0, #3
 8001588:	f7ff fd32 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd127);
 800158c:	f24d 1027 	movw	r0, #53543	@ 0xd127
 8001590:	f7ff fd1e 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x5a);
 8001594:	205a      	movs	r0, #90	@ 0x5a
 8001596:	f7ff fd2b 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd128);
 800159a:	f24d 1028 	movw	r0, #53544	@ 0xd128
 800159e:	f7ff fd17 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 80015a2:	2003      	movs	r0, #3
 80015a4:	f7ff fd24 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd129);
 80015a8:	f24d 1029 	movw	r0, #53545	@ 0xd129
 80015ac:	f7ff fd10 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x73);
 80015b0:	2073      	movs	r0, #115	@ 0x73
 80015b2:	f7ff fd1d 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd12a);
 80015b6:	f24d 102a 	movw	r0, #53546	@ 0xd12a
 80015ba:	f7ff fd09 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 80015be:	2003      	movs	r0, #3
 80015c0:	f7ff fd16 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd12b);
 80015c4:	f24d 102b 	movw	r0, #53547	@ 0xd12b
 80015c8:	f7ff fd02 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x94);
 80015cc:	2094      	movs	r0, #148	@ 0x94
 80015ce:	f7ff fd0f 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd12c);
 80015d2:	f24d 102c 	movw	r0, #53548	@ 0xd12c
 80015d6:	f7ff fcfb 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 80015da:	2003      	movs	r0, #3
 80015dc:	f7ff fd08 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd12d);
 80015e0:	f24d 102d 	movw	r0, #53549	@ 0xd12d
 80015e4:	f7ff fcf4 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x9f);
 80015e8:	209f      	movs	r0, #159	@ 0x9f
 80015ea:	f7ff fd01 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd12e);
 80015ee:	f24d 102e 	movw	r0, #53550	@ 0xd12e
 80015f2:	f7ff fced 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 80015f6:	2003      	movs	r0, #3
 80015f8:	f7ff fcfa 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd12f);
 80015fc:	f24d 102f 	movw	r0, #53551	@ 0xd12f
 8001600:	f7ff fce6 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xb3);
 8001604:	20b3      	movs	r0, #179	@ 0xb3
 8001606:	f7ff fcf3 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd130);
 800160a:	f24d 1030 	movw	r0, #53552	@ 0xd130
 800160e:	f7ff fcdf 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001612:	2003      	movs	r0, #3
 8001614:	f7ff fcec 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd131);
 8001618:	f24d 1031 	movw	r0, #53553	@ 0xd131
 800161c:	f7ff fcd8 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xb9);
 8001620:	20b9      	movs	r0, #185	@ 0xb9
 8001622:	f7ff fce5 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd132);
 8001626:	f24d 1032 	movw	r0, #53554	@ 0xd132
 800162a:	f7ff fcd1 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 800162e:	2003      	movs	r0, #3
 8001630:	f7ff fcde 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd133);
 8001634:	f24d 1033 	movw	r0, #53555	@ 0xd133
 8001638:	f7ff fcca 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xc1);
 800163c:	20c1      	movs	r0, #193	@ 0xc1
 800163e:	f7ff fcd7 	bl	8000ff0 <lcd_wr_data>
    //#g+
    lcd_wr_reg(0xd200);
 8001642:	f44f 4052 	mov.w	r0, #53760	@ 0xd200
 8001646:	f7ff fcc3 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 800164a:	2000      	movs	r0, #0
 800164c:	f7ff fcd0 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd201);
 8001650:	f24d 2001 	movw	r0, #53761	@ 0xd201
 8001654:	f7ff fcbc 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x37);
 8001658:	2037      	movs	r0, #55	@ 0x37
 800165a:	f7ff fcc9 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd202);
 800165e:	f24d 2002 	movw	r0, #53762	@ 0xd202
 8001662:	f7ff fcb5 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001666:	2000      	movs	r0, #0
 8001668:	f7ff fcc2 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd203);
 800166c:	f24d 2003 	movw	r0, #53763	@ 0xd203
 8001670:	f7ff fcae 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x52);
 8001674:	2052      	movs	r0, #82	@ 0x52
 8001676:	f7ff fcbb 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd204);
 800167a:	f24d 2004 	movw	r0, #53764	@ 0xd204
 800167e:	f7ff fca7 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001682:	2000      	movs	r0, #0
 8001684:	f7ff fcb4 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd205);
 8001688:	f24d 2005 	movw	r0, #53765	@ 0xd205
 800168c:	f7ff fca0 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x7b);
 8001690:	207b      	movs	r0, #123	@ 0x7b
 8001692:	f7ff fcad 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd206);
 8001696:	f24d 2006 	movw	r0, #53766	@ 0xd206
 800169a:	f7ff fc99 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 800169e:	2000      	movs	r0, #0
 80016a0:	f7ff fca6 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd207);
 80016a4:	f24d 2007 	movw	r0, #53767	@ 0xd207
 80016a8:	f7ff fc92 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x99);
 80016ac:	2099      	movs	r0, #153	@ 0x99
 80016ae:	f7ff fc9f 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd208);
 80016b2:	f24d 2008 	movw	r0, #53768	@ 0xd208
 80016b6:	f7ff fc8b 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 80016ba:	2000      	movs	r0, #0
 80016bc:	f7ff fc98 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd209);
 80016c0:	f24d 2009 	movw	r0, #53769	@ 0xd209
 80016c4:	f7ff fc84 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xb1);
 80016c8:	20b1      	movs	r0, #177	@ 0xb1
 80016ca:	f7ff fc91 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd20a);
 80016ce:	f24d 200a 	movw	r0, #53770	@ 0xd20a
 80016d2:	f7ff fc7d 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 80016d6:	2000      	movs	r0, #0
 80016d8:	f7ff fc8a 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd20b);
 80016dc:	f24d 200b 	movw	r0, #53771	@ 0xd20b
 80016e0:	f7ff fc76 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xd2);
 80016e4:	20d2      	movs	r0, #210	@ 0xd2
 80016e6:	f7ff fc83 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd20c);
 80016ea:	f24d 200c 	movw	r0, #53772	@ 0xd20c
 80016ee:	f7ff fc6f 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 80016f2:	2000      	movs	r0, #0
 80016f4:	f7ff fc7c 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd20d);
 80016f8:	f24d 200d 	movw	r0, #53773	@ 0xd20d
 80016fc:	f7ff fc68 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xf6);
 8001700:	20f6      	movs	r0, #246	@ 0xf6
 8001702:	f7ff fc75 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd20e);
 8001706:	f24d 200e 	movw	r0, #53774	@ 0xd20e
 800170a:	f7ff fc61 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x01);
 800170e:	2001      	movs	r0, #1
 8001710:	f7ff fc6e 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd20f);
 8001714:	f24d 200f 	movw	r0, #53775	@ 0xd20f
 8001718:	f7ff fc5a 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x27);
 800171c:	2027      	movs	r0, #39	@ 0x27
 800171e:	f7ff fc67 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd210);
 8001722:	f24d 2010 	movw	r0, #53776	@ 0xd210
 8001726:	f7ff fc53 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x01);
 800172a:	2001      	movs	r0, #1
 800172c:	f7ff fc60 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd211);
 8001730:	f24d 2011 	movw	r0, #53777	@ 0xd211
 8001734:	f7ff fc4c 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x4e);
 8001738:	204e      	movs	r0, #78	@ 0x4e
 800173a:	f7ff fc59 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd212);
 800173e:	f24d 2012 	movw	r0, #53778	@ 0xd212
 8001742:	f7ff fc45 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x01);
 8001746:	2001      	movs	r0, #1
 8001748:	f7ff fc52 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd213);
 800174c:	f24d 2013 	movw	r0, #53779	@ 0xd213
 8001750:	f7ff fc3e 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x8c);
 8001754:	208c      	movs	r0, #140	@ 0x8c
 8001756:	f7ff fc4b 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd214);
 800175a:	f24d 2014 	movw	r0, #53780	@ 0xd214
 800175e:	f7ff fc37 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x01);
 8001762:	2001      	movs	r0, #1
 8001764:	f7ff fc44 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd215);
 8001768:	f24d 2015 	movw	r0, #53781	@ 0xd215
 800176c:	f7ff fc30 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xbe);
 8001770:	20be      	movs	r0, #190	@ 0xbe
 8001772:	f7ff fc3d 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd216);
 8001776:	f24d 2016 	movw	r0, #53782	@ 0xd216
 800177a:	f7ff fc29 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x02);
 800177e:	2002      	movs	r0, #2
 8001780:	f7ff fc36 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd217);
 8001784:	f24d 2017 	movw	r0, #53783	@ 0xd217
 8001788:	f7ff fc22 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x0b);
 800178c:	200b      	movs	r0, #11
 800178e:	f7ff fc2f 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd218);
 8001792:	f24d 2018 	movw	r0, #53784	@ 0xd218
 8001796:	f7ff fc1b 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x02);
 800179a:	2002      	movs	r0, #2
 800179c:	f7ff fc28 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd219);
 80017a0:	f24d 2019 	movw	r0, #53785	@ 0xd219
 80017a4:	f7ff fc14 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x48);
 80017a8:	2048      	movs	r0, #72	@ 0x48
 80017aa:	f7ff fc21 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd21a);
 80017ae:	f24d 201a 	movw	r0, #53786	@ 0xd21a
 80017b2:	f7ff fc0d 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x02);
 80017b6:	2002      	movs	r0, #2
 80017b8:	f7ff fc1a 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd21b);
 80017bc:	f24d 201b 	movw	r0, #53787	@ 0xd21b
 80017c0:	f7ff fc06 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x4a);
 80017c4:	204a      	movs	r0, #74	@ 0x4a
 80017c6:	f7ff fc13 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd21c);
 80017ca:	f24d 201c 	movw	r0, #53788	@ 0xd21c
 80017ce:	f7ff fbff 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x02);
 80017d2:	2002      	movs	r0, #2
 80017d4:	f7ff fc0c 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd21d);
 80017d8:	f24d 201d 	movw	r0, #53789	@ 0xd21d
 80017dc:	f7ff fbf8 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x7e);
 80017e0:	207e      	movs	r0, #126	@ 0x7e
 80017e2:	f7ff fc05 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd21e);
 80017e6:	f24d 201e 	movw	r0, #53790	@ 0xd21e
 80017ea:	f7ff fbf1 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x02);
 80017ee:	2002      	movs	r0, #2
 80017f0:	f7ff fbfe 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd21f);
 80017f4:	f24d 201f 	movw	r0, #53791	@ 0xd21f
 80017f8:	f7ff fbea 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xbc);
 80017fc:	20bc      	movs	r0, #188	@ 0xbc
 80017fe:	f7ff fbf7 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd220);
 8001802:	f24d 2020 	movw	r0, #53792	@ 0xd220
 8001806:	f7ff fbe3 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x02);
 800180a:	2002      	movs	r0, #2
 800180c:	f7ff fbf0 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd221);
 8001810:	f24d 2021 	movw	r0, #53793	@ 0xd221
 8001814:	f7ff fbdc 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xe1);
 8001818:	20e1      	movs	r0, #225	@ 0xe1
 800181a:	f7ff fbe9 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd222);
 800181e:	f24d 2022 	movw	r0, #53794	@ 0xd222
 8001822:	f7ff fbd5 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001826:	2003      	movs	r0, #3
 8001828:	f7ff fbe2 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd223);
 800182c:	f24d 2023 	movw	r0, #53795	@ 0xd223
 8001830:	f7ff fbce 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x10);
 8001834:	2010      	movs	r0, #16
 8001836:	f7ff fbdb 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd224);
 800183a:	f24d 2024 	movw	r0, #53796	@ 0xd224
 800183e:	f7ff fbc7 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001842:	2003      	movs	r0, #3
 8001844:	f7ff fbd4 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd225);
 8001848:	f24d 2025 	movw	r0, #53797	@ 0xd225
 800184c:	f7ff fbc0 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x31);
 8001850:	2031      	movs	r0, #49	@ 0x31
 8001852:	f7ff fbcd 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd226);
 8001856:	f24d 2026 	movw	r0, #53798	@ 0xd226
 800185a:	f7ff fbb9 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 800185e:	2003      	movs	r0, #3
 8001860:	f7ff fbc6 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd227);
 8001864:	f24d 2027 	movw	r0, #53799	@ 0xd227
 8001868:	f7ff fbb2 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x5a);
 800186c:	205a      	movs	r0, #90	@ 0x5a
 800186e:	f7ff fbbf 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd228);
 8001872:	f24d 2028 	movw	r0, #53800	@ 0xd228
 8001876:	f7ff fbab 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 800187a:	2003      	movs	r0, #3
 800187c:	f7ff fbb8 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd229);
 8001880:	f24d 2029 	movw	r0, #53801	@ 0xd229
 8001884:	f7ff fba4 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x73);
 8001888:	2073      	movs	r0, #115	@ 0x73
 800188a:	f7ff fbb1 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd22a);
 800188e:	f24d 202a 	movw	r0, #53802	@ 0xd22a
 8001892:	f7ff fb9d 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001896:	2003      	movs	r0, #3
 8001898:	f7ff fbaa 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd22b);
 800189c:	f24d 202b 	movw	r0, #53803	@ 0xd22b
 80018a0:	f7ff fb96 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x94);
 80018a4:	2094      	movs	r0, #148	@ 0x94
 80018a6:	f7ff fba3 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd22c);
 80018aa:	f24d 202c 	movw	r0, #53804	@ 0xd22c
 80018ae:	f7ff fb8f 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 80018b2:	2003      	movs	r0, #3
 80018b4:	f7ff fb9c 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd22d);
 80018b8:	f24d 202d 	movw	r0, #53805	@ 0xd22d
 80018bc:	f7ff fb88 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x9f);
 80018c0:	209f      	movs	r0, #159	@ 0x9f
 80018c2:	f7ff fb95 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd22e);
 80018c6:	f24d 202e 	movw	r0, #53806	@ 0xd22e
 80018ca:	f7ff fb81 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 80018ce:	2003      	movs	r0, #3
 80018d0:	f7ff fb8e 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd22f);
 80018d4:	f24d 202f 	movw	r0, #53807	@ 0xd22f
 80018d8:	f7ff fb7a 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xb3);
 80018dc:	20b3      	movs	r0, #179	@ 0xb3
 80018de:	f7ff fb87 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd230);
 80018e2:	f24d 2030 	movw	r0, #53808	@ 0xd230
 80018e6:	f7ff fb73 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 80018ea:	2003      	movs	r0, #3
 80018ec:	f7ff fb80 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd231);
 80018f0:	f24d 2031 	movw	r0, #53809	@ 0xd231
 80018f4:	f7ff fb6c 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xb9);
 80018f8:	20b9      	movs	r0, #185	@ 0xb9
 80018fa:	f7ff fb79 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd232);
 80018fe:	f24d 2032 	movw	r0, #53810	@ 0xd232
 8001902:	f7ff fb65 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001906:	2003      	movs	r0, #3
 8001908:	f7ff fb72 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd233);
 800190c:	f24d 2033 	movw	r0, #53811	@ 0xd233
 8001910:	f7ff fb5e 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xc1);
 8001914:	20c1      	movs	r0, #193	@ 0xc1
 8001916:	f7ff fb6b 	bl	8000ff0 <lcd_wr_data>
    //#b+
    lcd_wr_reg(0xd300);
 800191a:	f44f 4053 	mov.w	r0, #54016	@ 0xd300
 800191e:	f7ff fb57 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001922:	2000      	movs	r0, #0
 8001924:	f7ff fb64 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd301);
 8001928:	f24d 3001 	movw	r0, #54017	@ 0xd301
 800192c:	f7ff fb50 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x37);
 8001930:	2037      	movs	r0, #55	@ 0x37
 8001932:	f7ff fb5d 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd302);
 8001936:	f24d 3002 	movw	r0, #54018	@ 0xd302
 800193a:	f7ff fb49 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 800193e:	2000      	movs	r0, #0
 8001940:	f7ff fb56 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd303);
 8001944:	f24d 3003 	movw	r0, #54019	@ 0xd303
 8001948:	f7ff fb42 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x52);
 800194c:	2052      	movs	r0, #82	@ 0x52
 800194e:	f7ff fb4f 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd304);
 8001952:	f24d 3004 	movw	r0, #54020	@ 0xd304
 8001956:	f7ff fb3b 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 800195a:	2000      	movs	r0, #0
 800195c:	f7ff fb48 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd305);
 8001960:	f24d 3005 	movw	r0, #54021	@ 0xd305
 8001964:	f7ff fb34 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x7b);
 8001968:	207b      	movs	r0, #123	@ 0x7b
 800196a:	f7ff fb41 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd306);
 800196e:	f24d 3006 	movw	r0, #54022	@ 0xd306
 8001972:	f7ff fb2d 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001976:	2000      	movs	r0, #0
 8001978:	f7ff fb3a 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd307);
 800197c:	f24d 3007 	movw	r0, #54023	@ 0xd307
 8001980:	f7ff fb26 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x99);
 8001984:	2099      	movs	r0, #153	@ 0x99
 8001986:	f7ff fb33 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd308);
 800198a:	f24d 3008 	movw	r0, #54024	@ 0xd308
 800198e:	f7ff fb1f 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001992:	2000      	movs	r0, #0
 8001994:	f7ff fb2c 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd309);
 8001998:	f24d 3009 	movw	r0, #54025	@ 0xd309
 800199c:	f7ff fb18 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xb1);
 80019a0:	20b1      	movs	r0, #177	@ 0xb1
 80019a2:	f7ff fb25 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd30a);
 80019a6:	f24d 300a 	movw	r0, #54026	@ 0xd30a
 80019aa:	f7ff fb11 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 80019ae:	2000      	movs	r0, #0
 80019b0:	f7ff fb1e 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd30b);
 80019b4:	f24d 300b 	movw	r0, #54027	@ 0xd30b
 80019b8:	f7ff fb0a 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xd2);
 80019bc:	20d2      	movs	r0, #210	@ 0xd2
 80019be:	f7ff fb17 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd30c);
 80019c2:	f24d 300c 	movw	r0, #54028	@ 0xd30c
 80019c6:	f7ff fb03 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 80019ca:	2000      	movs	r0, #0
 80019cc:	f7ff fb10 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd30d);
 80019d0:	f24d 300d 	movw	r0, #54029	@ 0xd30d
 80019d4:	f7ff fafc 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xf6);
 80019d8:	20f6      	movs	r0, #246	@ 0xf6
 80019da:	f7ff fb09 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd30e);
 80019de:	f24d 300e 	movw	r0, #54030	@ 0xd30e
 80019e2:	f7ff faf5 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x01);
 80019e6:	2001      	movs	r0, #1
 80019e8:	f7ff fb02 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd30f);
 80019ec:	f24d 300f 	movw	r0, #54031	@ 0xd30f
 80019f0:	f7ff faee 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x27);
 80019f4:	2027      	movs	r0, #39	@ 0x27
 80019f6:	f7ff fafb 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd310);
 80019fa:	f24d 3010 	movw	r0, #54032	@ 0xd310
 80019fe:	f7ff fae7 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x01);
 8001a02:	2001      	movs	r0, #1
 8001a04:	f7ff faf4 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd311);
 8001a08:	f24d 3011 	movw	r0, #54033	@ 0xd311
 8001a0c:	f7ff fae0 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x4e);
 8001a10:	204e      	movs	r0, #78	@ 0x4e
 8001a12:	f7ff faed 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd312);
 8001a16:	f24d 3012 	movw	r0, #54034	@ 0xd312
 8001a1a:	f7ff fad9 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x01);
 8001a1e:	2001      	movs	r0, #1
 8001a20:	f7ff fae6 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd313);
 8001a24:	f24d 3013 	movw	r0, #54035	@ 0xd313
 8001a28:	f7ff fad2 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x8c);
 8001a2c:	208c      	movs	r0, #140	@ 0x8c
 8001a2e:	f7ff fadf 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd314);
 8001a32:	f24d 3014 	movw	r0, #54036	@ 0xd314
 8001a36:	f7ff facb 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x01);
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	f7ff fad8 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd315);
 8001a40:	f24d 3015 	movw	r0, #54037	@ 0xd315
 8001a44:	f7ff fac4 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xbe);
 8001a48:	20be      	movs	r0, #190	@ 0xbe
 8001a4a:	f7ff fad1 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd316);
 8001a4e:	f24d 3016 	movw	r0, #54038	@ 0xd316
 8001a52:	f7ff fabd 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8001a56:	2002      	movs	r0, #2
 8001a58:	f7ff faca 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd317);
 8001a5c:	f24d 3017 	movw	r0, #54039	@ 0xd317
 8001a60:	f7ff fab6 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x0b);
 8001a64:	200b      	movs	r0, #11
 8001a66:	f7ff fac3 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd318);
 8001a6a:	f24d 3018 	movw	r0, #54040	@ 0xd318
 8001a6e:	f7ff faaf 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8001a72:	2002      	movs	r0, #2
 8001a74:	f7ff fabc 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd319);
 8001a78:	f24d 3019 	movw	r0, #54041	@ 0xd319
 8001a7c:	f7ff faa8 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x48);
 8001a80:	2048      	movs	r0, #72	@ 0x48
 8001a82:	f7ff fab5 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd31a);
 8001a86:	f24d 301a 	movw	r0, #54042	@ 0xd31a
 8001a8a:	f7ff faa1 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8001a8e:	2002      	movs	r0, #2
 8001a90:	f7ff faae 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd31b);
 8001a94:	f24d 301b 	movw	r0, #54043	@ 0xd31b
 8001a98:	f7ff fa9a 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x4a);
 8001a9c:	204a      	movs	r0, #74	@ 0x4a
 8001a9e:	f7ff faa7 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd31c);
 8001aa2:	f24d 301c 	movw	r0, #54044	@ 0xd31c
 8001aa6:	f7ff fa93 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8001aaa:	2002      	movs	r0, #2
 8001aac:	f7ff faa0 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd31d);
 8001ab0:	f24d 301d 	movw	r0, #54045	@ 0xd31d
 8001ab4:	f7ff fa8c 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x7e);
 8001ab8:	207e      	movs	r0, #126	@ 0x7e
 8001aba:	f7ff fa99 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd31e);
 8001abe:	f24d 301e 	movw	r0, #54046	@ 0xd31e
 8001ac2:	f7ff fa85 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8001ac6:	2002      	movs	r0, #2
 8001ac8:	f7ff fa92 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd31f);
 8001acc:	f24d 301f 	movw	r0, #54047	@ 0xd31f
 8001ad0:	f7ff fa7e 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xbc);
 8001ad4:	20bc      	movs	r0, #188	@ 0xbc
 8001ad6:	f7ff fa8b 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd320);
 8001ada:	f24d 3020 	movw	r0, #54048	@ 0xd320
 8001ade:	f7ff fa77 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8001ae2:	2002      	movs	r0, #2
 8001ae4:	f7ff fa84 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd321);
 8001ae8:	f24d 3021 	movw	r0, #54049	@ 0xd321
 8001aec:	f7ff fa70 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xe1);
 8001af0:	20e1      	movs	r0, #225	@ 0xe1
 8001af2:	f7ff fa7d 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd322);
 8001af6:	f24d 3022 	movw	r0, #54050	@ 0xd322
 8001afa:	f7ff fa69 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001afe:	2003      	movs	r0, #3
 8001b00:	f7ff fa76 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd323);
 8001b04:	f24d 3023 	movw	r0, #54051	@ 0xd323
 8001b08:	f7ff fa62 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x10);
 8001b0c:	2010      	movs	r0, #16
 8001b0e:	f7ff fa6f 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd324);
 8001b12:	f24d 3024 	movw	r0, #54052	@ 0xd324
 8001b16:	f7ff fa5b 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001b1a:	2003      	movs	r0, #3
 8001b1c:	f7ff fa68 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd325);
 8001b20:	f24d 3025 	movw	r0, #54053	@ 0xd325
 8001b24:	f7ff fa54 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x31);
 8001b28:	2031      	movs	r0, #49	@ 0x31
 8001b2a:	f7ff fa61 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd326);
 8001b2e:	f24d 3026 	movw	r0, #54054	@ 0xd326
 8001b32:	f7ff fa4d 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001b36:	2003      	movs	r0, #3
 8001b38:	f7ff fa5a 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd327);
 8001b3c:	f24d 3027 	movw	r0, #54055	@ 0xd327
 8001b40:	f7ff fa46 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x5a);
 8001b44:	205a      	movs	r0, #90	@ 0x5a
 8001b46:	f7ff fa53 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd328);
 8001b4a:	f24d 3028 	movw	r0, #54056	@ 0xd328
 8001b4e:	f7ff fa3f 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001b52:	2003      	movs	r0, #3
 8001b54:	f7ff fa4c 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd329);
 8001b58:	f24d 3029 	movw	r0, #54057	@ 0xd329
 8001b5c:	f7ff fa38 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x73);
 8001b60:	2073      	movs	r0, #115	@ 0x73
 8001b62:	f7ff fa45 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd32a);
 8001b66:	f24d 302a 	movw	r0, #54058	@ 0xd32a
 8001b6a:	f7ff fa31 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001b6e:	2003      	movs	r0, #3
 8001b70:	f7ff fa3e 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd32b);
 8001b74:	f24d 302b 	movw	r0, #54059	@ 0xd32b
 8001b78:	f7ff fa2a 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x94);
 8001b7c:	2094      	movs	r0, #148	@ 0x94
 8001b7e:	f7ff fa37 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd32c);
 8001b82:	f24d 302c 	movw	r0, #54060	@ 0xd32c
 8001b86:	f7ff fa23 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001b8a:	2003      	movs	r0, #3
 8001b8c:	f7ff fa30 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd32d);
 8001b90:	f24d 302d 	movw	r0, #54061	@ 0xd32d
 8001b94:	f7ff fa1c 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x9f);
 8001b98:	209f      	movs	r0, #159	@ 0x9f
 8001b9a:	f7ff fa29 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd32e);
 8001b9e:	f24d 302e 	movw	r0, #54062	@ 0xd32e
 8001ba2:	f7ff fa15 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001ba6:	2003      	movs	r0, #3
 8001ba8:	f7ff fa22 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd32f);
 8001bac:	f24d 302f 	movw	r0, #54063	@ 0xd32f
 8001bb0:	f7ff fa0e 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xb3);
 8001bb4:	20b3      	movs	r0, #179	@ 0xb3
 8001bb6:	f7ff fa1b 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd330);
 8001bba:	f24d 3030 	movw	r0, #54064	@ 0xd330
 8001bbe:	f7ff fa07 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001bc2:	2003      	movs	r0, #3
 8001bc4:	f7ff fa14 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd331);
 8001bc8:	f24d 3031 	movw	r0, #54065	@ 0xd331
 8001bcc:	f7ff fa00 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xb9);
 8001bd0:	20b9      	movs	r0, #185	@ 0xb9
 8001bd2:	f7ff fa0d 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd332);
 8001bd6:	f24d 3032 	movw	r0, #54066	@ 0xd332
 8001bda:	f7ff f9f9 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001bde:	2003      	movs	r0, #3
 8001be0:	f7ff fa06 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd333);
 8001be4:	f24d 3033 	movw	r0, #54067	@ 0xd333
 8001be8:	f7ff f9f2 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xc1);
 8001bec:	20c1      	movs	r0, #193	@ 0xc1
 8001bee:	f7ff f9ff 	bl	8000ff0 <lcd_wr_data>

    //#r-///////////////////////////////////////////
    lcd_wr_reg(0xd400);
 8001bf2:	f44f 4054 	mov.w	r0, #54272	@ 0xd400
 8001bf6:	f7ff f9eb 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	f7ff f9f8 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd401);
 8001c00:	f24d 4001 	movw	r0, #54273	@ 0xd401
 8001c04:	f7ff f9e4 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x37);
 8001c08:	2037      	movs	r0, #55	@ 0x37
 8001c0a:	f7ff f9f1 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd402);
 8001c0e:	f24d 4002 	movw	r0, #54274	@ 0xd402
 8001c12:	f7ff f9dd 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001c16:	2000      	movs	r0, #0
 8001c18:	f7ff f9ea 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd403);
 8001c1c:	f24d 4003 	movw	r0, #54275	@ 0xd403
 8001c20:	f7ff f9d6 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x52);
 8001c24:	2052      	movs	r0, #82	@ 0x52
 8001c26:	f7ff f9e3 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd404);
 8001c2a:	f24d 4004 	movw	r0, #54276	@ 0xd404
 8001c2e:	f7ff f9cf 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001c32:	2000      	movs	r0, #0
 8001c34:	f7ff f9dc 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd405);
 8001c38:	f24d 4005 	movw	r0, #54277	@ 0xd405
 8001c3c:	f7ff f9c8 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x7b);
 8001c40:	207b      	movs	r0, #123	@ 0x7b
 8001c42:	f7ff f9d5 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd406);
 8001c46:	f24d 4006 	movw	r0, #54278	@ 0xd406
 8001c4a:	f7ff f9c1 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f7ff f9ce 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd407);
 8001c54:	f24d 4007 	movw	r0, #54279	@ 0xd407
 8001c58:	f7ff f9ba 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x99);
 8001c5c:	2099      	movs	r0, #153	@ 0x99
 8001c5e:	f7ff f9c7 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd408);
 8001c62:	f24d 4008 	movw	r0, #54280	@ 0xd408
 8001c66:	f7ff f9b3 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	f7ff f9c0 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd409);
 8001c70:	f24d 4009 	movw	r0, #54281	@ 0xd409
 8001c74:	f7ff f9ac 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xb1);
 8001c78:	20b1      	movs	r0, #177	@ 0xb1
 8001c7a:	f7ff f9b9 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd40a);
 8001c7e:	f24d 400a 	movw	r0, #54282	@ 0xd40a
 8001c82:	f7ff f9a5 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001c86:	2000      	movs	r0, #0
 8001c88:	f7ff f9b2 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd40b);
 8001c8c:	f24d 400b 	movw	r0, #54283	@ 0xd40b
 8001c90:	f7ff f99e 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xd2);
 8001c94:	20d2      	movs	r0, #210	@ 0xd2
 8001c96:	f7ff f9ab 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd40c);
 8001c9a:	f24d 400c 	movw	r0, #54284	@ 0xd40c
 8001c9e:	f7ff f997 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	f7ff f9a4 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd40d);
 8001ca8:	f24d 400d 	movw	r0, #54285	@ 0xd40d
 8001cac:	f7ff f990 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xf6);
 8001cb0:	20f6      	movs	r0, #246	@ 0xf6
 8001cb2:	f7ff f99d 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd40e);
 8001cb6:	f24d 400e 	movw	r0, #54286	@ 0xd40e
 8001cba:	f7ff f989 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x01);
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f7ff f996 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd40f);
 8001cc4:	f24d 400f 	movw	r0, #54287	@ 0xd40f
 8001cc8:	f7ff f982 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x27);
 8001ccc:	2027      	movs	r0, #39	@ 0x27
 8001cce:	f7ff f98f 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd410);
 8001cd2:	f24d 4010 	movw	r0, #54288	@ 0xd410
 8001cd6:	f7ff f97b 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x01);
 8001cda:	2001      	movs	r0, #1
 8001cdc:	f7ff f988 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd411);
 8001ce0:	f24d 4011 	movw	r0, #54289	@ 0xd411
 8001ce4:	f7ff f974 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x4e);
 8001ce8:	204e      	movs	r0, #78	@ 0x4e
 8001cea:	f7ff f981 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd412);
 8001cee:	f24d 4012 	movw	r0, #54290	@ 0xd412
 8001cf2:	f7ff f96d 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x01);
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	f7ff f97a 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd413);
 8001cfc:	f24d 4013 	movw	r0, #54291	@ 0xd413
 8001d00:	f7ff f966 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x8c);
 8001d04:	208c      	movs	r0, #140	@ 0x8c
 8001d06:	f7ff f973 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd414);
 8001d0a:	f24d 4014 	movw	r0, #54292	@ 0xd414
 8001d0e:	f7ff f95f 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x01);
 8001d12:	2001      	movs	r0, #1
 8001d14:	f7ff f96c 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd415);
 8001d18:	f24d 4015 	movw	r0, #54293	@ 0xd415
 8001d1c:	f7ff f958 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xbe);
 8001d20:	20be      	movs	r0, #190	@ 0xbe
 8001d22:	f7ff f965 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd416);
 8001d26:	f24d 4016 	movw	r0, #54294	@ 0xd416
 8001d2a:	f7ff f951 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8001d2e:	2002      	movs	r0, #2
 8001d30:	f7ff f95e 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd417);
 8001d34:	f24d 4017 	movw	r0, #54295	@ 0xd417
 8001d38:	f7ff f94a 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x0b);
 8001d3c:	200b      	movs	r0, #11
 8001d3e:	f7ff f957 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd418);
 8001d42:	f24d 4018 	movw	r0, #54296	@ 0xd418
 8001d46:	f7ff f943 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8001d4a:	2002      	movs	r0, #2
 8001d4c:	f7ff f950 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd419);
 8001d50:	f24d 4019 	movw	r0, #54297	@ 0xd419
 8001d54:	f7ff f93c 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x48);
 8001d58:	2048      	movs	r0, #72	@ 0x48
 8001d5a:	f7ff f949 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd41a);
 8001d5e:	f24d 401a 	movw	r0, #54298	@ 0xd41a
 8001d62:	f7ff f935 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8001d66:	2002      	movs	r0, #2
 8001d68:	f7ff f942 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd41b);
 8001d6c:	f24d 401b 	movw	r0, #54299	@ 0xd41b
 8001d70:	f7ff f92e 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x4a);
 8001d74:	204a      	movs	r0, #74	@ 0x4a
 8001d76:	f7ff f93b 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd41c);
 8001d7a:	f24d 401c 	movw	r0, #54300	@ 0xd41c
 8001d7e:	f7ff f927 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8001d82:	2002      	movs	r0, #2
 8001d84:	f7ff f934 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd41d);
 8001d88:	f24d 401d 	movw	r0, #54301	@ 0xd41d
 8001d8c:	f7ff f920 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x7e);
 8001d90:	207e      	movs	r0, #126	@ 0x7e
 8001d92:	f7ff f92d 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd41e);
 8001d96:	f24d 401e 	movw	r0, #54302	@ 0xd41e
 8001d9a:	f7ff f919 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8001d9e:	2002      	movs	r0, #2
 8001da0:	f7ff f926 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd41f);
 8001da4:	f24d 401f 	movw	r0, #54303	@ 0xd41f
 8001da8:	f7ff f912 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xbc);
 8001dac:	20bc      	movs	r0, #188	@ 0xbc
 8001dae:	f7ff f91f 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd420);
 8001db2:	f24d 4020 	movw	r0, #54304	@ 0xd420
 8001db6:	f7ff f90b 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8001dba:	2002      	movs	r0, #2
 8001dbc:	f7ff f918 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd421);
 8001dc0:	f24d 4021 	movw	r0, #54305	@ 0xd421
 8001dc4:	f7ff f904 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xe1);
 8001dc8:	20e1      	movs	r0, #225	@ 0xe1
 8001dca:	f7ff f911 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd422);
 8001dce:	f24d 4022 	movw	r0, #54306	@ 0xd422
 8001dd2:	f7ff f8fd 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001dd6:	2003      	movs	r0, #3
 8001dd8:	f7ff f90a 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd423);
 8001ddc:	f24d 4023 	movw	r0, #54307	@ 0xd423
 8001de0:	f7ff f8f6 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x10);
 8001de4:	2010      	movs	r0, #16
 8001de6:	f7ff f903 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd424);
 8001dea:	f24d 4024 	movw	r0, #54308	@ 0xd424
 8001dee:	f7ff f8ef 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001df2:	2003      	movs	r0, #3
 8001df4:	f7ff f8fc 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd425);
 8001df8:	f24d 4025 	movw	r0, #54309	@ 0xd425
 8001dfc:	f7ff f8e8 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x31);
 8001e00:	2031      	movs	r0, #49	@ 0x31
 8001e02:	f7ff f8f5 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd426);
 8001e06:	f24d 4026 	movw	r0, #54310	@ 0xd426
 8001e0a:	f7ff f8e1 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001e0e:	2003      	movs	r0, #3
 8001e10:	f7ff f8ee 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd427);
 8001e14:	f24d 4027 	movw	r0, #54311	@ 0xd427
 8001e18:	f7ff f8da 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x5a);
 8001e1c:	205a      	movs	r0, #90	@ 0x5a
 8001e1e:	f7ff f8e7 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd428);
 8001e22:	f24d 4028 	movw	r0, #54312	@ 0xd428
 8001e26:	f7ff f8d3 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001e2a:	2003      	movs	r0, #3
 8001e2c:	f7ff f8e0 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd429);
 8001e30:	f24d 4029 	movw	r0, #54313	@ 0xd429
 8001e34:	f7ff f8cc 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x73);
 8001e38:	2073      	movs	r0, #115	@ 0x73
 8001e3a:	f7ff f8d9 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd42a);
 8001e3e:	f24d 402a 	movw	r0, #54314	@ 0xd42a
 8001e42:	f7ff f8c5 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001e46:	2003      	movs	r0, #3
 8001e48:	f7ff f8d2 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd42b);
 8001e4c:	f24d 402b 	movw	r0, #54315	@ 0xd42b
 8001e50:	f7ff f8be 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x94);
 8001e54:	2094      	movs	r0, #148	@ 0x94
 8001e56:	f7ff f8cb 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd42c);
 8001e5a:	f24d 402c 	movw	r0, #54316	@ 0xd42c
 8001e5e:	f7ff f8b7 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001e62:	2003      	movs	r0, #3
 8001e64:	f7ff f8c4 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd42d);
 8001e68:	f24d 402d 	movw	r0, #54317	@ 0xd42d
 8001e6c:	f7ff f8b0 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x9f);
 8001e70:	209f      	movs	r0, #159	@ 0x9f
 8001e72:	f7ff f8bd 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd42e);
 8001e76:	f24d 402e 	movw	r0, #54318	@ 0xd42e
 8001e7a:	f7ff f8a9 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001e7e:	2003      	movs	r0, #3
 8001e80:	f7ff f8b6 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd42f);
 8001e84:	f24d 402f 	movw	r0, #54319	@ 0xd42f
 8001e88:	f7ff f8a2 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xb3);
 8001e8c:	20b3      	movs	r0, #179	@ 0xb3
 8001e8e:	f7ff f8af 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd430);
 8001e92:	f24d 4030 	movw	r0, #54320	@ 0xd430
 8001e96:	f7ff f89b 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001e9a:	2003      	movs	r0, #3
 8001e9c:	f7ff f8a8 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd431);
 8001ea0:	f24d 4031 	movw	r0, #54321	@ 0xd431
 8001ea4:	f7ff f894 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xb9);
 8001ea8:	20b9      	movs	r0, #185	@ 0xb9
 8001eaa:	f7ff f8a1 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd432);
 8001eae:	f24d 4032 	movw	r0, #54322	@ 0xd432
 8001eb2:	f7ff f88d 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8001eb6:	2003      	movs	r0, #3
 8001eb8:	f7ff f89a 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd433);
 8001ebc:	f24d 4033 	movw	r0, #54323	@ 0xd433
 8001ec0:	f7ff f886 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xc1);
 8001ec4:	20c1      	movs	r0, #193	@ 0xc1
 8001ec6:	f7ff f893 	bl	8000ff0 <lcd_wr_data>

    //#g-//////////////////////////////////////////////
    lcd_wr_reg(0xd500);
 8001eca:	f44f 4055 	mov.w	r0, #54528	@ 0xd500
 8001ece:	f7ff f87f 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f7ff f88c 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd501);
 8001ed8:	f24d 5001 	movw	r0, #54529	@ 0xd501
 8001edc:	f7ff f878 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x37);
 8001ee0:	2037      	movs	r0, #55	@ 0x37
 8001ee2:	f7ff f885 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd502);
 8001ee6:	f24d 5002 	movw	r0, #54530	@ 0xd502
 8001eea:	f7ff f871 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001eee:	2000      	movs	r0, #0
 8001ef0:	f7ff f87e 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd503);
 8001ef4:	f24d 5003 	movw	r0, #54531	@ 0xd503
 8001ef8:	f7ff f86a 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x52);
 8001efc:	2052      	movs	r0, #82	@ 0x52
 8001efe:	f7ff f877 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd504);
 8001f02:	f24d 5004 	movw	r0, #54532	@ 0xd504
 8001f06:	f7ff f863 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f7ff f870 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd505);
 8001f10:	f24d 5005 	movw	r0, #54533	@ 0xd505
 8001f14:	f7ff f85c 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x7b);
 8001f18:	207b      	movs	r0, #123	@ 0x7b
 8001f1a:	f7ff f869 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd506);
 8001f1e:	f24d 5006 	movw	r0, #54534	@ 0xd506
 8001f22:	f7ff f855 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001f26:	2000      	movs	r0, #0
 8001f28:	f7ff f862 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd507);
 8001f2c:	f24d 5007 	movw	r0, #54535	@ 0xd507
 8001f30:	f7ff f84e 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x99);
 8001f34:	2099      	movs	r0, #153	@ 0x99
 8001f36:	f7ff f85b 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd508);
 8001f3a:	f24d 5008 	movw	r0, #54536	@ 0xd508
 8001f3e:	f7ff f847 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001f42:	2000      	movs	r0, #0
 8001f44:	f7ff f854 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd509);
 8001f48:	f24d 5009 	movw	r0, #54537	@ 0xd509
 8001f4c:	f7ff f840 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xb1);
 8001f50:	20b1      	movs	r0, #177	@ 0xb1
 8001f52:	f7ff f84d 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd50a);
 8001f56:	f24d 500a 	movw	r0, #54538	@ 0xd50a
 8001f5a:	f7ff f839 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001f5e:	2000      	movs	r0, #0
 8001f60:	f7ff f846 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd50b);
 8001f64:	f24d 500b 	movw	r0, #54539	@ 0xd50b
 8001f68:	f7ff f832 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xd2);
 8001f6c:	20d2      	movs	r0, #210	@ 0xd2
 8001f6e:	f7ff f83f 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd50c);
 8001f72:	f24d 500c 	movw	r0, #54540	@ 0xd50c
 8001f76:	f7ff f82b 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8001f7a:	2000      	movs	r0, #0
 8001f7c:	f7ff f838 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd50d);
 8001f80:	f24d 500d 	movw	r0, #54541	@ 0xd50d
 8001f84:	f7ff f824 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xf6);
 8001f88:	20f6      	movs	r0, #246	@ 0xf6
 8001f8a:	f7ff f831 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd50e);
 8001f8e:	f24d 500e 	movw	r0, #54542	@ 0xd50e
 8001f92:	f7ff f81d 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x01);
 8001f96:	2001      	movs	r0, #1
 8001f98:	f7ff f82a 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd50f);
 8001f9c:	f24d 500f 	movw	r0, #54543	@ 0xd50f
 8001fa0:	f7ff f816 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x27);
 8001fa4:	2027      	movs	r0, #39	@ 0x27
 8001fa6:	f7ff f823 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd510);
 8001faa:	f24d 5010 	movw	r0, #54544	@ 0xd510
 8001fae:	f7ff f80f 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x01);
 8001fb2:	2001      	movs	r0, #1
 8001fb4:	f7ff f81c 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd511);
 8001fb8:	f24d 5011 	movw	r0, #54545	@ 0xd511
 8001fbc:	f7ff f808 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x4e);
 8001fc0:	204e      	movs	r0, #78	@ 0x4e
 8001fc2:	f7ff f815 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd512);
 8001fc6:	f24d 5012 	movw	r0, #54546	@ 0xd512
 8001fca:	f7ff f801 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x01);
 8001fce:	2001      	movs	r0, #1
 8001fd0:	f7ff f80e 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd513);
 8001fd4:	f24d 5013 	movw	r0, #54547	@ 0xd513
 8001fd8:	f7fe fffa 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x8c);
 8001fdc:	208c      	movs	r0, #140	@ 0x8c
 8001fde:	f7ff f807 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd514);
 8001fe2:	f24d 5014 	movw	r0, #54548	@ 0xd514
 8001fe6:	f7fe fff3 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x01);
 8001fea:	2001      	movs	r0, #1
 8001fec:	f7ff f800 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd515);
 8001ff0:	f24d 5015 	movw	r0, #54549	@ 0xd515
 8001ff4:	f7fe ffec 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xbe);
 8001ff8:	20be      	movs	r0, #190	@ 0xbe
 8001ffa:	f7fe fff9 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd516);
 8001ffe:	f24d 5016 	movw	r0, #54550	@ 0xd516
 8002002:	f7fe ffe5 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8002006:	2002      	movs	r0, #2
 8002008:	f7fe fff2 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd517);
 800200c:	f24d 5017 	movw	r0, #54551	@ 0xd517
 8002010:	f7fe ffde 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x0b);
 8002014:	200b      	movs	r0, #11
 8002016:	f7fe ffeb 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd518);
 800201a:	f24d 5018 	movw	r0, #54552	@ 0xd518
 800201e:	f7fe ffd7 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8002022:	2002      	movs	r0, #2
 8002024:	f7fe ffe4 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd519);
 8002028:	f24d 5019 	movw	r0, #54553	@ 0xd519
 800202c:	f7fe ffd0 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x48);
 8002030:	2048      	movs	r0, #72	@ 0x48
 8002032:	f7fe ffdd 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd51a);
 8002036:	f24d 501a 	movw	r0, #54554	@ 0xd51a
 800203a:	f7fe ffc9 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x02);
 800203e:	2002      	movs	r0, #2
 8002040:	f7fe ffd6 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd51b);
 8002044:	f24d 501b 	movw	r0, #54555	@ 0xd51b
 8002048:	f7fe ffc2 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x4a);
 800204c:	204a      	movs	r0, #74	@ 0x4a
 800204e:	f7fe ffcf 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd51c);
 8002052:	f24d 501c 	movw	r0, #54556	@ 0xd51c
 8002056:	f7fe ffbb 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x02);
 800205a:	2002      	movs	r0, #2
 800205c:	f7fe ffc8 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd51d);
 8002060:	f24d 501d 	movw	r0, #54557	@ 0xd51d
 8002064:	f7fe ffb4 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x7e);
 8002068:	207e      	movs	r0, #126	@ 0x7e
 800206a:	f7fe ffc1 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd51e);
 800206e:	f24d 501e 	movw	r0, #54558	@ 0xd51e
 8002072:	f7fe ffad 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8002076:	2002      	movs	r0, #2
 8002078:	f7fe ffba 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd51f);
 800207c:	f24d 501f 	movw	r0, #54559	@ 0xd51f
 8002080:	f7fe ffa6 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xbc);
 8002084:	20bc      	movs	r0, #188	@ 0xbc
 8002086:	f7fe ffb3 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd520);
 800208a:	f24d 5020 	movw	r0, #54560	@ 0xd520
 800208e:	f7fe ff9f 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8002092:	2002      	movs	r0, #2
 8002094:	f7fe ffac 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd521);
 8002098:	f24d 5021 	movw	r0, #54561	@ 0xd521
 800209c:	f7fe ff98 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xe1);
 80020a0:	20e1      	movs	r0, #225	@ 0xe1
 80020a2:	f7fe ffa5 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd522);
 80020a6:	f24d 5022 	movw	r0, #54562	@ 0xd522
 80020aa:	f7fe ff91 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 80020ae:	2003      	movs	r0, #3
 80020b0:	f7fe ff9e 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd523);
 80020b4:	f24d 5023 	movw	r0, #54563	@ 0xd523
 80020b8:	f7fe ff8a 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x10);
 80020bc:	2010      	movs	r0, #16
 80020be:	f7fe ff97 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd524);
 80020c2:	f24d 5024 	movw	r0, #54564	@ 0xd524
 80020c6:	f7fe ff83 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 80020ca:	2003      	movs	r0, #3
 80020cc:	f7fe ff90 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd525);
 80020d0:	f24d 5025 	movw	r0, #54565	@ 0xd525
 80020d4:	f7fe ff7c 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x31);
 80020d8:	2031      	movs	r0, #49	@ 0x31
 80020da:	f7fe ff89 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd526);
 80020de:	f24d 5026 	movw	r0, #54566	@ 0xd526
 80020e2:	f7fe ff75 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 80020e6:	2003      	movs	r0, #3
 80020e8:	f7fe ff82 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd527);
 80020ec:	f24d 5027 	movw	r0, #54567	@ 0xd527
 80020f0:	f7fe ff6e 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x5a);
 80020f4:	205a      	movs	r0, #90	@ 0x5a
 80020f6:	f7fe ff7b 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd528);
 80020fa:	f24d 5028 	movw	r0, #54568	@ 0xd528
 80020fe:	f7fe ff67 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8002102:	2003      	movs	r0, #3
 8002104:	f7fe ff74 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd529);
 8002108:	f24d 5029 	movw	r0, #54569	@ 0xd529
 800210c:	f7fe ff60 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x73);
 8002110:	2073      	movs	r0, #115	@ 0x73
 8002112:	f7fe ff6d 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd52a);
 8002116:	f24d 502a 	movw	r0, #54570	@ 0xd52a
 800211a:	f7fe ff59 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 800211e:	2003      	movs	r0, #3
 8002120:	f7fe ff66 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd52b);
 8002124:	f24d 502b 	movw	r0, #54571	@ 0xd52b
 8002128:	f7fe ff52 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x94);
 800212c:	2094      	movs	r0, #148	@ 0x94
 800212e:	f7fe ff5f 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd52c);
 8002132:	f24d 502c 	movw	r0, #54572	@ 0xd52c
 8002136:	f7fe ff4b 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 800213a:	2003      	movs	r0, #3
 800213c:	f7fe ff58 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd52d);
 8002140:	f24d 502d 	movw	r0, #54573	@ 0xd52d
 8002144:	f7fe ff44 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x9f);
 8002148:	209f      	movs	r0, #159	@ 0x9f
 800214a:	f7fe ff51 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd52e);
 800214e:	f24d 502e 	movw	r0, #54574	@ 0xd52e
 8002152:	f7fe ff3d 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8002156:	2003      	movs	r0, #3
 8002158:	f7fe ff4a 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd52f);
 800215c:	f24d 502f 	movw	r0, #54575	@ 0xd52f
 8002160:	f7fe ff36 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xb3);
 8002164:	20b3      	movs	r0, #179	@ 0xb3
 8002166:	f7fe ff43 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd530);
 800216a:	f24d 5030 	movw	r0, #54576	@ 0xd530
 800216e:	f7fe ff2f 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8002172:	2003      	movs	r0, #3
 8002174:	f7fe ff3c 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd531);
 8002178:	f24d 5031 	movw	r0, #54577	@ 0xd531
 800217c:	f7fe ff28 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xb9);
 8002180:	20b9      	movs	r0, #185	@ 0xb9
 8002182:	f7fe ff35 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd532);
 8002186:	f24d 5032 	movw	r0, #54578	@ 0xd532
 800218a:	f7fe ff21 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 800218e:	2003      	movs	r0, #3
 8002190:	f7fe ff2e 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd533);
 8002194:	f24d 5033 	movw	r0, #54579	@ 0xd533
 8002198:	f7fe ff1a 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xc1);
 800219c:	20c1      	movs	r0, #193	@ 0xc1
 800219e:	f7fe ff27 	bl	8000ff0 <lcd_wr_data>
    //#b-///////////////////////////////
    lcd_wr_reg(0xd600);
 80021a2:	f44f 4056 	mov.w	r0, #54784	@ 0xd600
 80021a6:	f7fe ff13 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 80021aa:	2000      	movs	r0, #0
 80021ac:	f7fe ff20 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd601);
 80021b0:	f24d 6001 	movw	r0, #54785	@ 0xd601
 80021b4:	f7fe ff0c 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x37);
 80021b8:	2037      	movs	r0, #55	@ 0x37
 80021ba:	f7fe ff19 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd602);
 80021be:	f24d 6002 	movw	r0, #54786	@ 0xd602
 80021c2:	f7fe ff05 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 80021c6:	2000      	movs	r0, #0
 80021c8:	f7fe ff12 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd603);
 80021cc:	f24d 6003 	movw	r0, #54787	@ 0xd603
 80021d0:	f7fe fefe 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x52);
 80021d4:	2052      	movs	r0, #82	@ 0x52
 80021d6:	f7fe ff0b 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd604);
 80021da:	f24d 6004 	movw	r0, #54788	@ 0xd604
 80021de:	f7fe fef7 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 80021e2:	2000      	movs	r0, #0
 80021e4:	f7fe ff04 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd605);
 80021e8:	f24d 6005 	movw	r0, #54789	@ 0xd605
 80021ec:	f7fe fef0 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x7b);
 80021f0:	207b      	movs	r0, #123	@ 0x7b
 80021f2:	f7fe fefd 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd606);
 80021f6:	f24d 6006 	movw	r0, #54790	@ 0xd606
 80021fa:	f7fe fee9 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 80021fe:	2000      	movs	r0, #0
 8002200:	f7fe fef6 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd607);
 8002204:	f24d 6007 	movw	r0, #54791	@ 0xd607
 8002208:	f7fe fee2 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x99);
 800220c:	2099      	movs	r0, #153	@ 0x99
 800220e:	f7fe feef 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd608);
 8002212:	f24d 6008 	movw	r0, #54792	@ 0xd608
 8002216:	f7fe fedb 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 800221a:	2000      	movs	r0, #0
 800221c:	f7fe fee8 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd609);
 8002220:	f24d 6009 	movw	r0, #54793	@ 0xd609
 8002224:	f7fe fed4 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xb1);
 8002228:	20b1      	movs	r0, #177	@ 0xb1
 800222a:	f7fe fee1 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd60a);
 800222e:	f24d 600a 	movw	r0, #54794	@ 0xd60a
 8002232:	f7fe fecd 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8002236:	2000      	movs	r0, #0
 8002238:	f7fe feda 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd60b);
 800223c:	f24d 600b 	movw	r0, #54795	@ 0xd60b
 8002240:	f7fe fec6 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xd2);
 8002244:	20d2      	movs	r0, #210	@ 0xd2
 8002246:	f7fe fed3 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd60c);
 800224a:	f24d 600c 	movw	r0, #54796	@ 0xd60c
 800224e:	f7fe febf 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8002252:	2000      	movs	r0, #0
 8002254:	f7fe fecc 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd60d);
 8002258:	f24d 600d 	movw	r0, #54797	@ 0xd60d
 800225c:	f7fe feb8 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xf6);
 8002260:	20f6      	movs	r0, #246	@ 0xf6
 8002262:	f7fe fec5 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd60e);
 8002266:	f24d 600e 	movw	r0, #54798	@ 0xd60e
 800226a:	f7fe feb1 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x01);
 800226e:	2001      	movs	r0, #1
 8002270:	f7fe febe 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd60f);
 8002274:	f24d 600f 	movw	r0, #54799	@ 0xd60f
 8002278:	f7fe feaa 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x27);
 800227c:	2027      	movs	r0, #39	@ 0x27
 800227e:	f7fe feb7 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd610);
 8002282:	f24d 6010 	movw	r0, #54800	@ 0xd610
 8002286:	f7fe fea3 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x01);
 800228a:	2001      	movs	r0, #1
 800228c:	f7fe feb0 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd611);
 8002290:	f24d 6011 	movw	r0, #54801	@ 0xd611
 8002294:	f7fe fe9c 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x4e);
 8002298:	204e      	movs	r0, #78	@ 0x4e
 800229a:	f7fe fea9 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd612);
 800229e:	f24d 6012 	movw	r0, #54802	@ 0xd612
 80022a2:	f7fe fe95 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x01);
 80022a6:	2001      	movs	r0, #1
 80022a8:	f7fe fea2 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd613);
 80022ac:	f24d 6013 	movw	r0, #54803	@ 0xd613
 80022b0:	f7fe fe8e 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x8c);
 80022b4:	208c      	movs	r0, #140	@ 0x8c
 80022b6:	f7fe fe9b 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd614);
 80022ba:	f24d 6014 	movw	r0, #54804	@ 0xd614
 80022be:	f7fe fe87 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x01);
 80022c2:	2001      	movs	r0, #1
 80022c4:	f7fe fe94 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd615);
 80022c8:	f24d 6015 	movw	r0, #54805	@ 0xd615
 80022cc:	f7fe fe80 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xbe);
 80022d0:	20be      	movs	r0, #190	@ 0xbe
 80022d2:	f7fe fe8d 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd616);
 80022d6:	f24d 6016 	movw	r0, #54806	@ 0xd616
 80022da:	f7fe fe79 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x02);
 80022de:	2002      	movs	r0, #2
 80022e0:	f7fe fe86 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd617);
 80022e4:	f24d 6017 	movw	r0, #54807	@ 0xd617
 80022e8:	f7fe fe72 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x0b);
 80022ec:	200b      	movs	r0, #11
 80022ee:	f7fe fe7f 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd618);
 80022f2:	f24d 6018 	movw	r0, #54808	@ 0xd618
 80022f6:	f7fe fe6b 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x02);
 80022fa:	2002      	movs	r0, #2
 80022fc:	f7fe fe78 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd619);
 8002300:	f24d 6019 	movw	r0, #54809	@ 0xd619
 8002304:	f7fe fe64 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x48);
 8002308:	2048      	movs	r0, #72	@ 0x48
 800230a:	f7fe fe71 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd61a);
 800230e:	f24d 601a 	movw	r0, #54810	@ 0xd61a
 8002312:	f7fe fe5d 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8002316:	2002      	movs	r0, #2
 8002318:	f7fe fe6a 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd61b);
 800231c:	f24d 601b 	movw	r0, #54811	@ 0xd61b
 8002320:	f7fe fe56 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x4a);
 8002324:	204a      	movs	r0, #74	@ 0x4a
 8002326:	f7fe fe63 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd61c);
 800232a:	f24d 601c 	movw	r0, #54812	@ 0xd61c
 800232e:	f7fe fe4f 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8002332:	2002      	movs	r0, #2
 8002334:	f7fe fe5c 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd61d);
 8002338:	f24d 601d 	movw	r0, #54813	@ 0xd61d
 800233c:	f7fe fe48 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x7e);
 8002340:	207e      	movs	r0, #126	@ 0x7e
 8002342:	f7fe fe55 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd61e);
 8002346:	f24d 601e 	movw	r0, #54814	@ 0xd61e
 800234a:	f7fe fe41 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x02);
 800234e:	2002      	movs	r0, #2
 8002350:	f7fe fe4e 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd61f);
 8002354:	f24d 601f 	movw	r0, #54815	@ 0xd61f
 8002358:	f7fe fe3a 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xbc);
 800235c:	20bc      	movs	r0, #188	@ 0xbc
 800235e:	f7fe fe47 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd620);
 8002362:	f24d 6020 	movw	r0, #54816	@ 0xd620
 8002366:	f7fe fe33 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x02);
 800236a:	2002      	movs	r0, #2
 800236c:	f7fe fe40 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd621);
 8002370:	f24d 6021 	movw	r0, #54817	@ 0xd621
 8002374:	f7fe fe2c 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xe1);
 8002378:	20e1      	movs	r0, #225	@ 0xe1
 800237a:	f7fe fe39 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd622);
 800237e:	f24d 6022 	movw	r0, #54818	@ 0xd622
 8002382:	f7fe fe25 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8002386:	2003      	movs	r0, #3
 8002388:	f7fe fe32 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd623);
 800238c:	f24d 6023 	movw	r0, #54819	@ 0xd623
 8002390:	f7fe fe1e 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x10);
 8002394:	2010      	movs	r0, #16
 8002396:	f7fe fe2b 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd624);
 800239a:	f24d 6024 	movw	r0, #54820	@ 0xd624
 800239e:	f7fe fe17 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 80023a2:	2003      	movs	r0, #3
 80023a4:	f7fe fe24 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd625);
 80023a8:	f24d 6025 	movw	r0, #54821	@ 0xd625
 80023ac:	f7fe fe10 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x31);
 80023b0:	2031      	movs	r0, #49	@ 0x31
 80023b2:	f7fe fe1d 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd626);
 80023b6:	f24d 6026 	movw	r0, #54822	@ 0xd626
 80023ba:	f7fe fe09 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 80023be:	2003      	movs	r0, #3
 80023c0:	f7fe fe16 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd627);
 80023c4:	f24d 6027 	movw	r0, #54823	@ 0xd627
 80023c8:	f7fe fe02 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x5a);
 80023cc:	205a      	movs	r0, #90	@ 0x5a
 80023ce:	f7fe fe0f 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd628);
 80023d2:	f24d 6028 	movw	r0, #54824	@ 0xd628
 80023d6:	f7fe fdfb 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 80023da:	2003      	movs	r0, #3
 80023dc:	f7fe fe08 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd629);
 80023e0:	f24d 6029 	movw	r0, #54825	@ 0xd629
 80023e4:	f7fe fdf4 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x73);
 80023e8:	2073      	movs	r0, #115	@ 0x73
 80023ea:	f7fe fe01 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd62a);
 80023ee:	f24d 602a 	movw	r0, #54826	@ 0xd62a
 80023f2:	f7fe fded 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 80023f6:	2003      	movs	r0, #3
 80023f8:	f7fe fdfa 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd62b);
 80023fc:	f24d 602b 	movw	r0, #54827	@ 0xd62b
 8002400:	f7fe fde6 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x94);
 8002404:	2094      	movs	r0, #148	@ 0x94
 8002406:	f7fe fdf3 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd62c);
 800240a:	f24d 602c 	movw	r0, #54828	@ 0xd62c
 800240e:	f7fe fddf 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8002412:	2003      	movs	r0, #3
 8002414:	f7fe fdec 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd62d);
 8002418:	f24d 602d 	movw	r0, #54829	@ 0xd62d
 800241c:	f7fe fdd8 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x9f);
 8002420:	209f      	movs	r0, #159	@ 0x9f
 8002422:	f7fe fde5 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd62e);
 8002426:	f24d 602e 	movw	r0, #54830	@ 0xd62e
 800242a:	f7fe fdd1 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 800242e:	2003      	movs	r0, #3
 8002430:	f7fe fdde 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd62f);
 8002434:	f24d 602f 	movw	r0, #54831	@ 0xd62f
 8002438:	f7fe fdca 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xb3);
 800243c:	20b3      	movs	r0, #179	@ 0xb3
 800243e:	f7fe fdd7 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd630);
 8002442:	f24d 6030 	movw	r0, #54832	@ 0xd630
 8002446:	f7fe fdc3 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 800244a:	2003      	movs	r0, #3
 800244c:	f7fe fdd0 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd631);
 8002450:	f24d 6031 	movw	r0, #54833	@ 0xd631
 8002454:	f7fe fdbc 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xb9);
 8002458:	20b9      	movs	r0, #185	@ 0xb9
 800245a:	f7fe fdc9 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd632);
 800245e:	f24d 6032 	movw	r0, #54834	@ 0xd632
 8002462:	f7fe fdb5 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 8002466:	2003      	movs	r0, #3
 8002468:	f7fe fdc2 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xd633);
 800246c:	f24d 6033 	movw	r0, #54835	@ 0xd633
 8002470:	f7fe fdae 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xc1);
 8002474:	20c1      	movs	r0, #193	@ 0xc1
 8002476:	f7fe fdbb 	bl	8000ff0 <lcd_wr_data>



    //#enable page0
    lcd_wr_reg(0xf000);
 800247a:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 800247e:	f7fe fda7 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x55);
 8002482:	2055      	movs	r0, #85	@ 0x55
 8002484:	f7fe fdb4 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xf001);
 8002488:	f24f 0001 	movw	r0, #61441	@ 0xf001
 800248c:	f7fe fda0 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xaa);
 8002490:	20aa      	movs	r0, #170	@ 0xaa
 8002492:	f7fe fdad 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xf002);
 8002496:	f24f 0002 	movw	r0, #61442	@ 0xf002
 800249a:	f7fe fd99 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x52);
 800249e:	2052      	movs	r0, #82	@ 0x52
 80024a0:	f7fe fda6 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xf003);
 80024a4:	f24f 0003 	movw	r0, #61443	@ 0xf003
 80024a8:	f7fe fd92 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x08);
 80024ac:	2008      	movs	r0, #8
 80024ae:	f7fe fd9f 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xf004);
 80024b2:	f24f 0004 	movw	r0, #61444	@ 0xf004
 80024b6:	f7fe fd8b 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 80024ba:	2000      	movs	r0, #0
 80024bc:	f7fe fd98 	bl	8000ff0 <lcd_wr_data>
    //# rgb i/f setting
    lcd_wr_reg(0xb000);
 80024c0:	f44f 4030 	mov.w	r0, #45056	@ 0xb000
 80024c4:	f7fe fd84 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x08);
 80024c8:	2008      	movs	r0, #8
 80024ca:	f7fe fd91 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xb001);
 80024ce:	f24b 0001 	movw	r0, #45057	@ 0xb001
 80024d2:	f7fe fd7d 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x05);
 80024d6:	2005      	movs	r0, #5
 80024d8:	f7fe fd8a 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xb002);
 80024dc:	f24b 0002 	movw	r0, #45058	@ 0xb002
 80024e0:	f7fe fd76 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x02);
 80024e4:	2002      	movs	r0, #2
 80024e6:	f7fe fd83 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xb003);
 80024ea:	f24b 0003 	movw	r0, #45059	@ 0xb003
 80024ee:	f7fe fd6f 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x05);
 80024f2:	2005      	movs	r0, #5
 80024f4:	f7fe fd7c 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xb004);
 80024f8:	f24b 0004 	movw	r0, #45060	@ 0xb004
 80024fc:	f7fe fd68 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x02);
 8002500:	2002      	movs	r0, #2
 8002502:	f7fe fd75 	bl	8000ff0 <lcd_wr_data>
    //## sdt:
    lcd_wr_reg(0xb600);
 8002506:	f44f 4036 	mov.w	r0, #46592	@ 0xb600
 800250a:	f7fe fd61 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x08);
 800250e:	2008      	movs	r0, #8
 8002510:	f7fe fd6e 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xb500);
 8002514:	f44f 4035 	mov.w	r0, #46336	@ 0xb500
 8002518:	f7fe fd5a 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x50);//0x6b ???? 480x854       0x50 ???? 480x800
 800251c:	2050      	movs	r0, #80	@ 0x50
 800251e:	f7fe fd67 	bl	8000ff0 <lcd_wr_data>

    //## gate eq:
    lcd_wr_reg(0xb700);
 8002522:	f44f 4037 	mov.w	r0, #46848	@ 0xb700
 8002526:	f7fe fd53 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 800252a:	2000      	movs	r0, #0
 800252c:	f7fe fd60 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xb701);
 8002530:	f24b 7001 	movw	r0, #46849	@ 0xb701
 8002534:	f7fe fd4c 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 8002538:	2000      	movs	r0, #0
 800253a:	f7fe fd59 	bl	8000ff0 <lcd_wr_data>

    //## source eq:
    lcd_wr_reg(0xb800);
 800253e:	f44f 4038 	mov.w	r0, #47104	@ 0xb800
 8002542:	f7fe fd45 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x01);
 8002546:	2001      	movs	r0, #1
 8002548:	f7fe fd52 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xb801);
 800254c:	f64b 0001 	movw	r0, #47105	@ 0xb801
 8002550:	f7fe fd3e 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x05);
 8002554:	2005      	movs	r0, #5
 8002556:	f7fe fd4b 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xb802);
 800255a:	f64b 0002 	movw	r0, #47106	@ 0xb802
 800255e:	f7fe fd37 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x05);
 8002562:	2005      	movs	r0, #5
 8002564:	f7fe fd44 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xb803);
 8002568:	f64b 0003 	movw	r0, #47107	@ 0xb803
 800256c:	f7fe fd30 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x05);
 8002570:	2005      	movs	r0, #5
 8002572:	f7fe fd3d 	bl	8000ff0 <lcd_wr_data>

    //# inversion: column inversion (nvt)
    lcd_wr_reg(0xbc00);
 8002576:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
 800257a:	f7fe fd29 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 800257e:	2000      	movs	r0, #0
 8002580:	f7fe fd36 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xbc01);
 8002584:	f64b 4001 	movw	r0, #48129	@ 0xbc01
 8002588:	f7fe fd22 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 800258c:	2000      	movs	r0, #0
 800258e:	f7fe fd2f 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xbc02);
 8002592:	f64b 4002 	movw	r0, #48130	@ 0xbc02
 8002596:	f7fe fd1b 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 800259a:	2000      	movs	r0, #0
 800259c:	f7fe fd28 	bl	8000ff0 <lcd_wr_data>

    //# boe's setting(default)
    lcd_wr_reg(0xcc00);
 80025a0:	f44f 404c 	mov.w	r0, #52224	@ 0xcc00
 80025a4:	f7fe fd14 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x03);
 80025a8:	2003      	movs	r0, #3
 80025aa:	f7fe fd21 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xcc01);
 80025ae:	f64c 4001 	movw	r0, #52225	@ 0xcc01
 80025b2:	f7fe fd0d 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 80025b6:	2000      	movs	r0, #0
 80025b8:	f7fe fd1a 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xcc02);
 80025bc:	f64c 4002 	movw	r0, #52226	@ 0xcc02
 80025c0:	f7fe fd06 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 80025c4:	2000      	movs	r0, #0
 80025c6:	f7fe fd13 	bl	8000ff0 <lcd_wr_data>

    //# display timing:
    lcd_wr_reg(0xbd00);
 80025ca:	f44f 403d 	mov.w	r0, #48384	@ 0xbd00
 80025ce:	f7fe fcff 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x01);
 80025d2:	2001      	movs	r0, #1
 80025d4:	f7fe fd0c 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xbd01);
 80025d8:	f64b 5001 	movw	r0, #48385	@ 0xbd01
 80025dc:	f7fe fcf8 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x84);
 80025e0:	2084      	movs	r0, #132	@ 0x84
 80025e2:	f7fe fd05 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xbd02);
 80025e6:	f64b 5002 	movw	r0, #48386	@ 0xbd02
 80025ea:	f7fe fcf1 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x07);
 80025ee:	2007      	movs	r0, #7
 80025f0:	f7fe fcfe 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xbd03);
 80025f4:	f64b 5003 	movw	r0, #48387	@ 0xbd03
 80025f8:	f7fe fcea 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x31);
 80025fc:	2031      	movs	r0, #49	@ 0x31
 80025fe:	f7fe fcf7 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xbd04);
 8002602:	f64b 5004 	movw	r0, #48388	@ 0xbd04
 8002606:	f7fe fce3 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 800260a:	2000      	movs	r0, #0
 800260c:	f7fe fcf0 	bl	8000ff0 <lcd_wr_data>

    lcd_wr_reg(0xba00);
 8002610:	f44f 403a 	mov.w	r0, #47616	@ 0xba00
 8002614:	f7fe fcdc 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x01);
 8002618:	2001      	movs	r0, #1
 800261a:	f7fe fce9 	bl	8000ff0 <lcd_wr_data>

    lcd_wr_reg(0xff00);
 800261e:	f44f 407f 	mov.w	r0, #65280	@ 0xff00
 8002622:	f7fe fcd5 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0xaa);
 8002626:	20aa      	movs	r0, #170	@ 0xaa
 8002628:	f7fe fce2 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xff01);
 800262c:	f64f 7001 	movw	r0, #65281	@ 0xff01
 8002630:	f7fe fcce 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x55);
 8002634:	2055      	movs	r0, #85	@ 0x55
 8002636:	f7fe fcdb 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xff02);
 800263a:	f64f 7002 	movw	r0, #65282	@ 0xff02
 800263e:	f7fe fcc7 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x25);
 8002642:	2025      	movs	r0, #37	@ 0x25
 8002644:	f7fe fcd4 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0xff03);
 8002648:	f64f 7003 	movw	r0, #65283	@ 0xff03
 800264c:	f7fe fcc0 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x01);
 8002650:	2001      	movs	r0, #1
 8002652:	f7fe fccd 	bl	8000ff0 <lcd_wr_data>

    lcd_wr_reg(0x3500);
 8002656:	f44f 5054 	mov.w	r0, #13568	@ 0x3500
 800265a:	f7fe fcb9 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 800265e:	2000      	movs	r0, #0
 8002660:	f7fe fcc6 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0x3600);
 8002664:	f44f 5058 	mov.w	r0, #13824	@ 0x3600
 8002668:	f7fe fcb2 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x00);
 800266c:	2000      	movs	r0, #0
 800266e:	f7fe fcbf 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0x3a00);
 8002672:	f44f 5068 	mov.w	r0, #14848	@ 0x3a00
 8002676:	f7fe fcab 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(0x55); 
 800267a:	2055      	movs	r0, #85	@ 0x55
 800267c:	f7fe fcb8 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(0x1100);
 8002680:	f44f 5088 	mov.w	r0, #4352	@ 0x1100
 8002684:	f7fe fca4 	bl	8000fd0 <lcd_wr_reg>
    HAL_Delay(120);
 8002688:	2078      	movs	r0, #120	@ 0x78
 800268a:	f000 fc8d 	bl	8002fa8 <HAL_Delay>
    lcd_wr_reg(0x2900 );
 800268e:	f44f 5024 	mov.w	r0, #10496	@ 0x2900
 8002692:	f7fe fc9d 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_reg(0x2c00);
 8002696:	f44f 5030 	mov.w	r0, #11264	@ 0x2c00
 800269a:	f7fe fc99 	bl	8000fd0 <lcd_wr_reg>
//	
//	lcd_wr_reg(0x1100);
//	HAL_Delay(120);
//	lcd_wr_reg(0x2900);

	lcd_direction(USE_HORIZONTAL);//����lcd��ʾ����
 800269e:	2000      	movs	r0, #0
 80026a0:	f000 f890 	bl	80027c4 <lcd_direction>

}
 80026a4:	bf00      	nop
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <lcd_setwindows>:
								xend:the endning x coordinate of the lcd display window
								yend:the endning y coordinate of the lcd display window
 * @retvalue   :none
******************************************************************************/
void lcd_setwindows(uint16_t xstar, uint16_t ystar,uint16_t xend,uint16_t yend)
{
 80026a8:	b590      	push	{r4, r7, lr}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4604      	mov	r4, r0
 80026b0:	4608      	mov	r0, r1
 80026b2:	4611      	mov	r1, r2
 80026b4:	461a      	mov	r2, r3
 80026b6:	4623      	mov	r3, r4
 80026b8:	80fb      	strh	r3, [r7, #6]
 80026ba:	4603      	mov	r3, r0
 80026bc:	80bb      	strh	r3, [r7, #4]
 80026be:	460b      	mov	r3, r1
 80026c0:	807b      	strh	r3, [r7, #2]
 80026c2:	4613      	mov	r3, r2
 80026c4:	803b      	strh	r3, [r7, #0]
    lcd_wr_reg(lcddev.setxcmd);
 80026c6:	4b35      	ldr	r3, [pc, #212]	@ (800279c <lcd_setwindows+0xf4>)
 80026c8:	899b      	ldrh	r3, [r3, #12]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fe fc80 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(xstar>>8);
 80026d0:	88fb      	ldrh	r3, [r7, #6]
 80026d2:	0a1b      	lsrs	r3, r3, #8
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe fc8a 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(lcddev.setxcmd+1);
 80026dc:	4b2f      	ldr	r3, [pc, #188]	@ (800279c <lcd_setwindows+0xf4>)
 80026de:	899b      	ldrh	r3, [r3, #12]
 80026e0:	3301      	adds	r3, #1
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fe fc73 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(xstar&0xff);
 80026ea:	88fb      	ldrh	r3, [r7, #6]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7fe fc7d 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(lcddev.setxcmd+2);
 80026f6:	4b29      	ldr	r3, [pc, #164]	@ (800279c <lcd_setwindows+0xf4>)
 80026f8:	899b      	ldrh	r3, [r3, #12]
 80026fa:	3302      	adds	r3, #2
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fe fc66 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(xend>>8);
 8002704:	887b      	ldrh	r3, [r7, #2]
 8002706:	0a1b      	lsrs	r3, r3, #8
 8002708:	b29b      	uxth	r3, r3
 800270a:	4618      	mov	r0, r3
 800270c:	f7fe fc70 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(lcddev.setxcmd+3);
 8002710:	4b22      	ldr	r3, [pc, #136]	@ (800279c <lcd_setwindows+0xf4>)
 8002712:	899b      	ldrh	r3, [r3, #12]
 8002714:	3303      	adds	r3, #3
 8002716:	b29b      	uxth	r3, r3
 8002718:	4618      	mov	r0, r3
 800271a:	f7fe fc59 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(xend&0xff);
 800271e:	887b      	ldrh	r3, [r7, #2]
 8002720:	b2db      	uxtb	r3, r3
 8002722:	b29b      	uxth	r3, r3
 8002724:	4618      	mov	r0, r3
 8002726:	f7fe fc63 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(lcddev.setycmd);
 800272a:	4b1c      	ldr	r3, [pc, #112]	@ (800279c <lcd_setwindows+0xf4>)
 800272c:	89db      	ldrh	r3, [r3, #14]
 800272e:	4618      	mov	r0, r3
 8002730:	f7fe fc4e 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(ystar>>8);
 8002734:	88bb      	ldrh	r3, [r7, #4]
 8002736:	0a1b      	lsrs	r3, r3, #8
 8002738:	b29b      	uxth	r3, r3
 800273a:	4618      	mov	r0, r3
 800273c:	f7fe fc58 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(lcddev.setycmd+1);
 8002740:	4b16      	ldr	r3, [pc, #88]	@ (800279c <lcd_setwindows+0xf4>)
 8002742:	89db      	ldrh	r3, [r3, #14]
 8002744:	3301      	adds	r3, #1
 8002746:	b29b      	uxth	r3, r3
 8002748:	4618      	mov	r0, r3
 800274a:	f7fe fc41 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(ystar&0xff);
 800274e:	88bb      	ldrh	r3, [r7, #4]
 8002750:	b2db      	uxtb	r3, r3
 8002752:	b29b      	uxth	r3, r3
 8002754:	4618      	mov	r0, r3
 8002756:	f7fe fc4b 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(lcddev.setycmd+2);
 800275a:	4b10      	ldr	r3, [pc, #64]	@ (800279c <lcd_setwindows+0xf4>)
 800275c:	89db      	ldrh	r3, [r3, #14]
 800275e:	3302      	adds	r3, #2
 8002760:	b29b      	uxth	r3, r3
 8002762:	4618      	mov	r0, r3
 8002764:	f7fe fc34 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(yend>>8);
 8002768:	883b      	ldrh	r3, [r7, #0]
 800276a:	0a1b      	lsrs	r3, r3, #8
 800276c:	b29b      	uxth	r3, r3
 800276e:	4618      	mov	r0, r3
 8002770:	f7fe fc3e 	bl	8000ff0 <lcd_wr_data>
    lcd_wr_reg(lcddev.setycmd+3);
 8002774:	4b09      	ldr	r3, [pc, #36]	@ (800279c <lcd_setwindows+0xf4>)
 8002776:	89db      	ldrh	r3, [r3, #14]
 8002778:	3303      	adds	r3, #3
 800277a:	b29b      	uxth	r3, r3
 800277c:	4618      	mov	r0, r3
 800277e:	f7fe fc27 	bl	8000fd0 <lcd_wr_reg>
    lcd_wr_data(yend&0xff);
 8002782:	883b      	ldrh	r3, [r7, #0]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	b29b      	uxth	r3, r3
 8002788:	4618      	mov	r0, r3
 800278a:	f7fe fc31 	bl	8000ff0 <lcd_wr_data>

    lcd_writeram_prepare();	//��ʼд��gram
 800278e:	f7fe fc7d 	bl	800108c <lcd_writeram_prepare>
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	bd90      	pop	{r4, r7, pc}
 800279a:	bf00      	nop
 800279c:	20000080 	.word	0x20000080

080027a0 <lcd_setcursor>:
 * @parameters :xpos:the  x coordinate of the pixel
								ypos:the  y coordinate of the pixel
 * @retvalue   :none
******************************************************************************/
void lcd_setcursor(uint16_t xpos, uint16_t ypos)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	460a      	mov	r2, r1
 80027aa:	80fb      	strh	r3, [r7, #6]
 80027ac:	4613      	mov	r3, r2
 80027ae:	80bb      	strh	r3, [r7, #4]
    lcd_setwindows(xpos,ypos,xpos,ypos);
 80027b0:	88bb      	ldrh	r3, [r7, #4]
 80027b2:	88fa      	ldrh	r2, [r7, #6]
 80027b4:	88b9      	ldrh	r1, [r7, #4]
 80027b6:	88f8      	ldrh	r0, [r7, #6]
 80027b8:	f7ff ff76 	bl	80026a8 <lcd_setwindows>
}
 80027bc:	bf00      	nop
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <lcd_direction>:
													2-180 degree
													3-270 degree
 * @retvalue   :none
******************************************************************************/
void lcd_direction(uint8_t direction)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
    lcddev.setxcmd=0x2a00;
 80027ce:	4b2e      	ldr	r3, [pc, #184]	@ (8002888 <lcd_direction+0xc4>)
 80027d0:	f44f 5228 	mov.w	r2, #10752	@ 0x2a00
 80027d4:	819a      	strh	r2, [r3, #12]
    lcddev.setycmd=0x2b00;
 80027d6:	4b2c      	ldr	r3, [pc, #176]	@ (8002888 <lcd_direction+0xc4>)
 80027d8:	f44f 522c 	mov.w	r2, #11008	@ 0x2b00
 80027dc:	81da      	strh	r2, [r3, #14]
    lcddev.wramcmd=0x2c00;
 80027de:	4b2a      	ldr	r3, [pc, #168]	@ (8002888 <lcd_direction+0xc4>)
 80027e0:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 80027e4:	811a      	strh	r2, [r3, #8]
    lcddev.rramcmd=0x2e00;
 80027e6:	4b28      	ldr	r3, [pc, #160]	@ (8002888 <lcd_direction+0xc4>)
 80027e8:	f44f 5238 	mov.w	r2, #11776	@ 0x2e00
 80027ec:	815a      	strh	r2, [r3, #10]
    switch(direction) {
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d843      	bhi.n	800287c <lcd_direction+0xb8>
 80027f4:	a201      	add	r2, pc, #4	@ (adr r2, 80027fc <lcd_direction+0x38>)
 80027f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fa:	bf00      	nop
 80027fc:	0800280d 	.word	0x0800280d
 8002800:	08002829 	.word	0x08002829
 8002804:	08002845 	.word	0x08002845
 8002808:	08002861 	.word	0x08002861
    case 0:
        lcddev.width=LCD_W;
 800280c:	4b1e      	ldr	r3, [pc, #120]	@ (8002888 <lcd_direction+0xc4>)
 800280e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002812:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_H;
 8002814:	4b1c      	ldr	r3, [pc, #112]	@ (8002888 <lcd_direction+0xc4>)
 8002816:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800281a:	805a      	strh	r2, [r3, #2]
        lcd_writereg(0x3600,0x00);
 800281c:	2100      	movs	r1, #0
 800281e:	f44f 5058 	mov.w	r0, #13824	@ 0x3600
 8002822:	f7fe fbfd 	bl	8001020 <lcd_writereg>
        break;
 8002826:	e02a      	b.n	800287e <lcd_direction+0xba>
    case 1:
        lcddev.width=LCD_H;
 8002828:	4b17      	ldr	r3, [pc, #92]	@ (8002888 <lcd_direction+0xc4>)
 800282a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800282e:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_W;
 8002830:	4b15      	ldr	r3, [pc, #84]	@ (8002888 <lcd_direction+0xc4>)
 8002832:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002836:	805a      	strh	r2, [r3, #2]
        lcd_writereg(0x3600,(1<<5)|(1<<6));
 8002838:	2160      	movs	r1, #96	@ 0x60
 800283a:	f44f 5058 	mov.w	r0, #13824	@ 0x3600
 800283e:	f7fe fbef 	bl	8001020 <lcd_writereg>
        break;
 8002842:	e01c      	b.n	800287e <lcd_direction+0xba>
    case 2:
        lcddev.width=LCD_W;
 8002844:	4b10      	ldr	r3, [pc, #64]	@ (8002888 <lcd_direction+0xc4>)
 8002846:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800284a:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_H;
 800284c:	4b0e      	ldr	r3, [pc, #56]	@ (8002888 <lcd_direction+0xc4>)
 800284e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002852:	805a      	strh	r2, [r3, #2]
        lcd_writereg(0x3600,(1<<7)|(1<<6));
 8002854:	21c0      	movs	r1, #192	@ 0xc0
 8002856:	f44f 5058 	mov.w	r0, #13824	@ 0x3600
 800285a:	f7fe fbe1 	bl	8001020 <lcd_writereg>
        break;
 800285e:	e00e      	b.n	800287e <lcd_direction+0xba>
    case 3:
        lcddev.width=LCD_H;
 8002860:	4b09      	ldr	r3, [pc, #36]	@ (8002888 <lcd_direction+0xc4>)
 8002862:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002866:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_W;
 8002868:	4b07      	ldr	r3, [pc, #28]	@ (8002888 <lcd_direction+0xc4>)
 800286a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800286e:	805a      	strh	r2, [r3, #2]
        lcd_writereg(0x3600,(1<<7)|(1<<5));
 8002870:	21a0      	movs	r1, #160	@ 0xa0
 8002872:	f44f 5058 	mov.w	r0, #13824	@ 0x3600
 8002876:	f7fe fbd3 	bl	8001020 <lcd_writereg>
        break;
 800287a:	e000      	b.n	800287e <lcd_direction+0xba>
    default:
        break;
 800287c:	bf00      	nop
    }
}
 800287e:	bf00      	nop
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20000080 	.word	0x20000080

0800288c <lcd_read_id>:
 * @function   :read id
 * @parameters :none
 * @retvalue   :id value
******************************************************************************/
uint16_t lcd_read_id(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
    uint16_t val;
    lcd_readreg(0xda00,&val,1);//����0x40
 8002892:	1dbb      	adds	r3, r7, #6
 8002894:	2201      	movs	r2, #1
 8002896:	4619      	mov	r1, r3
 8002898:	f44f 405a 	mov.w	r0, #55808	@ 0xda00
 800289c:	f7fe fbd6 	bl	800104c <lcd_readreg>
//		printf("id is %x",val);


    return lcddev.id;
 80028a0:	4b02      	ldr	r3, [pc, #8]	@ (80028ac <lcd_read_id+0x20>)
 80028a2:	889b      	ldrh	r3, [r3, #4]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	20000080 	.word	0x20000080

080028b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028b4:	f000 fb06 	bl	8002ec4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028b8:	f000 f81a 	bl	80028f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028bc:	f7fe fac2 	bl	8000e44 <MX_GPIO_Init>
  MX_FSMC_Init();
 80028c0:	f7fe f9f0 	bl	8000ca4 <MX_FSMC_Init>
  MX_TIM6_Init();
 80028c4:	f000 fa7c 	bl	8002dc0 <MX_TIM6_Init>

 // HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);


	//HAL_GPIO_WritePin(GPIOB,BL_Pin,GPIO_PIN_SET);
  lcd_init();
 80028c8:	f7fe fc2c 	bl	8001124 <lcd_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lcd_clear(WHITE);
 80028cc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80028d0:	f7fe fbf8 	bl	80010c4 <lcd_clear>
	  		HAL_GPIO_WritePin(GPIOB,BL_Pin,GPIO_PIN_SET);
 80028d4:	2201      	movs	r2, #1
 80028d6:	2101      	movs	r1, #1
 80028d8:	4804      	ldr	r0, [pc, #16]	@ (80028ec <main+0x3c>)
 80028da:	f000 fe0b 	bl	80034f4 <HAL_GPIO_WritePin>
//	  		main_test();
//	  		test_read();
//	  		test_color();
//	  		test_fillrec();
//	  		test_circle();
	  		lcd_direction(1);
 80028de:	2001      	movs	r0, #1
 80028e0:	f7ff ff70 	bl	80027c4 <lcd_direction>
	  		simulate_speed_change();
 80028e4:	f000 fa0a 	bl	8002cfc <simulate_speed_change>
	  lcd_clear(WHITE);
 80028e8:	bf00      	nop
 80028ea:	e7ef      	b.n	80028cc <main+0x1c>
 80028ec:	40020400 	.word	0x40020400

080028f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b094      	sub	sp, #80	@ 0x50
 80028f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028f6:	f107 0320 	add.w	r3, r7, #32
 80028fa:	2230      	movs	r2, #48	@ 0x30
 80028fc:	2100      	movs	r1, #0
 80028fe:	4618      	mov	r0, r3
 8002900:	f001 fd86 	bl	8004410 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002904:	f107 030c 	add.w	r3, r7, #12
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	605a      	str	r2, [r3, #4]
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	60da      	str	r2, [r3, #12]
 8002912:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002914:	2300      	movs	r3, #0
 8002916:	60bb      	str	r3, [r7, #8]
 8002918:	4b27      	ldr	r3, [pc, #156]	@ (80029b8 <SystemClock_Config+0xc8>)
 800291a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291c:	4a26      	ldr	r2, [pc, #152]	@ (80029b8 <SystemClock_Config+0xc8>)
 800291e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002922:	6413      	str	r3, [r2, #64]	@ 0x40
 8002924:	4b24      	ldr	r3, [pc, #144]	@ (80029b8 <SystemClock_Config+0xc8>)
 8002926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002928:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002930:	2300      	movs	r3, #0
 8002932:	607b      	str	r3, [r7, #4]
 8002934:	4b21      	ldr	r3, [pc, #132]	@ (80029bc <SystemClock_Config+0xcc>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a20      	ldr	r2, [pc, #128]	@ (80029bc <SystemClock_Config+0xcc>)
 800293a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800293e:	6013      	str	r3, [r2, #0]
 8002940:	4b1e      	ldr	r3, [pc, #120]	@ (80029bc <SystemClock_Config+0xcc>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002948:	607b      	str	r3, [r7, #4]
 800294a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800294c:	2301      	movs	r3, #1
 800294e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002950:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002954:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002956:	2302      	movs	r3, #2
 8002958:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800295a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800295e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002960:	2304      	movs	r3, #4
 8002962:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002964:	2348      	movs	r3, #72	@ 0x48
 8002966:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002968:	2302      	movs	r3, #2
 800296a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800296c:	2304      	movs	r3, #4
 800296e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002970:	f107 0320 	add.w	r3, r7, #32
 8002974:	4618      	mov	r0, r3
 8002976:	f000 fdd7 	bl	8003528 <HAL_RCC_OscConfig>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002980:	f000 f81e 	bl	80029c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002984:	230f      	movs	r3, #15
 8002986:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002988:	2302      	movs	r3, #2
 800298a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800298c:	2300      	movs	r3, #0
 800298e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002990:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002994:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002996:	2300      	movs	r3, #0
 8002998:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800299a:	f107 030c 	add.w	r3, r7, #12
 800299e:	2102      	movs	r1, #2
 80029a0:	4618      	mov	r0, r3
 80029a2:	f001 f839 	bl	8003a18 <HAL_RCC_ClockConfig>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80029ac:	f000 f808 	bl	80029c0 <Error_Handler>
  }
}
 80029b0:	bf00      	nop
 80029b2:	3750      	adds	r7, #80	@ 0x50
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40023800 	.word	0x40023800
 80029bc:	40007000 	.word	0x40007000

080029c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029c4:	b672      	cpsid	i
}
 80029c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029c8:	bf00      	nop
 80029ca:	e7fd      	b.n	80029c8 <Error_Handler+0x8>

080029cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	607b      	str	r3, [r7, #4]
 80029d6:	4b10      	ldr	r3, [pc, #64]	@ (8002a18 <HAL_MspInit+0x4c>)
 80029d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029da:	4a0f      	ldr	r2, [pc, #60]	@ (8002a18 <HAL_MspInit+0x4c>)
 80029dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80029e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002a18 <HAL_MspInit+0x4c>)
 80029e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029ea:	607b      	str	r3, [r7, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	603b      	str	r3, [r7, #0]
 80029f2:	4b09      	ldr	r3, [pc, #36]	@ (8002a18 <HAL_MspInit+0x4c>)
 80029f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f6:	4a08      	ldr	r2, [pc, #32]	@ (8002a18 <HAL_MspInit+0x4c>)
 80029f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80029fe:	4b06      	ldr	r3, [pc, #24]	@ (8002a18 <HAL_MspInit+0x4c>)
 8002a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	40023800 	.word	0x40023800

08002a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a20:	bf00      	nop
 8002a22:	e7fd      	b.n	8002a20 <NMI_Handler+0x4>

08002a24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a28:	bf00      	nop
 8002a2a:	e7fd      	b.n	8002a28 <HardFault_Handler+0x4>

08002a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a30:	bf00      	nop
 8002a32:	e7fd      	b.n	8002a30 <MemManage_Handler+0x4>

08002a34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a38:	bf00      	nop
 8002a3a:	e7fd      	b.n	8002a38 <BusFault_Handler+0x4>

08002a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a40:	bf00      	nop
 8002a42:	e7fd      	b.n	8002a40 <UsageFault_Handler+0x4>

08002a44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a48:	bf00      	nop
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a52:	b480      	push	{r7}
 8002a54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a56:	bf00      	nop
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a72:	f000 fa79 	bl	8002f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a80:	4b06      	ldr	r3, [pc, #24]	@ (8002a9c <SystemInit+0x20>)
 8002a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a86:	4a05      	ldr	r2, [pc, #20]	@ (8002a9c <SystemInit+0x20>)
 8002a88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <max>:
// Previous endpoint coordinates to erase the previous pointer position
int prev_end_x, prev_end_y;
float current_speed = 0.0;
float max_speed = 200.0; // Define your maximum speed here

int max(int a, int b) {
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	bfb8      	it	lt
 8002ab2:	4613      	movlt	r3, r2
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <draw_speed_indicator>:
//    lcd_fill(SPEED_RECT_X, SPEED_RECT_Y, SPEED_RECT_X + rect_length, SPEED_RECT_Y + SPEED_RECT_HEIGHT, RED);
//
//    // Update previous endpoint coordinates
//    prev_end_x = SPEED_RECT_X + rect_length;
//}
void draw_speed_indicator(float speed) {
 8002ac0:	b590      	push	{r4, r7, lr}
 8002ac2:	b08f      	sub	sp, #60	@ 0x3c
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	ed87 0a01 	vstr	s0, [r7, #4]
    // Calculate the length of the speed indicator line based on the current speed and maximum speed
    float length_ratio = speed / max_speed;
 8002aca:	4b7d      	ldr	r3, [pc, #500]	@ (8002cc0 <draw_speed_indicator+0x200>)
 8002acc:	ed93 7a00 	vldr	s14, [r3]
 8002ad0:	edd7 6a01 	vldr	s13, [r7, #4]
 8002ad4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ad8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    int line_length = (int)(POINTER_LENGTH * length_ratio);
 8002adc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002ae0:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8002cc4 <draw_speed_indicator+0x204>
 8002ae4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ae8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002aec:	ee17 3a90 	vmov	r3, s15
 8002af0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Calculate endpoint coordinates of the speed indicator line
    int end_x = CENTER_X + (int)(line_length * cos(PI / 2)); // Calculate endpoint x-coordinate
 8002af2:	4b75      	ldr	r3, [pc, #468]	@ (8002cc8 <draw_speed_indicator+0x208>)
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	085b      	lsrs	r3, r3, #1
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	461c      	mov	r4, r3
 8002afc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002afe:	f7fd fcb5 	bl	800046c <__aeabi_i2d>
 8002b02:	a36d      	add	r3, pc, #436	@ (adr r3, 8002cb8 <draw_speed_indicator+0x1f8>)
 8002b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b08:	f7fd fd1a 	bl	8000540 <__aeabi_dmul>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4610      	mov	r0, r2
 8002b12:	4619      	mov	r1, r3
 8002b14:	f7fd ff26 	bl	8000964 <__aeabi_d2iz>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	4423      	add	r3, r4
 8002b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    int end_y = CENTER_Y - (int)(line_length * sin(PI / 2)); // Calculate endpoint y-coordinate
 8002b1e:	4b6a      	ldr	r3, [pc, #424]	@ (8002cc8 <draw_speed_indicator+0x208>)
 8002b20:	885b      	ldrh	r3, [r3, #2]
 8002b22:	085b      	lsrs	r3, r3, #1
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	461c      	mov	r4, r3
 8002b28:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002b2a:	f7fd fc9f 	bl	800046c <__aeabi_i2d>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	4610      	mov	r0, r2
 8002b34:	4619      	mov	r1, r3
 8002b36:	f7fd ff15 	bl	8000964 <__aeabi_d2iz>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	1ae3      	subs	r3, r4, r3
 8002b3e:	627b      	str	r3, [r7, #36]	@ 0x24

    // Calculate previous endpoint coordinates of the speed indicator line
    int prev_end_x = CENTER_X + (int)((current_speed / max_speed) * POINTER_LENGTH * cos(PI / 2));
 8002b40:	4b61      	ldr	r3, [pc, #388]	@ (8002cc8 <draw_speed_indicator+0x208>)
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	085b      	lsrs	r3, r3, #1
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	461c      	mov	r4, r3
 8002b4a:	4b60      	ldr	r3, [pc, #384]	@ (8002ccc <draw_speed_indicator+0x20c>)
 8002b4c:	edd3 6a00 	vldr	s13, [r3]
 8002b50:	4b5b      	ldr	r3, [pc, #364]	@ (8002cc0 <draw_speed_indicator+0x200>)
 8002b52:	ed93 7a00 	vldr	s14, [r3]
 8002b56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b5a:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8002cc4 <draw_speed_indicator+0x204>
 8002b5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b62:	ee17 0a90 	vmov	r0, s15
 8002b66:	f7fd fc93 	bl	8000490 <__aeabi_f2d>
 8002b6a:	a353      	add	r3, pc, #332	@ (adr r3, 8002cb8 <draw_speed_indicator+0x1f8>)
 8002b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b70:	f7fd fce6 	bl	8000540 <__aeabi_dmul>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4610      	mov	r0, r2
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	f7fd fef2 	bl	8000964 <__aeabi_d2iz>
 8002b80:	4603      	mov	r3, r0
 8002b82:	4423      	add	r3, r4
 8002b84:	623b      	str	r3, [r7, #32]
    int prev_end_y = CENTER_Y - (int)((current_speed / max_speed) * POINTER_LENGTH * sin(PI / 2));
 8002b86:	4b50      	ldr	r3, [pc, #320]	@ (8002cc8 <draw_speed_indicator+0x208>)
 8002b88:	885b      	ldrh	r3, [r3, #2]
 8002b8a:	085b      	lsrs	r3, r3, #1
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	461a      	mov	r2, r3
 8002b90:	4b4e      	ldr	r3, [pc, #312]	@ (8002ccc <draw_speed_indicator+0x20c>)
 8002b92:	edd3 6a00 	vldr	s13, [r3]
 8002b96:	4b4a      	ldr	r3, [pc, #296]	@ (8002cc0 <draw_speed_indicator+0x200>)
 8002b98:	ed93 7a00 	vldr	s14, [r3]
 8002b9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ba0:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8002cc4 <draw_speed_indicator+0x204>
 8002ba4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ba8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bac:	ee17 3a90 	vmov	r3, s15
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	61fb      	str	r3, [r7, #28]

    // Erase the previous pointer position by drawing a white point
    gui_drawpoint(prev_end_x, prev_end_y, WHITE);
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	b291      	uxth	r1, r2
 8002bbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7fe f9db 	bl	8000f7c <gui_drawpoint>

    // Draw the new speed indicator line by drawing points between start and end points
    int delta_x = end_x - CENTER_X;
 8002bc6:	4b40      	ldr	r3, [pc, #256]	@ (8002cc8 <draw_speed_indicator+0x208>)
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	085b      	lsrs	r3, r3, #1
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	461a      	mov	r2, r3
 8002bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bd2:	1a9b      	subs	r3, r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
    int delta_y = end_y - CENTER_Y;
 8002bd6:	4b3c      	ldr	r3, [pc, #240]	@ (8002cc8 <draw_speed_indicator+0x208>)
 8002bd8:	885b      	ldrh	r3, [r3, #2]
 8002bda:	085b      	lsrs	r3, r3, #1
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	461a      	mov	r2, r3
 8002be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be2:	1a9b      	subs	r3, r3, r2
 8002be4:	617b      	str	r3, [r7, #20]
    int steps = max(abs(delta_x), abs(delta_y)); // Calculate the maximum number of steps along the line
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002bec:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	bfb8      	it	lt
 8002bf6:	425b      	neglt	r3, r3
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4610      	mov	r0, r2
 8002bfc:	f7ff ff50 	bl	8002aa0 <max>
 8002c00:	6138      	str	r0, [r7, #16]
    float step_x = delta_x / (float)steps;
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	ee07 3a90 	vmov	s15, r3
 8002c08:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	ee07 3a90 	vmov	s15, r3
 8002c12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c1a:	edc7 7a03 	vstr	s15, [r7, #12]
    float step_y = delta_y / (float)steps;
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	ee07 3a90 	vmov	s15, r3
 8002c24:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	ee07 3a90 	vmov	s15, r3
 8002c2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c36:	edc7 7a02 	vstr	s15, [r7, #8]
    for (int i = 0; i <= steps; i++) {
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c3e:	e02f      	b.n	8002ca0 <draw_speed_indicator+0x1e0>
        gui_drawpoint(CENTER_X + (int)(step_x * i), CENTER_Y + (int)(step_y * i), RED);
 8002c40:	4b21      	ldr	r3, [pc, #132]	@ (8002cc8 <draw_speed_indicator+0x208>)
 8002c42:	881b      	ldrh	r3, [r3, #0]
 8002c44:	085b      	lsrs	r3, r3, #1
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c4a:	ee07 3a90 	vmov	s15, r3
 8002c4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c52:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c5e:	ee17 3a90 	vmov	r3, s15
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	4413      	add	r3, r2
 8002c66:	b298      	uxth	r0, r3
 8002c68:	4b17      	ldr	r3, [pc, #92]	@ (8002cc8 <draw_speed_indicator+0x208>)
 8002c6a:	885b      	ldrh	r3, [r3, #2]
 8002c6c:	085b      	lsrs	r3, r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c72:	ee07 3a90 	vmov	s15, r3
 8002c76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c86:	ee17 3a90 	vmov	r3, s15
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002c94:	4619      	mov	r1, r3
 8002c96:	f7fe f971 	bl	8000f7c <gui_drawpoint>
    for (int i = 0; i <= steps; i++) {
 8002c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ca0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	ddcb      	ble.n	8002c40 <draw_speed_indicator+0x180>
    }
}
 8002ca8:	bf00      	nop
 8002caa:	bf00      	nop
 8002cac:	373c      	adds	r7, #60	@ 0x3c
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd90      	pop	{r4, r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	f3af 8000 	nop.w
 8002cb8:	d1a62633 	.word	0xd1a62633
 8002cbc:	3e1ed609 	.word	0x3e1ed609
 8002cc0:	20000004 	.word	0x20000004
 8002cc4:	43480000 	.word	0x43480000
 8002cc8:	20000080 	.word	0x20000080
 8002ccc:	20000090 	.word	0x20000090

08002cd0 <update_speed>:

void update_speed(float new_speed) {
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	ed87 0a01 	vstr	s0, [r7, #4]
    // Update the current speed
    current_speed = new_speed;
 8002cda:	4a07      	ldr	r2, [pc, #28]	@ (8002cf8 <update_speed+0x28>)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6013      	str	r3, [r2, #0]

    // Draw the updated speed indicator
    draw_speed_indicator(current_speed);
 8002ce0:	4b05      	ldr	r3, [pc, #20]	@ (8002cf8 <update_speed+0x28>)
 8002ce2:	edd3 7a00 	vldr	s15, [r3]
 8002ce6:	eeb0 0a67 	vmov.f32	s0, s15
 8002cea:	f7ff fee9 	bl	8002ac0 <draw_speed_indicator>
}
 8002cee:	bf00      	nop
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	20000090 	.word	0x20000090

08002cfc <simulate_speed_change>:

// Function to simulate changing speed (for demonstration purposes)
void simulate_speed_change(void) {
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
    // Simulate increasing speed
    for (int i = 0; i <= max_speed; i += 10) {
 8002d02:	2300      	movs	r3, #0
 8002d04:	607b      	str	r3, [r7, #4]
 8002d06:	e00b      	b.n	8002d20 <simulate_speed_change+0x24>
        update_speed(i);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	ee07 3a90 	vmov	s15, r3
 8002d0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d12:	eeb0 0a67 	vmov.f32	s0, s15
 8002d16:	f7ff ffdb 	bl	8002cd0 <update_speed>
    for (int i = 0; i <= max_speed; i += 10) {
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	330a      	adds	r3, #10
 8002d1e:	607b      	str	r3, [r7, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	ee07 3a90 	vmov	s15, r3
 8002d26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d2a:	4b12      	ldr	r3, [pc, #72]	@ (8002d74 <simulate_speed_change+0x78>)
 8002d2c:	edd3 7a00 	vldr	s15, [r3]
 8002d30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d38:	d9e6      	bls.n	8002d08 <simulate_speed_change+0xc>
        //HAL_Delay(1); // Adjust delay as needed
    }

    // Simulate decreasing speed smoothly
    for (int i = max_speed; i >= 0; i -= 10) {
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d74 <simulate_speed_change+0x78>)
 8002d3c:	edd3 7a00 	vldr	s15, [r3]
 8002d40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d44:	ee17 3a90 	vmov	r3, s15
 8002d48:	603b      	str	r3, [r7, #0]
 8002d4a:	e00b      	b.n	8002d64 <simulate_speed_change+0x68>
        update_speed(i);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	ee07 3a90 	vmov	s15, r3
 8002d52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d56:	eeb0 0a67 	vmov.f32	s0, s15
 8002d5a:	f7ff ffb9 	bl	8002cd0 <update_speed>
    for (int i = max_speed; i >= 0; i -= 10) {
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	3b0a      	subs	r3, #10
 8002d62:	603b      	str	r3, [r7, #0]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	daf0      	bge.n	8002d4c <simulate_speed_change+0x50>
        //HAL_Delay(1); // Adjust delay as needed
    }
}
 8002d6a:	bf00      	nop
 8002d6c:	bf00      	nop
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	20000004 	.word	0x20000004

08002d78 <delay_us>:
/* Includes ------------------------------------------------------------------*/
#include "tim.h"

/* USER CODE BEGIN 0 */
void delay_us(unsigned int us)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
	uint16_t differ=0xffff-us-5;					//???????????
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	f06f 0305 	mvn.w	r3, #5
 8002d88:	1a9b      	subs	r3, r3, r2
 8002d8a:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_COUNTER(&htim6,differ);
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002dbc <delay_us+0x44>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	89fa      	ldrh	r2, [r7, #14]
 8002d92:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(&htim6);					//?????
 8002d94:	4809      	ldr	r0, [pc, #36]	@ (8002dbc <delay_us+0x44>)
 8002d96:	f001 f8bf 	bl	8003f18 <HAL_TIM_Base_Start>
  while(differ<0xffff-6)							//??,??
 8002d9a:	e003      	b.n	8002da4 <delay_us+0x2c>
  {
    differ=__HAL_TIM_GET_COUNTER(&htim6);			//?????????
 8002d9c:	4b07      	ldr	r3, [pc, #28]	@ (8002dbc <delay_us+0x44>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da2:	81fb      	strh	r3, [r7, #14]
  while(differ<0xffff-6)							//??,??
 8002da4:	89fb      	ldrh	r3, [r7, #14]
 8002da6:	f64f 72f8 	movw	r2, #65528	@ 0xfff8
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d9f6      	bls.n	8002d9c <delay_us+0x24>
  }
  HAL_TIM_Base_Stop(&htim6);
 8002dae:	4803      	ldr	r0, [pc, #12]	@ (8002dbc <delay_us+0x44>)
 8002db0:	f001 f91a 	bl	8003fe8 <HAL_TIM_Base_Stop>
}
 8002db4:	bf00      	nop
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	20000094 	.word	0x20000094

08002dc0 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dc6:	463b      	mov	r3, r7
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002dce:	4b15      	ldr	r3, [pc, #84]	@ (8002e24 <MX_TIM6_Init+0x64>)
 8002dd0:	4a15      	ldr	r2, [pc, #84]	@ (8002e28 <MX_TIM6_Init+0x68>)
 8002dd2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 71;
 8002dd4:	4b13      	ldr	r3, [pc, #76]	@ (8002e24 <MX_TIM6_Init+0x64>)
 8002dd6:	2247      	movs	r2, #71	@ 0x47
 8002dd8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dda:	4b12      	ldr	r3, [pc, #72]	@ (8002e24 <MX_TIM6_Init+0x64>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002de0:	4b10      	ldr	r3, [pc, #64]	@ (8002e24 <MX_TIM6_Init+0x64>)
 8002de2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002de6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002de8:	4b0e      	ldr	r3, [pc, #56]	@ (8002e24 <MX_TIM6_Init+0x64>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002dee:	480d      	ldr	r0, [pc, #52]	@ (8002e24 <MX_TIM6_Init+0x64>)
 8002df0:	f001 f842 	bl	8003e78 <HAL_TIM_Base_Init>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002dfa:	f7ff fde1 	bl	80029c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e02:	2300      	movs	r3, #0
 8002e04:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002e06:	463b      	mov	r3, r7
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4806      	ldr	r0, [pc, #24]	@ (8002e24 <MX_TIM6_Init+0x64>)
 8002e0c:	f001 f9b4 	bl	8004178 <HAL_TIMEx_MasterConfigSynchronization>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002e16:	f7ff fdd3 	bl	80029c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002e1a:	bf00      	nop
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20000094 	.word	0x20000094
 8002e28:	40001000 	.word	0x40001000

08002e2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a0b      	ldr	r2, [pc, #44]	@ (8002e68 <HAL_TIM_Base_MspInit+0x3c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d10d      	bne.n	8002e5a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	4b0a      	ldr	r3, [pc, #40]	@ (8002e6c <HAL_TIM_Base_MspInit+0x40>)
 8002e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e46:	4a09      	ldr	r2, [pc, #36]	@ (8002e6c <HAL_TIM_Base_MspInit+0x40>)
 8002e48:	f043 0310 	orr.w	r3, r3, #16
 8002e4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e4e:	4b07      	ldr	r3, [pc, #28]	@ (8002e6c <HAL_TIM_Base_MspInit+0x40>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e52:	f003 0310 	and.w	r3, r3, #16
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002e5a:	bf00      	nop
 8002e5c:	3714      	adds	r7, #20
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	40001000 	.word	0x40001000
 8002e6c:	40023800 	.word	0x40023800

08002e70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ea8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e74:	480d      	ldr	r0, [pc, #52]	@ (8002eac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e76:	490e      	ldr	r1, [pc, #56]	@ (8002eb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e78:	4a0e      	ldr	r2, [pc, #56]	@ (8002eb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e7c:	e002      	b.n	8002e84 <LoopCopyDataInit>

08002e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e82:	3304      	adds	r3, #4

08002e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e88:	d3f9      	bcc.n	8002e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e8a:	4a0b      	ldr	r2, [pc, #44]	@ (8002eb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e8c:	4c0b      	ldr	r4, [pc, #44]	@ (8002ebc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e90:	e001      	b.n	8002e96 <LoopFillZerobss>

08002e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e94:	3204      	adds	r2, #4

08002e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e98:	d3fb      	bcc.n	8002e92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e9a:	f7ff fdef 	bl	8002a7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e9e:	f001 fabf 	bl	8004420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ea2:	f7ff fd05 	bl	80028b0 <main>
  bx  lr    
 8002ea6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ea8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002eb0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002eb4:	080044a0 	.word	0x080044a0
  ldr r2, =_sbss
 8002eb8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002ebc:	200000e0 	.word	0x200000e0

08002ec0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ec0:	e7fe      	b.n	8002ec0 <ADC_IRQHandler>
	...

08002ec4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8002f04 <HAL_Init+0x40>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a0d      	ldr	r2, [pc, #52]	@ (8002f04 <HAL_Init+0x40>)
 8002ece:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ed2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f04 <HAL_Init+0x40>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a0a      	ldr	r2, [pc, #40]	@ (8002f04 <HAL_Init+0x40>)
 8002eda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ede:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ee0:	4b08      	ldr	r3, [pc, #32]	@ (8002f04 <HAL_Init+0x40>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a07      	ldr	r2, [pc, #28]	@ (8002f04 <HAL_Init+0x40>)
 8002ee6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002eec:	2003      	movs	r0, #3
 8002eee:	f000 f931 	bl	8003154 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ef2:	200f      	movs	r0, #15
 8002ef4:	f000 f808 	bl	8002f08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ef8:	f7ff fd68 	bl	80029cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40023c00 	.word	0x40023c00

08002f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f10:	4b12      	ldr	r3, [pc, #72]	@ (8002f5c <HAL_InitTick+0x54>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	4b12      	ldr	r3, [pc, #72]	@ (8002f60 <HAL_InitTick+0x58>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	4619      	mov	r1, r3
 8002f1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 f93b 	bl	80031a2 <HAL_SYSTICK_Config>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e00e      	b.n	8002f54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b0f      	cmp	r3, #15
 8002f3a:	d80a      	bhi.n	8002f52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	f04f 30ff 	mov.w	r0, #4294967295
 8002f44:	f000 f911 	bl	800316a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f48:	4a06      	ldr	r2, [pc, #24]	@ (8002f64 <HAL_InitTick+0x5c>)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	e000      	b.n	8002f54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	20000000 	.word	0x20000000
 8002f60:	2000000c 	.word	0x2000000c
 8002f64:	20000008 	.word	0x20000008

08002f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f6c:	4b06      	ldr	r3, [pc, #24]	@ (8002f88 <HAL_IncTick+0x20>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	461a      	mov	r2, r3
 8002f72:	4b06      	ldr	r3, [pc, #24]	@ (8002f8c <HAL_IncTick+0x24>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4413      	add	r3, r2
 8002f78:	4a04      	ldr	r2, [pc, #16]	@ (8002f8c <HAL_IncTick+0x24>)
 8002f7a:	6013      	str	r3, [r2, #0]
}
 8002f7c:	bf00      	nop
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	2000000c 	.word	0x2000000c
 8002f8c:	200000dc 	.word	0x200000dc

08002f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  return uwTick;
 8002f94:	4b03      	ldr	r3, [pc, #12]	@ (8002fa4 <HAL_GetTick+0x14>)
 8002f96:	681b      	ldr	r3, [r3, #0]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	200000dc 	.word	0x200000dc

08002fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fb0:	f7ff ffee 	bl	8002f90 <HAL_GetTick>
 8002fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc0:	d005      	beq.n	8002fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8002fec <HAL_Delay+0x44>)
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4413      	add	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fce:	bf00      	nop
 8002fd0:	f7ff ffde 	bl	8002f90 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d8f7      	bhi.n	8002fd0 <HAL_Delay+0x28>
  {
  }
}
 8002fe0:	bf00      	nop
 8002fe2:	bf00      	nop
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	2000000c 	.word	0x2000000c

08002ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003000:	4b0c      	ldr	r3, [pc, #48]	@ (8003034 <__NVIC_SetPriorityGrouping+0x44>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800300c:	4013      	ands	r3, r2
 800300e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003018:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800301c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003022:	4a04      	ldr	r2, [pc, #16]	@ (8003034 <__NVIC_SetPriorityGrouping+0x44>)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	60d3      	str	r3, [r2, #12]
}
 8003028:	bf00      	nop
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	e000ed00 	.word	0xe000ed00

08003038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800303c:	4b04      	ldr	r3, [pc, #16]	@ (8003050 <__NVIC_GetPriorityGrouping+0x18>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	0a1b      	lsrs	r3, r3, #8
 8003042:	f003 0307 	and.w	r3, r3, #7
}
 8003046:	4618      	mov	r0, r3
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	e000ed00 	.word	0xe000ed00

08003054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	6039      	str	r1, [r7, #0]
 800305e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003064:	2b00      	cmp	r3, #0
 8003066:	db0a      	blt.n	800307e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	b2da      	uxtb	r2, r3
 800306c:	490c      	ldr	r1, [pc, #48]	@ (80030a0 <__NVIC_SetPriority+0x4c>)
 800306e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003072:	0112      	lsls	r2, r2, #4
 8003074:	b2d2      	uxtb	r2, r2
 8003076:	440b      	add	r3, r1
 8003078:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800307c:	e00a      	b.n	8003094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	b2da      	uxtb	r2, r3
 8003082:	4908      	ldr	r1, [pc, #32]	@ (80030a4 <__NVIC_SetPriority+0x50>)
 8003084:	79fb      	ldrb	r3, [r7, #7]
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	3b04      	subs	r3, #4
 800308c:	0112      	lsls	r2, r2, #4
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	440b      	add	r3, r1
 8003092:	761a      	strb	r2, [r3, #24]
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	e000e100 	.word	0xe000e100
 80030a4:	e000ed00 	.word	0xe000ed00

080030a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b089      	sub	sp, #36	@ 0x24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	f1c3 0307 	rsb	r3, r3, #7
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	bf28      	it	cs
 80030c6:	2304      	movcs	r3, #4
 80030c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	3304      	adds	r3, #4
 80030ce:	2b06      	cmp	r3, #6
 80030d0:	d902      	bls.n	80030d8 <NVIC_EncodePriority+0x30>
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	3b03      	subs	r3, #3
 80030d6:	e000      	b.n	80030da <NVIC_EncodePriority+0x32>
 80030d8:	2300      	movs	r3, #0
 80030da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030dc:	f04f 32ff 	mov.w	r2, #4294967295
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	43da      	mvns	r2, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	401a      	ands	r2, r3
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030f0:	f04f 31ff 	mov.w	r1, #4294967295
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	fa01 f303 	lsl.w	r3, r1, r3
 80030fa:	43d9      	mvns	r1, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003100:	4313      	orrs	r3, r2
         );
}
 8003102:	4618      	mov	r0, r3
 8003104:	3724      	adds	r7, #36	@ 0x24
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
	...

08003110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3b01      	subs	r3, #1
 800311c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003120:	d301      	bcc.n	8003126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003122:	2301      	movs	r3, #1
 8003124:	e00f      	b.n	8003146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003126:	4a0a      	ldr	r2, [pc, #40]	@ (8003150 <SysTick_Config+0x40>)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3b01      	subs	r3, #1
 800312c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800312e:	210f      	movs	r1, #15
 8003130:	f04f 30ff 	mov.w	r0, #4294967295
 8003134:	f7ff ff8e 	bl	8003054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003138:	4b05      	ldr	r3, [pc, #20]	@ (8003150 <SysTick_Config+0x40>)
 800313a:	2200      	movs	r2, #0
 800313c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800313e:	4b04      	ldr	r3, [pc, #16]	@ (8003150 <SysTick_Config+0x40>)
 8003140:	2207      	movs	r2, #7
 8003142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	e000e010 	.word	0xe000e010

08003154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f7ff ff47 	bl	8002ff0 <__NVIC_SetPriorityGrouping>
}
 8003162:	bf00      	nop
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800316a:	b580      	push	{r7, lr}
 800316c:	b086      	sub	sp, #24
 800316e:	af00      	add	r7, sp, #0
 8003170:	4603      	mov	r3, r0
 8003172:	60b9      	str	r1, [r7, #8]
 8003174:	607a      	str	r2, [r7, #4]
 8003176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003178:	2300      	movs	r3, #0
 800317a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800317c:	f7ff ff5c 	bl	8003038 <__NVIC_GetPriorityGrouping>
 8003180:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	68b9      	ldr	r1, [r7, #8]
 8003186:	6978      	ldr	r0, [r7, #20]
 8003188:	f7ff ff8e 	bl	80030a8 <NVIC_EncodePriority>
 800318c:	4602      	mov	r2, r0
 800318e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003192:	4611      	mov	r1, r2
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff ff5d 	bl	8003054 <__NVIC_SetPriority>
}
 800319a:	bf00      	nop
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b082      	sub	sp, #8
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7ff ffb0 	bl	8003110 <SysTick_Config>
 80031b0:	4603      	mov	r3, r0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031bc:	b480      	push	{r7}
 80031be:	b089      	sub	sp, #36	@ 0x24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031d2:	2300      	movs	r3, #0
 80031d4:	61fb      	str	r3, [r7, #28]
 80031d6:	e16b      	b.n	80034b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031d8:	2201      	movs	r2, #1
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	4013      	ands	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	f040 815a 	bne.w	80034aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d005      	beq.n	800320e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800320a:	2b02      	cmp	r3, #2
 800320c:	d130      	bne.n	8003270 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	2203      	movs	r2, #3
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	43db      	mvns	r3, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4013      	ands	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4313      	orrs	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003244:	2201      	movs	r2, #1
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	43db      	mvns	r3, r3
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4013      	ands	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	091b      	lsrs	r3, r3, #4
 800325a:	f003 0201 	and.w	r2, r3, #1
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4313      	orrs	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 0303 	and.w	r3, r3, #3
 8003278:	2b03      	cmp	r3, #3
 800327a:	d017      	beq.n	80032ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	2203      	movs	r2, #3
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	43db      	mvns	r3, r3
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4013      	ands	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f003 0303 	and.w	r3, r3, #3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d123      	bne.n	8003300 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	08da      	lsrs	r2, r3, #3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3208      	adds	r2, #8
 80032c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	220f      	movs	r2, #15
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	43db      	mvns	r3, r3
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4013      	ands	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	08da      	lsrs	r2, r3, #3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3208      	adds	r2, #8
 80032fa:	69b9      	ldr	r1, [r7, #24]
 80032fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	2203      	movs	r2, #3
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	43db      	mvns	r3, r3
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4013      	ands	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f003 0203 	and.w	r2, r3, #3
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4313      	orrs	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 80b4 	beq.w	80034aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003342:	2300      	movs	r3, #0
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	4b60      	ldr	r3, [pc, #384]	@ (80034c8 <HAL_GPIO_Init+0x30c>)
 8003348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800334a:	4a5f      	ldr	r2, [pc, #380]	@ (80034c8 <HAL_GPIO_Init+0x30c>)
 800334c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003350:	6453      	str	r3, [r2, #68]	@ 0x44
 8003352:	4b5d      	ldr	r3, [pc, #372]	@ (80034c8 <HAL_GPIO_Init+0x30c>)
 8003354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003356:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800335e:	4a5b      	ldr	r2, [pc, #364]	@ (80034cc <HAL_GPIO_Init+0x310>)
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	089b      	lsrs	r3, r3, #2
 8003364:	3302      	adds	r3, #2
 8003366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800336a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	220f      	movs	r2, #15
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43db      	mvns	r3, r3
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	4013      	ands	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a52      	ldr	r2, [pc, #328]	@ (80034d0 <HAL_GPIO_Init+0x314>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d02b      	beq.n	80033e2 <HAL_GPIO_Init+0x226>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a51      	ldr	r2, [pc, #324]	@ (80034d4 <HAL_GPIO_Init+0x318>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d025      	beq.n	80033de <HAL_GPIO_Init+0x222>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a50      	ldr	r2, [pc, #320]	@ (80034d8 <HAL_GPIO_Init+0x31c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d01f      	beq.n	80033da <HAL_GPIO_Init+0x21e>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a4f      	ldr	r2, [pc, #316]	@ (80034dc <HAL_GPIO_Init+0x320>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d019      	beq.n	80033d6 <HAL_GPIO_Init+0x21a>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a4e      	ldr	r2, [pc, #312]	@ (80034e0 <HAL_GPIO_Init+0x324>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d013      	beq.n	80033d2 <HAL_GPIO_Init+0x216>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a4d      	ldr	r2, [pc, #308]	@ (80034e4 <HAL_GPIO_Init+0x328>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d00d      	beq.n	80033ce <HAL_GPIO_Init+0x212>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a4c      	ldr	r2, [pc, #304]	@ (80034e8 <HAL_GPIO_Init+0x32c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d007      	beq.n	80033ca <HAL_GPIO_Init+0x20e>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a4b      	ldr	r2, [pc, #300]	@ (80034ec <HAL_GPIO_Init+0x330>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d101      	bne.n	80033c6 <HAL_GPIO_Init+0x20a>
 80033c2:	2307      	movs	r3, #7
 80033c4:	e00e      	b.n	80033e4 <HAL_GPIO_Init+0x228>
 80033c6:	2308      	movs	r3, #8
 80033c8:	e00c      	b.n	80033e4 <HAL_GPIO_Init+0x228>
 80033ca:	2306      	movs	r3, #6
 80033cc:	e00a      	b.n	80033e4 <HAL_GPIO_Init+0x228>
 80033ce:	2305      	movs	r3, #5
 80033d0:	e008      	b.n	80033e4 <HAL_GPIO_Init+0x228>
 80033d2:	2304      	movs	r3, #4
 80033d4:	e006      	b.n	80033e4 <HAL_GPIO_Init+0x228>
 80033d6:	2303      	movs	r3, #3
 80033d8:	e004      	b.n	80033e4 <HAL_GPIO_Init+0x228>
 80033da:	2302      	movs	r3, #2
 80033dc:	e002      	b.n	80033e4 <HAL_GPIO_Init+0x228>
 80033de:	2301      	movs	r3, #1
 80033e0:	e000      	b.n	80033e4 <HAL_GPIO_Init+0x228>
 80033e2:	2300      	movs	r3, #0
 80033e4:	69fa      	ldr	r2, [r7, #28]
 80033e6:	f002 0203 	and.w	r2, r2, #3
 80033ea:	0092      	lsls	r2, r2, #2
 80033ec:	4093      	lsls	r3, r2
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033f4:	4935      	ldr	r1, [pc, #212]	@ (80034cc <HAL_GPIO_Init+0x310>)
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	089b      	lsrs	r3, r3, #2
 80033fa:	3302      	adds	r3, #2
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003402:	4b3b      	ldr	r3, [pc, #236]	@ (80034f0 <HAL_GPIO_Init+0x334>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	43db      	mvns	r3, r3
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	4013      	ands	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	4313      	orrs	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003426:	4a32      	ldr	r2, [pc, #200]	@ (80034f0 <HAL_GPIO_Init+0x334>)
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800342c:	4b30      	ldr	r3, [pc, #192]	@ (80034f0 <HAL_GPIO_Init+0x334>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	43db      	mvns	r3, r3
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4013      	ands	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d003      	beq.n	8003450 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003450:	4a27      	ldr	r2, [pc, #156]	@ (80034f0 <HAL_GPIO_Init+0x334>)
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003456:	4b26      	ldr	r3, [pc, #152]	@ (80034f0 <HAL_GPIO_Init+0x334>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	43db      	mvns	r3, r3
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4013      	ands	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	4313      	orrs	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800347a:	4a1d      	ldr	r2, [pc, #116]	@ (80034f0 <HAL_GPIO_Init+0x334>)
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003480:	4b1b      	ldr	r3, [pc, #108]	@ (80034f0 <HAL_GPIO_Init+0x334>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	43db      	mvns	r3, r3
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4013      	ands	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034a4:	4a12      	ldr	r2, [pc, #72]	@ (80034f0 <HAL_GPIO_Init+0x334>)
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	3301      	adds	r3, #1
 80034ae:	61fb      	str	r3, [r7, #28]
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	2b0f      	cmp	r3, #15
 80034b4:	f67f ae90 	bls.w	80031d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034b8:	bf00      	nop
 80034ba:	bf00      	nop
 80034bc:	3724      	adds	r7, #36	@ 0x24
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	40023800 	.word	0x40023800
 80034cc:	40013800 	.word	0x40013800
 80034d0:	40020000 	.word	0x40020000
 80034d4:	40020400 	.word	0x40020400
 80034d8:	40020800 	.word	0x40020800
 80034dc:	40020c00 	.word	0x40020c00
 80034e0:	40021000 	.word	0x40021000
 80034e4:	40021400 	.word	0x40021400
 80034e8:	40021800 	.word	0x40021800
 80034ec:	40021c00 	.word	0x40021c00
 80034f0:	40013c00 	.word	0x40013c00

080034f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	460b      	mov	r3, r1
 80034fe:	807b      	strh	r3, [r7, #2]
 8003500:	4613      	mov	r3, r2
 8003502:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003504:	787b      	ldrb	r3, [r7, #1]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800350a:	887a      	ldrh	r2, [r7, #2]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003510:	e003      	b.n	800351a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003512:	887b      	ldrh	r3, [r7, #2]
 8003514:	041a      	lsls	r2, r3, #16
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	619a      	str	r2, [r3, #24]
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
	...

08003528 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e267      	b.n	8003a0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d075      	beq.n	8003632 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003546:	4b88      	ldr	r3, [pc, #544]	@ (8003768 <HAL_RCC_OscConfig+0x240>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 030c 	and.w	r3, r3, #12
 800354e:	2b04      	cmp	r3, #4
 8003550:	d00c      	beq.n	800356c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003552:	4b85      	ldr	r3, [pc, #532]	@ (8003768 <HAL_RCC_OscConfig+0x240>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800355a:	2b08      	cmp	r3, #8
 800355c:	d112      	bne.n	8003584 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800355e:	4b82      	ldr	r3, [pc, #520]	@ (8003768 <HAL_RCC_OscConfig+0x240>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003566:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800356a:	d10b      	bne.n	8003584 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800356c:	4b7e      	ldr	r3, [pc, #504]	@ (8003768 <HAL_RCC_OscConfig+0x240>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d05b      	beq.n	8003630 <HAL_RCC_OscConfig+0x108>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d157      	bne.n	8003630 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e242      	b.n	8003a0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800358c:	d106      	bne.n	800359c <HAL_RCC_OscConfig+0x74>
 800358e:	4b76      	ldr	r3, [pc, #472]	@ (8003768 <HAL_RCC_OscConfig+0x240>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a75      	ldr	r2, [pc, #468]	@ (8003768 <HAL_RCC_OscConfig+0x240>)
 8003594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	e01d      	b.n	80035d8 <HAL_RCC_OscConfig+0xb0>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035a4:	d10c      	bne.n	80035c0 <HAL_RCC_OscConfig+0x98>
 80035a6:	4b70      	ldr	r3, [pc, #448]	@ (8003768 <HAL_RCC_OscConfig+0x240>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a6f      	ldr	r2, [pc, #444]	@ (8003768 <HAL_RCC_OscConfig+0x240>)
 80035ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	4b6d      	ldr	r3, [pc, #436]	@ (8003768 <HAL_RCC_OscConfig+0x240>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a6c      	ldr	r2, [pc, #432]	@ (8003768 <HAL_RCC_OscConfig+0x240>)
 80035b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	e00b      	b.n	80035d8 <HAL_RCC_OscConfig+0xb0>
 80035c0:	4b69      	ldr	r3, [pc, #420]	@ (8003768 <HAL_RCC_OscConfig+0x240>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a68      	ldr	r2, [pc, #416]	@ (8003768 <HAL_RCC_OscConfig+0x240>)
 80035c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035ca:	6013      	str	r3, [r2, #0]
 80035cc:	4b66      	ldr	r3, [pc, #408]	@ (8003768 <HAL_RCC_OscConfig+0x240>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a65      	ldr	r2, [pc, #404]	@ (8003768 <HAL_RCC_OscConfig+0x240>)
 80035d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d013      	beq.n	8003608 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e0:	f7ff fcd6 	bl	8002f90 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035e8:	f7ff fcd2 	bl	8002f90 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b64      	cmp	r3, #100	@ 0x64
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e207      	b.n	8003a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fa:	4b5b      	ldr	r3, [pc, #364]	@ (8003768 <HAL_RCC_OscConfig+0x240>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0f0      	beq.n	80035e8 <HAL_RCC_OscConfig+0xc0>
 8003606:	e014      	b.n	8003632 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003608:	f7ff fcc2 	bl	8002f90 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003610:	f7ff fcbe 	bl	8002f90 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b64      	cmp	r3, #100	@ 0x64
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e1f3      	b.n	8003a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003622:	4b51      	ldr	r3, [pc, #324]	@ (8003768 <HAL_RCC_OscConfig+0x240>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f0      	bne.n	8003610 <HAL_RCC_OscConfig+0xe8>
 800362e:	e000      	b.n	8003632 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d063      	beq.n	8003706 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800363e:	4b4a      	ldr	r3, [pc, #296]	@ (8003768 <HAL_RCC_OscConfig+0x240>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 030c 	and.w	r3, r3, #12
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00b      	beq.n	8003662 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800364a:	4b47      	ldr	r3, [pc, #284]	@ (8003768 <HAL_RCC_OscConfig+0x240>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003652:	2b08      	cmp	r3, #8
 8003654:	d11c      	bne.n	8003690 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003656:	4b44      	ldr	r3, [pc, #272]	@ (8003768 <HAL_RCC_OscConfig+0x240>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d116      	bne.n	8003690 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003662:	4b41      	ldr	r3, [pc, #260]	@ (8003768 <HAL_RCC_OscConfig+0x240>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d005      	beq.n	800367a <HAL_RCC_OscConfig+0x152>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d001      	beq.n	800367a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e1c7      	b.n	8003a0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800367a:	4b3b      	ldr	r3, [pc, #236]	@ (8003768 <HAL_RCC_OscConfig+0x240>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	4937      	ldr	r1, [pc, #220]	@ (8003768 <HAL_RCC_OscConfig+0x240>)
 800368a:	4313      	orrs	r3, r2
 800368c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800368e:	e03a      	b.n	8003706 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d020      	beq.n	80036da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003698:	4b34      	ldr	r3, [pc, #208]	@ (800376c <HAL_RCC_OscConfig+0x244>)
 800369a:	2201      	movs	r2, #1
 800369c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369e:	f7ff fc77 	bl	8002f90 <HAL_GetTick>
 80036a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036a6:	f7ff fc73 	bl	8002f90 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e1a8      	b.n	8003a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003768 <HAL_RCC_OscConfig+0x240>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d0f0      	beq.n	80036a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c4:	4b28      	ldr	r3, [pc, #160]	@ (8003768 <HAL_RCC_OscConfig+0x240>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	4925      	ldr	r1, [pc, #148]	@ (8003768 <HAL_RCC_OscConfig+0x240>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	600b      	str	r3, [r1, #0]
 80036d8:	e015      	b.n	8003706 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036da:	4b24      	ldr	r3, [pc, #144]	@ (800376c <HAL_RCC_OscConfig+0x244>)
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e0:	f7ff fc56 	bl	8002f90 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036e8:	f7ff fc52 	bl	8002f90 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e187      	b.n	8003a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003768 <HAL_RCC_OscConfig+0x240>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1f0      	bne.n	80036e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b00      	cmp	r3, #0
 8003710:	d036      	beq.n	8003780 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d016      	beq.n	8003748 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800371a:	4b15      	ldr	r3, [pc, #84]	@ (8003770 <HAL_RCC_OscConfig+0x248>)
 800371c:	2201      	movs	r2, #1
 800371e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003720:	f7ff fc36 	bl	8002f90 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003728:	f7ff fc32 	bl	8002f90 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e167      	b.n	8003a0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800373a:	4b0b      	ldr	r3, [pc, #44]	@ (8003768 <HAL_RCC_OscConfig+0x240>)
 800373c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0f0      	beq.n	8003728 <HAL_RCC_OscConfig+0x200>
 8003746:	e01b      	b.n	8003780 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003748:	4b09      	ldr	r3, [pc, #36]	@ (8003770 <HAL_RCC_OscConfig+0x248>)
 800374a:	2200      	movs	r2, #0
 800374c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800374e:	f7ff fc1f 	bl	8002f90 <HAL_GetTick>
 8003752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003754:	e00e      	b.n	8003774 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003756:	f7ff fc1b 	bl	8002f90 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d907      	bls.n	8003774 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e150      	b.n	8003a0a <HAL_RCC_OscConfig+0x4e2>
 8003768:	40023800 	.word	0x40023800
 800376c:	42470000 	.word	0x42470000
 8003770:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003774:	4b88      	ldr	r3, [pc, #544]	@ (8003998 <HAL_RCC_OscConfig+0x470>)
 8003776:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1ea      	bne.n	8003756 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 8097 	beq.w	80038bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800378e:	2300      	movs	r3, #0
 8003790:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003792:	4b81      	ldr	r3, [pc, #516]	@ (8003998 <HAL_RCC_OscConfig+0x470>)
 8003794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10f      	bne.n	80037be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800379e:	2300      	movs	r3, #0
 80037a0:	60bb      	str	r3, [r7, #8]
 80037a2:	4b7d      	ldr	r3, [pc, #500]	@ (8003998 <HAL_RCC_OscConfig+0x470>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a6:	4a7c      	ldr	r2, [pc, #496]	@ (8003998 <HAL_RCC_OscConfig+0x470>)
 80037a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80037ae:	4b7a      	ldr	r3, [pc, #488]	@ (8003998 <HAL_RCC_OscConfig+0x470>)
 80037b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037b6:	60bb      	str	r3, [r7, #8]
 80037b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ba:	2301      	movs	r3, #1
 80037bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037be:	4b77      	ldr	r3, [pc, #476]	@ (800399c <HAL_RCC_OscConfig+0x474>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d118      	bne.n	80037fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ca:	4b74      	ldr	r3, [pc, #464]	@ (800399c <HAL_RCC_OscConfig+0x474>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a73      	ldr	r2, [pc, #460]	@ (800399c <HAL_RCC_OscConfig+0x474>)
 80037d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037d6:	f7ff fbdb 	bl	8002f90 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037dc:	e008      	b.n	80037f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037de:	f7ff fbd7 	bl	8002f90 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e10c      	b.n	8003a0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f0:	4b6a      	ldr	r3, [pc, #424]	@ (800399c <HAL_RCC_OscConfig+0x474>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0f0      	beq.n	80037de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d106      	bne.n	8003812 <HAL_RCC_OscConfig+0x2ea>
 8003804:	4b64      	ldr	r3, [pc, #400]	@ (8003998 <HAL_RCC_OscConfig+0x470>)
 8003806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003808:	4a63      	ldr	r2, [pc, #396]	@ (8003998 <HAL_RCC_OscConfig+0x470>)
 800380a:	f043 0301 	orr.w	r3, r3, #1
 800380e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003810:	e01c      	b.n	800384c <HAL_RCC_OscConfig+0x324>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	2b05      	cmp	r3, #5
 8003818:	d10c      	bne.n	8003834 <HAL_RCC_OscConfig+0x30c>
 800381a:	4b5f      	ldr	r3, [pc, #380]	@ (8003998 <HAL_RCC_OscConfig+0x470>)
 800381c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800381e:	4a5e      	ldr	r2, [pc, #376]	@ (8003998 <HAL_RCC_OscConfig+0x470>)
 8003820:	f043 0304 	orr.w	r3, r3, #4
 8003824:	6713      	str	r3, [r2, #112]	@ 0x70
 8003826:	4b5c      	ldr	r3, [pc, #368]	@ (8003998 <HAL_RCC_OscConfig+0x470>)
 8003828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800382a:	4a5b      	ldr	r2, [pc, #364]	@ (8003998 <HAL_RCC_OscConfig+0x470>)
 800382c:	f043 0301 	orr.w	r3, r3, #1
 8003830:	6713      	str	r3, [r2, #112]	@ 0x70
 8003832:	e00b      	b.n	800384c <HAL_RCC_OscConfig+0x324>
 8003834:	4b58      	ldr	r3, [pc, #352]	@ (8003998 <HAL_RCC_OscConfig+0x470>)
 8003836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003838:	4a57      	ldr	r2, [pc, #348]	@ (8003998 <HAL_RCC_OscConfig+0x470>)
 800383a:	f023 0301 	bic.w	r3, r3, #1
 800383e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003840:	4b55      	ldr	r3, [pc, #340]	@ (8003998 <HAL_RCC_OscConfig+0x470>)
 8003842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003844:	4a54      	ldr	r2, [pc, #336]	@ (8003998 <HAL_RCC_OscConfig+0x470>)
 8003846:	f023 0304 	bic.w	r3, r3, #4
 800384a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d015      	beq.n	8003880 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003854:	f7ff fb9c 	bl	8002f90 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800385a:	e00a      	b.n	8003872 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800385c:	f7ff fb98 	bl	8002f90 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800386a:	4293      	cmp	r3, r2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e0cb      	b.n	8003a0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003872:	4b49      	ldr	r3, [pc, #292]	@ (8003998 <HAL_RCC_OscConfig+0x470>)
 8003874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d0ee      	beq.n	800385c <HAL_RCC_OscConfig+0x334>
 800387e:	e014      	b.n	80038aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003880:	f7ff fb86 	bl	8002f90 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003886:	e00a      	b.n	800389e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003888:	f7ff fb82 	bl	8002f90 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003896:	4293      	cmp	r3, r2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e0b5      	b.n	8003a0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800389e:	4b3e      	ldr	r3, [pc, #248]	@ (8003998 <HAL_RCC_OscConfig+0x470>)
 80038a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1ee      	bne.n	8003888 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038aa:	7dfb      	ldrb	r3, [r7, #23]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d105      	bne.n	80038bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038b0:	4b39      	ldr	r3, [pc, #228]	@ (8003998 <HAL_RCC_OscConfig+0x470>)
 80038b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b4:	4a38      	ldr	r2, [pc, #224]	@ (8003998 <HAL_RCC_OscConfig+0x470>)
 80038b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 80a1 	beq.w	8003a08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038c6:	4b34      	ldr	r3, [pc, #208]	@ (8003998 <HAL_RCC_OscConfig+0x470>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 030c 	and.w	r3, r3, #12
 80038ce:	2b08      	cmp	r3, #8
 80038d0:	d05c      	beq.n	800398c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d141      	bne.n	800395e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038da:	4b31      	ldr	r3, [pc, #196]	@ (80039a0 <HAL_RCC_OscConfig+0x478>)
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e0:	f7ff fb56 	bl	8002f90 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038e8:	f7ff fb52 	bl	8002f90 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e087      	b.n	8003a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038fa:	4b27      	ldr	r3, [pc, #156]	@ (8003998 <HAL_RCC_OscConfig+0x470>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1f0      	bne.n	80038e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69da      	ldr	r2, [r3, #28]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003914:	019b      	lsls	r3, r3, #6
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800391c:	085b      	lsrs	r3, r3, #1
 800391e:	3b01      	subs	r3, #1
 8003920:	041b      	lsls	r3, r3, #16
 8003922:	431a      	orrs	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003928:	061b      	lsls	r3, r3, #24
 800392a:	491b      	ldr	r1, [pc, #108]	@ (8003998 <HAL_RCC_OscConfig+0x470>)
 800392c:	4313      	orrs	r3, r2
 800392e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003930:	4b1b      	ldr	r3, [pc, #108]	@ (80039a0 <HAL_RCC_OscConfig+0x478>)
 8003932:	2201      	movs	r2, #1
 8003934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003936:	f7ff fb2b 	bl	8002f90 <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800393c:	e008      	b.n	8003950 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800393e:	f7ff fb27 	bl	8002f90 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e05c      	b.n	8003a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003950:	4b11      	ldr	r3, [pc, #68]	@ (8003998 <HAL_RCC_OscConfig+0x470>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0f0      	beq.n	800393e <HAL_RCC_OscConfig+0x416>
 800395c:	e054      	b.n	8003a08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800395e:	4b10      	ldr	r3, [pc, #64]	@ (80039a0 <HAL_RCC_OscConfig+0x478>)
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003964:	f7ff fb14 	bl	8002f90 <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800396c:	f7ff fb10 	bl	8002f90 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e045      	b.n	8003a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800397e:	4b06      	ldr	r3, [pc, #24]	@ (8003998 <HAL_RCC_OscConfig+0x470>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1f0      	bne.n	800396c <HAL_RCC_OscConfig+0x444>
 800398a:	e03d      	b.n	8003a08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d107      	bne.n	80039a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e038      	b.n	8003a0a <HAL_RCC_OscConfig+0x4e2>
 8003998:	40023800 	.word	0x40023800
 800399c:	40007000 	.word	0x40007000
 80039a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003a14 <HAL_RCC_OscConfig+0x4ec>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d028      	beq.n	8003a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039bc:	429a      	cmp	r2, r3
 80039be:	d121      	bne.n	8003a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d11a      	bne.n	8003a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80039d4:	4013      	ands	r3, r2
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039dc:	4293      	cmp	r3, r2
 80039de:	d111      	bne.n	8003a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ea:	085b      	lsrs	r3, r3, #1
 80039ec:	3b01      	subs	r3, #1
 80039ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d107      	bne.n	8003a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d001      	beq.n	8003a08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e000      	b.n	8003a0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40023800 	.word	0x40023800

08003a18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e0cc      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a2c:	4b68      	ldr	r3, [pc, #416]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d90c      	bls.n	8003a54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3a:	4b65      	ldr	r3, [pc, #404]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a42:	4b63      	ldr	r3, [pc, #396]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0307 	and.w	r3, r3, #7
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d001      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e0b8      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d020      	beq.n	8003aa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0304 	and.w	r3, r3, #4
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d005      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a6c:	4b59      	ldr	r3, [pc, #356]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	4a58      	ldr	r2, [pc, #352]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0308 	and.w	r3, r3, #8
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d005      	beq.n	8003a90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a84:	4b53      	ldr	r3, [pc, #332]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	4a52      	ldr	r2, [pc, #328]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a90:	4b50      	ldr	r3, [pc, #320]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	494d      	ldr	r1, [pc, #308]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d044      	beq.n	8003b38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d107      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab6:	4b47      	ldr	r3, [pc, #284]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d119      	bne.n	8003af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e07f      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d003      	beq.n	8003ad6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ad2:	2b03      	cmp	r3, #3
 8003ad4:	d107      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad6:	4b3f      	ldr	r3, [pc, #252]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d109      	bne.n	8003af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e06f      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae6:	4b3b      	ldr	r3, [pc, #236]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e067      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003af6:	4b37      	ldr	r3, [pc, #220]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f023 0203 	bic.w	r2, r3, #3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	4934      	ldr	r1, [pc, #208]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b08:	f7ff fa42 	bl	8002f90 <HAL_GetTick>
 8003b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0e:	e00a      	b.n	8003b26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b10:	f7ff fa3e 	bl	8002f90 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e04f      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b26:	4b2b      	ldr	r3, [pc, #172]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 020c 	and.w	r2, r3, #12
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d1eb      	bne.n	8003b10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b38:	4b25      	ldr	r3, [pc, #148]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d20c      	bcs.n	8003b60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b46:	4b22      	ldr	r3, [pc, #136]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	b2d2      	uxtb	r2, r2
 8003b4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b4e:	4b20      	ldr	r3, [pc, #128]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d001      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e032      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d008      	beq.n	8003b7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b6c:	4b19      	ldr	r3, [pc, #100]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	4916      	ldr	r1, [pc, #88]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0308 	and.w	r3, r3, #8
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d009      	beq.n	8003b9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b8a:	4b12      	ldr	r3, [pc, #72]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	490e      	ldr	r1, [pc, #56]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b9e:	f000 f821 	bl	8003be4 <HAL_RCC_GetSysClockFreq>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	091b      	lsrs	r3, r3, #4
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	490a      	ldr	r1, [pc, #40]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003bb0:	5ccb      	ldrb	r3, [r1, r3]
 8003bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb6:	4a09      	ldr	r2, [pc, #36]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003bb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bba:	4b09      	ldr	r3, [pc, #36]	@ (8003be0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7ff f9a2 	bl	8002f08 <HAL_InitTick>

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40023c00 	.word	0x40023c00
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	08004480 	.word	0x08004480
 8003bdc:	20000000 	.word	0x20000000
 8003be0:	20000008 	.word	0x20000008

08003be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003be8:	b094      	sub	sp, #80	@ 0x50
 8003bea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bec:	2300      	movs	r3, #0
 8003bee:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bfc:	4b79      	ldr	r3, [pc, #484]	@ (8003de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 030c 	and.w	r3, r3, #12
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d00d      	beq.n	8003c24 <HAL_RCC_GetSysClockFreq+0x40>
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	f200 80e1 	bhi.w	8003dd0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d002      	beq.n	8003c18 <HAL_RCC_GetSysClockFreq+0x34>
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d003      	beq.n	8003c1e <HAL_RCC_GetSysClockFreq+0x3a>
 8003c16:	e0db      	b.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c18:	4b73      	ldr	r3, [pc, #460]	@ (8003de8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c1a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003c1c:	e0db      	b.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c1e:	4b73      	ldr	r3, [pc, #460]	@ (8003dec <HAL_RCC_GetSysClockFreq+0x208>)
 8003c20:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c22:	e0d8      	b.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c24:	4b6f      	ldr	r3, [pc, #444]	@ (8003de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c2c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c2e:	4b6d      	ldr	r3, [pc, #436]	@ (8003de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d063      	beq.n	8003d02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c3a:	4b6a      	ldr	r3, [pc, #424]	@ (8003de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	099b      	lsrs	r3, r3, #6
 8003c40:	2200      	movs	r2, #0
 8003c42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c44:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c4e:	2300      	movs	r3, #0
 8003c50:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c56:	4622      	mov	r2, r4
 8003c58:	462b      	mov	r3, r5
 8003c5a:	f04f 0000 	mov.w	r0, #0
 8003c5e:	f04f 0100 	mov.w	r1, #0
 8003c62:	0159      	lsls	r1, r3, #5
 8003c64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c68:	0150      	lsls	r0, r2, #5
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	4621      	mov	r1, r4
 8003c70:	1a51      	subs	r1, r2, r1
 8003c72:	6139      	str	r1, [r7, #16]
 8003c74:	4629      	mov	r1, r5
 8003c76:	eb63 0301 	sbc.w	r3, r3, r1
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c88:	4659      	mov	r1, fp
 8003c8a:	018b      	lsls	r3, r1, #6
 8003c8c:	4651      	mov	r1, sl
 8003c8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c92:	4651      	mov	r1, sl
 8003c94:	018a      	lsls	r2, r1, #6
 8003c96:	4651      	mov	r1, sl
 8003c98:	ebb2 0801 	subs.w	r8, r2, r1
 8003c9c:	4659      	mov	r1, fp
 8003c9e:	eb63 0901 	sbc.w	r9, r3, r1
 8003ca2:	f04f 0200 	mov.w	r2, #0
 8003ca6:	f04f 0300 	mov.w	r3, #0
 8003caa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cb6:	4690      	mov	r8, r2
 8003cb8:	4699      	mov	r9, r3
 8003cba:	4623      	mov	r3, r4
 8003cbc:	eb18 0303 	adds.w	r3, r8, r3
 8003cc0:	60bb      	str	r3, [r7, #8]
 8003cc2:	462b      	mov	r3, r5
 8003cc4:	eb49 0303 	adc.w	r3, r9, r3
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003cd6:	4629      	mov	r1, r5
 8003cd8:	024b      	lsls	r3, r1, #9
 8003cda:	4621      	mov	r1, r4
 8003cdc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ce0:	4621      	mov	r1, r4
 8003ce2:	024a      	lsls	r2, r1, #9
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cea:	2200      	movs	r2, #0
 8003cec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cf0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cf4:	f7fc fe5e 	bl	80009b4 <__aeabi_uldivmod>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d00:	e058      	b.n	8003db4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d02:	4b38      	ldr	r3, [pc, #224]	@ (8003de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	099b      	lsrs	r3, r3, #6
 8003d08:	2200      	movs	r2, #0
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	4611      	mov	r1, r2
 8003d0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d12:	623b      	str	r3, [r7, #32]
 8003d14:	2300      	movs	r3, #0
 8003d16:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d1c:	4642      	mov	r2, r8
 8003d1e:	464b      	mov	r3, r9
 8003d20:	f04f 0000 	mov.w	r0, #0
 8003d24:	f04f 0100 	mov.w	r1, #0
 8003d28:	0159      	lsls	r1, r3, #5
 8003d2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d2e:	0150      	lsls	r0, r2, #5
 8003d30:	4602      	mov	r2, r0
 8003d32:	460b      	mov	r3, r1
 8003d34:	4641      	mov	r1, r8
 8003d36:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d3a:	4649      	mov	r1, r9
 8003d3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d40:	f04f 0200 	mov.w	r2, #0
 8003d44:	f04f 0300 	mov.w	r3, #0
 8003d48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d54:	ebb2 040a 	subs.w	r4, r2, sl
 8003d58:	eb63 050b 	sbc.w	r5, r3, fp
 8003d5c:	f04f 0200 	mov.w	r2, #0
 8003d60:	f04f 0300 	mov.w	r3, #0
 8003d64:	00eb      	lsls	r3, r5, #3
 8003d66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d6a:	00e2      	lsls	r2, r4, #3
 8003d6c:	4614      	mov	r4, r2
 8003d6e:	461d      	mov	r5, r3
 8003d70:	4643      	mov	r3, r8
 8003d72:	18e3      	adds	r3, r4, r3
 8003d74:	603b      	str	r3, [r7, #0]
 8003d76:	464b      	mov	r3, r9
 8003d78:	eb45 0303 	adc.w	r3, r5, r3
 8003d7c:	607b      	str	r3, [r7, #4]
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	f04f 0300 	mov.w	r3, #0
 8003d86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d8a:	4629      	mov	r1, r5
 8003d8c:	028b      	lsls	r3, r1, #10
 8003d8e:	4621      	mov	r1, r4
 8003d90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d94:	4621      	mov	r1, r4
 8003d96:	028a      	lsls	r2, r1, #10
 8003d98:	4610      	mov	r0, r2
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d9e:	2200      	movs	r2, #0
 8003da0:	61bb      	str	r3, [r7, #24]
 8003da2:	61fa      	str	r2, [r7, #28]
 8003da4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003da8:	f7fc fe04 	bl	80009b4 <__aeabi_uldivmod>
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	4613      	mov	r3, r2
 8003db2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003db4:	4b0b      	ldr	r3, [pc, #44]	@ (8003de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	0c1b      	lsrs	r3, r3, #16
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003dc4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003dc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dcc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003dce:	e002      	b.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dd0:	4b05      	ldr	r3, [pc, #20]	@ (8003de8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003dd2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003dd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3750      	adds	r7, #80	@ 0x50
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003de2:	bf00      	nop
 8003de4:	40023800 	.word	0x40023800
 8003de8:	00f42400 	.word	0x00f42400
 8003dec:	007a1200 	.word	0x007a1200

08003df0 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e034      	b.n	8003e70 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d106      	bne.n	8003e20 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f7fd f808 	bl	8000e30 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	3308      	adds	r3, #8
 8003e28:	4619      	mov	r1, r3
 8003e2a:	4610      	mov	r0, r2
 8003e2c:	f000 fa20 	bl	8004270 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6818      	ldr	r0, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	461a      	mov	r2, r3
 8003e3a:	68b9      	ldr	r1, [r7, #8]
 8003e3c:	f000 fa6a 	bl	8004314 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6858      	ldr	r0, [r3, #4]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4c:	6879      	ldr	r1, [r7, #4]
 8003e4e:	f000 fa9f 	bl	8004390 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	6892      	ldr	r2, [r2, #8]
 8003e5a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	6892      	ldr	r2, [r2, #8]
 8003e66:	f041 0101 	orr.w	r1, r1, #1
 8003e6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e041      	b.n	8003f0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d106      	bne.n	8003ea4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7fe ffc4 	bl	8002e2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4610      	mov	r0, r2
 8003eb8:	f000 f8be 	bl	8004038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
	...

08003f18 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d001      	beq.n	8003f30 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e046      	b.n	8003fbe <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2202      	movs	r2, #2
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a23      	ldr	r2, [pc, #140]	@ (8003fcc <HAL_TIM_Base_Start+0xb4>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d022      	beq.n	8003f88 <HAL_TIM_Base_Start+0x70>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f4a:	d01d      	beq.n	8003f88 <HAL_TIM_Base_Start+0x70>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a1f      	ldr	r2, [pc, #124]	@ (8003fd0 <HAL_TIM_Base_Start+0xb8>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d018      	beq.n	8003f88 <HAL_TIM_Base_Start+0x70>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a1e      	ldr	r2, [pc, #120]	@ (8003fd4 <HAL_TIM_Base_Start+0xbc>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d013      	beq.n	8003f88 <HAL_TIM_Base_Start+0x70>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a1c      	ldr	r2, [pc, #112]	@ (8003fd8 <HAL_TIM_Base_Start+0xc0>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d00e      	beq.n	8003f88 <HAL_TIM_Base_Start+0x70>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a1b      	ldr	r2, [pc, #108]	@ (8003fdc <HAL_TIM_Base_Start+0xc4>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d009      	beq.n	8003f88 <HAL_TIM_Base_Start+0x70>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a19      	ldr	r2, [pc, #100]	@ (8003fe0 <HAL_TIM_Base_Start+0xc8>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d004      	beq.n	8003f88 <HAL_TIM_Base_Start+0x70>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a18      	ldr	r2, [pc, #96]	@ (8003fe4 <HAL_TIM_Base_Start+0xcc>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d111      	bne.n	8003fac <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2b06      	cmp	r3, #6
 8003f98:	d010      	beq.n	8003fbc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f042 0201 	orr.w	r2, r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003faa:	e007      	b.n	8003fbc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 0201 	orr.w	r2, r2, #1
 8003fba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	40010000 	.word	0x40010000
 8003fd0:	40000400 	.word	0x40000400
 8003fd4:	40000800 	.word	0x40000800
 8003fd8:	40000c00 	.word	0x40000c00
 8003fdc:	40010400 	.word	0x40010400
 8003fe0:	40014000 	.word	0x40014000
 8003fe4:	40001800 	.word	0x40001800

08003fe8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6a1a      	ldr	r2, [r3, #32]
 8003ff6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10f      	bne.n	8004020 <HAL_TIM_Base_Stop+0x38>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6a1a      	ldr	r2, [r3, #32]
 8004006:	f240 4344 	movw	r3, #1092	@ 0x444
 800400a:	4013      	ands	r3, r2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d107      	bne.n	8004020 <HAL_TIM_Base_Stop+0x38>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 0201 	bic.w	r2, r2, #1
 800401e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
	...

08004038 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a40      	ldr	r2, [pc, #256]	@ (800414c <TIM_Base_SetConfig+0x114>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d013      	beq.n	8004078 <TIM_Base_SetConfig+0x40>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004056:	d00f      	beq.n	8004078 <TIM_Base_SetConfig+0x40>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a3d      	ldr	r2, [pc, #244]	@ (8004150 <TIM_Base_SetConfig+0x118>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d00b      	beq.n	8004078 <TIM_Base_SetConfig+0x40>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a3c      	ldr	r2, [pc, #240]	@ (8004154 <TIM_Base_SetConfig+0x11c>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d007      	beq.n	8004078 <TIM_Base_SetConfig+0x40>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a3b      	ldr	r2, [pc, #236]	@ (8004158 <TIM_Base_SetConfig+0x120>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d003      	beq.n	8004078 <TIM_Base_SetConfig+0x40>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a3a      	ldr	r2, [pc, #232]	@ (800415c <TIM_Base_SetConfig+0x124>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d108      	bne.n	800408a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800407e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	4313      	orrs	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a2f      	ldr	r2, [pc, #188]	@ (800414c <TIM_Base_SetConfig+0x114>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d02b      	beq.n	80040ea <TIM_Base_SetConfig+0xb2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004098:	d027      	beq.n	80040ea <TIM_Base_SetConfig+0xb2>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a2c      	ldr	r2, [pc, #176]	@ (8004150 <TIM_Base_SetConfig+0x118>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d023      	beq.n	80040ea <TIM_Base_SetConfig+0xb2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a2b      	ldr	r2, [pc, #172]	@ (8004154 <TIM_Base_SetConfig+0x11c>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d01f      	beq.n	80040ea <TIM_Base_SetConfig+0xb2>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a2a      	ldr	r2, [pc, #168]	@ (8004158 <TIM_Base_SetConfig+0x120>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d01b      	beq.n	80040ea <TIM_Base_SetConfig+0xb2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a29      	ldr	r2, [pc, #164]	@ (800415c <TIM_Base_SetConfig+0x124>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d017      	beq.n	80040ea <TIM_Base_SetConfig+0xb2>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a28      	ldr	r2, [pc, #160]	@ (8004160 <TIM_Base_SetConfig+0x128>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d013      	beq.n	80040ea <TIM_Base_SetConfig+0xb2>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a27      	ldr	r2, [pc, #156]	@ (8004164 <TIM_Base_SetConfig+0x12c>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d00f      	beq.n	80040ea <TIM_Base_SetConfig+0xb2>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a26      	ldr	r2, [pc, #152]	@ (8004168 <TIM_Base_SetConfig+0x130>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d00b      	beq.n	80040ea <TIM_Base_SetConfig+0xb2>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a25      	ldr	r2, [pc, #148]	@ (800416c <TIM_Base_SetConfig+0x134>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d007      	beq.n	80040ea <TIM_Base_SetConfig+0xb2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a24      	ldr	r2, [pc, #144]	@ (8004170 <TIM_Base_SetConfig+0x138>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d003      	beq.n	80040ea <TIM_Base_SetConfig+0xb2>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a23      	ldr	r2, [pc, #140]	@ (8004174 <TIM_Base_SetConfig+0x13c>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d108      	bne.n	80040fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	4313      	orrs	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	689a      	ldr	r2, [r3, #8]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a0a      	ldr	r2, [pc, #40]	@ (800414c <TIM_Base_SetConfig+0x114>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d003      	beq.n	8004130 <TIM_Base_SetConfig+0xf8>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a0c      	ldr	r2, [pc, #48]	@ (800415c <TIM_Base_SetConfig+0x124>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d103      	bne.n	8004138 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	691a      	ldr	r2, [r3, #16]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	615a      	str	r2, [r3, #20]
}
 800413e:	bf00      	nop
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	40010000 	.word	0x40010000
 8004150:	40000400 	.word	0x40000400
 8004154:	40000800 	.word	0x40000800
 8004158:	40000c00 	.word	0x40000c00
 800415c:	40010400 	.word	0x40010400
 8004160:	40014000 	.word	0x40014000
 8004164:	40014400 	.word	0x40014400
 8004168:	40014800 	.word	0x40014800
 800416c:	40001800 	.word	0x40001800
 8004170:	40001c00 	.word	0x40001c00
 8004174:	40002000 	.word	0x40002000

08004178 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004188:	2b01      	cmp	r3, #1
 800418a:	d101      	bne.n	8004190 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800418c:	2302      	movs	r3, #2
 800418e:	e05a      	b.n	8004246 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2202      	movs	r2, #2
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	4313      	orrs	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a21      	ldr	r2, [pc, #132]	@ (8004254 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d022      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041dc:	d01d      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a1d      	ldr	r2, [pc, #116]	@ (8004258 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d018      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a1b      	ldr	r2, [pc, #108]	@ (800425c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d013      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a1a      	ldr	r2, [pc, #104]	@ (8004260 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d00e      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a18      	ldr	r2, [pc, #96]	@ (8004264 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d009      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a17      	ldr	r2, [pc, #92]	@ (8004268 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d004      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a15      	ldr	r2, [pc, #84]	@ (800426c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d10c      	bne.n	8004234 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004220:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	4313      	orrs	r3, r2
 800422a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	40010000 	.word	0x40010000
 8004258:	40000400 	.word	0x40000400
 800425c:	40000800 	.word	0x40000800
 8004260:	40000c00 	.word	0x40000c00
 8004264:	40010400 	.word	0x40010400
 8004268:	40014000 	.word	0x40014000
 800426c:	40001800 	.word	0x40001800

08004270 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800427a:	2300      	movs	r3, #0
 800427c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004288:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	4b20      	ldr	r3, [pc, #128]	@ (8004310 <FSMC_NORSRAM_Init+0xa0>)
 800428e:	4013      	ands	r3, r2
 8004290:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800429a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80042a0:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80042a6:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80042ac:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80042b2:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80042b8:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80042be:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                     Init->WriteOperation       |\
 80042c4:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                     Init->WaitSignal           |\
 80042ca:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                     Init->ExtendedMode         |\
 80042d0:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                     Init->AsynchronousWait     |\
 80042d6:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                     Init->PageSize             |\
 80042dc:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d103      	bne.n	80042f4 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042f2:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68f9      	ldr	r1, [r7, #12]
 80042fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	fff00080 	.word	0xfff00080

08004314 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004314:	b480      	push	{r7}
 8004316:	b087      	sub	sp, #28
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	1c5a      	adds	r2, r3, #1
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800432e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004336:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004342:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800434a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8004352:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	3b01      	subs	r3, #1
 800435a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800435c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	3b02      	subs	r3, #2
 8004364:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004366:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800436c:	4313      	orrs	r3, r2
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	4313      	orrs	r3, r2
 8004372:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	1c5a      	adds	r2, r3, #1
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6979      	ldr	r1, [r7, #20]
 800437c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	371c      	adds	r7, #28
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
	...

08004390 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8004390:	b480      	push	{r7}
 8004392:	b087      	sub	sp, #28
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
 800439c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800439e:	2300      	movs	r3, #0
 80043a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043a8:	d122      	bne.n	80043f0 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043b2:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	4b15      	ldr	r3, [pc, #84]	@ (800440c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80043b8:	4013      	ands	r3, r2
 80043ba:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80043c6:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80043ce:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80043d6:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80043dc:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6979      	ldr	r1, [r7, #20]
 80043ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80043ee:	e005      	b.n	80043fc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 80043f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	371c      	adds	r7, #28
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	cff00000 	.word	0xcff00000

08004410 <memset>:
 8004410:	4402      	add	r2, r0
 8004412:	4603      	mov	r3, r0
 8004414:	4293      	cmp	r3, r2
 8004416:	d100      	bne.n	800441a <memset+0xa>
 8004418:	4770      	bx	lr
 800441a:	f803 1b01 	strb.w	r1, [r3], #1
 800441e:	e7f9      	b.n	8004414 <memset+0x4>

08004420 <__libc_init_array>:
 8004420:	b570      	push	{r4, r5, r6, lr}
 8004422:	4d0d      	ldr	r5, [pc, #52]	@ (8004458 <__libc_init_array+0x38>)
 8004424:	4c0d      	ldr	r4, [pc, #52]	@ (800445c <__libc_init_array+0x3c>)
 8004426:	1b64      	subs	r4, r4, r5
 8004428:	10a4      	asrs	r4, r4, #2
 800442a:	2600      	movs	r6, #0
 800442c:	42a6      	cmp	r6, r4
 800442e:	d109      	bne.n	8004444 <__libc_init_array+0x24>
 8004430:	4d0b      	ldr	r5, [pc, #44]	@ (8004460 <__libc_init_array+0x40>)
 8004432:	4c0c      	ldr	r4, [pc, #48]	@ (8004464 <__libc_init_array+0x44>)
 8004434:	f000 f818 	bl	8004468 <_init>
 8004438:	1b64      	subs	r4, r4, r5
 800443a:	10a4      	asrs	r4, r4, #2
 800443c:	2600      	movs	r6, #0
 800443e:	42a6      	cmp	r6, r4
 8004440:	d105      	bne.n	800444e <__libc_init_array+0x2e>
 8004442:	bd70      	pop	{r4, r5, r6, pc}
 8004444:	f855 3b04 	ldr.w	r3, [r5], #4
 8004448:	4798      	blx	r3
 800444a:	3601      	adds	r6, #1
 800444c:	e7ee      	b.n	800442c <__libc_init_array+0xc>
 800444e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004452:	4798      	blx	r3
 8004454:	3601      	adds	r6, #1
 8004456:	e7f2      	b.n	800443e <__libc_init_array+0x1e>
 8004458:	08004498 	.word	0x08004498
 800445c:	08004498 	.word	0x08004498
 8004460:	08004498 	.word	0x08004498
 8004464:	0800449c 	.word	0x0800449c

08004468 <_init>:
 8004468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446a:	bf00      	nop
 800446c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800446e:	bc08      	pop	{r3}
 8004470:	469e      	mov	lr, r3
 8004472:	4770      	bx	lr

08004474 <_fini>:
 8004474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004476:	bf00      	nop
 8004478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800447a:	bc08      	pop	{r3}
 800447c:	469e      	mov	lr, r3
 800447e:	4770      	bx	lr
